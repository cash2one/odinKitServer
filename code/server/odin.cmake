MACRO(ODIN_BUILD_OPTION)
  IF(MSVC)
    IF(MSVC10)
      set(SPEED_OPTIMIZATIONS "/Ox /GF /GS-")
      set(MIN_OPTIMIZATIONS "/Od /Ob1")
    ELSEIF(MSVC90)
      set(SPEED_OPTIMIZATIONS "/Ob2 /Oi /Ot /Oy /GT /GF /GS-")
      set(MIN_OPTIMIZATIONS "/Ob1")
    ELSEIF(MSVC80)
      set(SPEED_OPTIMIZATIONS "/Ox /GF /GS-")
      set(MIN_OPTIMIZATIONS "/Od /Ob1")
    ELSE(MSVC10)
      MESSAGE(FATAL_ERROR "Can't determine compiler version ${MSVC_VERSION}")
    ENDIF(MSVC10)

    set(PROJECT_CFLAGS "${PROJECT_CFLAGS} /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /DWIN32 /D_WINDOWS /D_LIB /W3 /Zi /Zm1000 /MP /Gy-")
    set(PROJECT_CXXFLAGS "${PROJECT_CFLAGS} /EHa")
    set(PROJECT_LINKFLAGS "-DEBUG")
    
    set(PROJECT_DEBUG_CFLAGS "/MDd /RTC1 /D_DEBUG /D__DEV__ ${MIN_OPTIMIZATIONS}")
    set(PROJECT_RELEASE_CFLAGS "/MD /D NDEBUG ${SPEED_OPTIMIZATIONS}")
    
    set(PROJECT_DEBUG_LINKFLAGS "/NODEFAULTLIB:msvcrt /INCREMENTAL:YES")
    set(PROJECT_RELEASE_LINKFLAGS "/OPT:REF /OPT:ICF /INCREMENTAL:NO")
  ELSE(MSVC)
  	set(CMAKE_C_COMPILER g++)
  	
    set(PROJECT_CFLAGS "${PROJECT_CFLAGS} -fPIC -O0 -Wall -g -ggdb -m64 -ansi -D_X64")
    set(PROJECT_CXXFLAGS ${PROJECT_CFLAGS})
    set(PROJECT_LINKFLAGS "${PROJECT_LINKFLAGS} -Wl,--no-undefined -Wl,--as-needed")

    set(PROJECT_DEBUG_CFLAGS "-D_DEBUG -DDEBUG")
    set(PROJECT_RELEASE_CFLAGS "-DNDEBUG -O6")
    
    set(PROJECT_DEBUG_LINKFLAGS "")
    set(PROJECT_RELEASE_LINKFLAGS "")
  ENDIF(MSVC)
ENDMACRO(ODIN_BUILD_OPTION)

MACRO(ODIN_BUILD)
  set(CMAKE_C_FLAGS ${PROJECT_CFLAGS} CACHE STRING "" FORCE)
  set(CMAKE_CXX_FLAGS ${PROJECT_CXXFLAGS} CACHE STRING "" FORCE)
  
  ## Debug
  set(CMAKE_C_FLAGS_DEBUG ${PROJECT_DEBUG_CFLAGS} CACHE STRING "" FORCE)
  set(CMAKE_CXX_FLAGS_DEBUG ${PROJECT_DEBUG_CFLAGS} CACHE STRING "" FORCE)
  set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${PROJECT_LINKFLAGS} ${PROJECT_DEBUG_LINKFLAGS}" CACHE STRING "" FORCE)
  set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${PROJECT_LINKFLAGS} ${PROJECT_DEBUG_LINKFLAGS}" CACHE STRING "" FORCE)
  set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${PROJECT_LINKFLAGS} ${PROJECT_DEBUG_LINKFLAGS}" CACHE STRING "" FORCE)

  ## Release
  set(CMAKE_C_FLAGS_RELEASE ${PROJECT_RELEASE_CFLAGS} CACHE STRING "" FORCE)
  set(CMAKE_CXX_FLAGS_RELEASE ${PROJECT_RELEASE_CFLAGS} CACHE STRING "" FORCE)
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${PROJECT_LINKFLAGS} ${PROJECT_RELEASE_LINKFLAGS}" CACHE STRING "" FORCE)
  set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${PROJECT_LINKFLAGS} ${PROJECT_RELEASE_LINKFLAGS}" CACHE STRING "" FORCE)
  set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${PROJECT_LINKFLAGS} ${PROJECT_RELEASE_LINKFLAGS}" CACHE STRING "" FORCE)
ENDMACRO(ODIN_BUILD)

MACRO(ODIN_COMMON_INCLUDE path)
    include_directories(${path}/../../public/defines)
    include_directories(${path}/../../public/message/source)
    include_directories(${path}/../common)
    include_directories(${path}/../ServerCore)
    include_directories(${path}/../ServerCore/include)
    include_directories(${path}/../shared)
    include_directories(${path}/../shared/config)
    include_directories(${path}/../shared/container)
    include_directories(${path}/../shared/memory)
    include_directories(${path}/../shared/mongoose)
    include_directories(${path}/../shared/network)
    include_directories(${path}/../shared/rapidjson)
    include_directories(${path}/../shared/thread)
    include_directories(${path}/../shared/util)
    include_directories(${path}/../shared/xml)
    include_directories(${path}/../shared/httpd)
    include_directories(${path}/../external/zlib)
    include_directories(${path}/../external/curl)
    include_directories(${path}/../external/mysql/include)
    include_directories(${path}/../external/lua/include)
    include_directories(${path}/../external/mongo/include)
    include_directories(${path}/../../public/external/protobuf/src)
    include_directories(${path}/../external)
ENDMACRO(ODIN_COMMON_INCLUDE)

MACRO(ODIN_COMMON_MACRO)
    #add_definitions(-D_DEBUG)
    #add_definitions(-DUSE_STANDARAD_LUA_LIBS)
ENDMACRO(ODIN_COMMON_MACRO)

MACRO(ODIN_INSTALL_PATH path)
    set(LIBRARY_OUTPUT_PATH ${path}/../libs)
    set(EXECUTABLE_OUTPUT_PATH ${path}/../../../exec/server)
ENDMACRO(ODIN_INSTALL_PATH)

MACRO(ODIN_LIBRARY_PATH path)
    link_directories(${path}/../libs)
    link_directories(${path}/../external/lib)
    link_directories(${path}/../external/lua/lib)
    link_directories(${path}/../external/zlib/lib)
    link_directories(${path}/../external/boost/lib)
    link_directories(${path}/../external/curl/lib)
    link_directories(${path}/../external/libuv/lib)
    link_directories(${path}/../external/mongo/lib64)
    link_directories(${path}/../../public/external/protobuf/lib)
    link_directories(${path}/../../../exec/server/lib)
ENDMACRO(ODIN_LIBRARY_PATH)
