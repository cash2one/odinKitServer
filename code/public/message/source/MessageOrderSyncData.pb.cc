// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageOrderSyncData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageOrderSyncData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* OrderDataUpdatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderDataUpdatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderDataInsertPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderDataInsertPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderDataDeletePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderDataDeletePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderDataMoveFront_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderDataMoveFront_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderDataMoveBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderDataMoveBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderArenaPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderArenaPlayerData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageOrderSyncData_2eproto() {
  protobuf_AddDesc_MessageOrderSyncData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageOrderSyncData.proto");
  GOOGLE_CHECK(file != NULL);
  OrderDataUpdatePlayer_descriptor_ = file->message_type(0);
  static const int OrderDataUpdatePlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataUpdatePlayer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataUpdatePlayer, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataUpdatePlayer, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataUpdatePlayer, order_),
  };
  OrderDataUpdatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderDataUpdatePlayer_descriptor_,
      OrderDataUpdatePlayer::default_instance_,
      OrderDataUpdatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataUpdatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataUpdatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderDataUpdatePlayer));
  OrderDataInsertPlayer_descriptor_ = file->message_type(1);
  static const int OrderDataInsertPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataInsertPlayer, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataInsertPlayer, before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataInsertPlayer, order_),
  };
  OrderDataInsertPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderDataInsertPlayer_descriptor_,
      OrderDataInsertPlayer::default_instance_,
      OrderDataInsertPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataInsertPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataInsertPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderDataInsertPlayer));
  OrderDataDeletePlayer_descriptor_ = file->message_type(2);
  static const int OrderDataDeletePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataDeletePlayer, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataDeletePlayer, order_),
  };
  OrderDataDeletePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderDataDeletePlayer_descriptor_,
      OrderDataDeletePlayer::default_instance_,
      OrderDataDeletePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataDeletePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataDeletePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderDataDeletePlayer));
  OrderDataMoveFront_descriptor_ = file->message_type(3);
  static const int OrderDataMoveFront_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveFront, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveFront, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveFront, order_),
  };
  OrderDataMoveFront_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderDataMoveFront_descriptor_,
      OrderDataMoveFront::default_instance_,
      OrderDataMoveFront_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveFront, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveFront, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderDataMoveFront));
  OrderDataMoveBack_descriptor_ = file->message_type(4);
  static const int OrderDataMoveBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveBack, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveBack, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveBack, order_),
  };
  OrderDataMoveBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderDataMoveBack_descriptor_,
      OrderDataMoveBack::default_instance_,
      OrderDataMoveBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDataMoveBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderDataMoveBack));
  OrderArenaPlayerData_descriptor_ = file->message_type(5);
  static const int OrderArenaPlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderArenaPlayerData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderArenaPlayerData, player_),
  };
  OrderArenaPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderArenaPlayerData_descriptor_,
      OrderArenaPlayerData::default_instance_,
      OrderArenaPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderArenaPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderArenaPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderArenaPlayerData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageOrderSyncData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderDataUpdatePlayer_descriptor_, &OrderDataUpdatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderDataInsertPlayer_descriptor_, &OrderDataInsertPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderDataDeletePlayer_descriptor_, &OrderDataDeletePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderDataMoveFront_descriptor_, &OrderDataMoveFront::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderDataMoveBack_descriptor_, &OrderDataMoveBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderArenaPlayerData_descriptor_, &OrderArenaPlayerData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageOrderSyncData_2eproto() {
  delete OrderDataUpdatePlayer::default_instance_;
  delete OrderDataUpdatePlayer_reflection_;
  delete OrderDataInsertPlayer::default_instance_;
  delete OrderDataInsertPlayer_reflection_;
  delete OrderDataDeletePlayer::default_instance_;
  delete OrderDataDeletePlayer_reflection_;
  delete OrderDataMoveFront::default_instance_;
  delete OrderDataMoveFront_reflection_;
  delete OrderDataMoveBack::default_instance_;
  delete OrderDataMoveBack_reflection_;
  delete OrderArenaPlayerData::default_instance_;
  delete OrderArenaPlayerData_reflection_;
}

void protobuf_AddDesc_MessageOrderSyncData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Message::protobuf_AddDesc_MessageArenaPlayerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032MessageOrderSyncData.proto\022\007Message\032\034M"
    "essageArenaPlayerData.proto\"P\n\025OrderData"
    "UpdatePlayer\022\014\n\004type\030\001 \001(\005\022\r\n\005value\030\002 \001("
    "\005\022\013\n\003pid\030\003 \001(\003\022\r\n\005order\030\004 \001(\005\"\\\n\025OrderDa"
    "taInsertPlayer\022$\n\006player\030\001 \001(\0132\024.Message"
    ".ArenaPlayer\022\016\n\006before\030\002 \001(\005\022\r\n\005order\030\003 "
    "\001(\005\"3\n\025OrderDataDeletePlayer\022\013\n\003pid\030\001 \001("
    "\003\022\r\n\005order\030\002 \001(\005\"=\n\022OrderDataMoveFront\022\013"
    "\n\003src\030\001 \001(\005\022\013\n\003dst\030\002 \001(\005\022\r\n\005order\030\003 \001(\005\""
    "<\n\021OrderDataMoveBack\022\013\n\003src\030\001 \001(\005\022\013\n\003dst"
    "\030\002 \001(\005\022\r\n\005order\030\003 \001(\005\"J\n\024OrderArenaPlaye"
    "rData\022\014\n\004type\030\001 \001(\005\022$\n\006player\030\002 \001(\0132\024.Me"
    "ssage.ArenaPlayer", 497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageOrderSyncData.proto", &protobuf_RegisterTypes);
  OrderDataUpdatePlayer::default_instance_ = new OrderDataUpdatePlayer();
  OrderDataInsertPlayer::default_instance_ = new OrderDataInsertPlayer();
  OrderDataDeletePlayer::default_instance_ = new OrderDataDeletePlayer();
  OrderDataMoveFront::default_instance_ = new OrderDataMoveFront();
  OrderDataMoveBack::default_instance_ = new OrderDataMoveBack();
  OrderArenaPlayerData::default_instance_ = new OrderArenaPlayerData();
  OrderDataUpdatePlayer::default_instance_->InitAsDefaultInstance();
  OrderDataInsertPlayer::default_instance_->InitAsDefaultInstance();
  OrderDataDeletePlayer::default_instance_->InitAsDefaultInstance();
  OrderDataMoveFront::default_instance_->InitAsDefaultInstance();
  OrderDataMoveBack::default_instance_->InitAsDefaultInstance();
  OrderArenaPlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageOrderSyncData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageOrderSyncData_2eproto {
  StaticDescriptorInitializer_MessageOrderSyncData_2eproto() {
    protobuf_AddDesc_MessageOrderSyncData_2eproto();
  }
} static_descriptor_initializer_MessageOrderSyncData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OrderDataUpdatePlayer::kTypeFieldNumber;
const int OrderDataUpdatePlayer::kValueFieldNumber;
const int OrderDataUpdatePlayer::kPidFieldNumber;
const int OrderDataUpdatePlayer::kOrderFieldNumber;
#endif  // !_MSC_VER

OrderDataUpdatePlayer::OrderDataUpdatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderDataUpdatePlayer::InitAsDefaultInstance() {
}

OrderDataUpdatePlayer::OrderDataUpdatePlayer(const OrderDataUpdatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderDataUpdatePlayer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderDataUpdatePlayer::~OrderDataUpdatePlayer() {
  SharedDtor();
}

void OrderDataUpdatePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderDataUpdatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDataUpdatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderDataUpdatePlayer_descriptor_;
}

const OrderDataUpdatePlayer& OrderDataUpdatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageOrderSyncData_2eproto();
  return *default_instance_;
}

OrderDataUpdatePlayer* OrderDataUpdatePlayer::default_instance_ = NULL;

OrderDataUpdatePlayer* OrderDataUpdatePlayer::New() const {
  return new OrderDataUpdatePlayer;
}

void OrderDataUpdatePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
    pid_ = GOOGLE_LONGLONG(0);
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderDataUpdatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // optional int64 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_order;
        break;
      }

      // optional int32 order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderDataUpdatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
  }

  // optional int32 order = 4;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderDataUpdatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pid(), target);
  }

  // optional int32 order = 4;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderDataUpdatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 order = 4;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDataUpdatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderDataUpdatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderDataUpdatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderDataUpdatePlayer::MergeFrom(const OrderDataUpdatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderDataUpdatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDataUpdatePlayer::CopyFrom(const OrderDataUpdatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDataUpdatePlayer::IsInitialized() const {

  return true;
}

void OrderDataUpdatePlayer::Swap(OrderDataUpdatePlayer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(pid_, other->pid_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderDataUpdatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderDataUpdatePlayer_descriptor_;
  metadata.reflection = OrderDataUpdatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderDataInsertPlayer::kPlayerFieldNumber;
const int OrderDataInsertPlayer::kBeforeFieldNumber;
const int OrderDataInsertPlayer::kOrderFieldNumber;
#endif  // !_MSC_VER

OrderDataInsertPlayer::OrderDataInsertPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderDataInsertPlayer::InitAsDefaultInstance() {
  player_ = const_cast< ::Message::ArenaPlayer*>(&::Message::ArenaPlayer::default_instance());
}

OrderDataInsertPlayer::OrderDataInsertPlayer(const OrderDataInsertPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderDataInsertPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  before_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderDataInsertPlayer::~OrderDataInsertPlayer() {
  SharedDtor();
}

void OrderDataInsertPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void OrderDataInsertPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDataInsertPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderDataInsertPlayer_descriptor_;
}

const OrderDataInsertPlayer& OrderDataInsertPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageOrderSyncData_2eproto();
  return *default_instance_;
}

OrderDataInsertPlayer* OrderDataInsertPlayer::default_instance_ = NULL;

OrderDataInsertPlayer* OrderDataInsertPlayer::New() const {
  return new OrderDataInsertPlayer;
}

void OrderDataInsertPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::Message::ArenaPlayer::Clear();
    }
    before_ = 0;
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderDataInsertPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Message.ArenaPlayer player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_before;
        break;
      }

      // optional int32 before = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &before_)));
          set_has_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderDataInsertPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Message.ArenaPlayer player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  // optional int32 before = 2;
  if (has_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->before(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderDataInsertPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Message.ArenaPlayer player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  // optional int32 before = 2;
  if (has_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->before(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderDataInsertPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Message.ArenaPlayer player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // optional int32 before = 2;
    if (has_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->before());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDataInsertPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderDataInsertPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderDataInsertPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderDataInsertPlayer::MergeFrom(const OrderDataInsertPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::Message::ArenaPlayer::MergeFrom(from.player());
    }
    if (from.has_before()) {
      set_before(from.before());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderDataInsertPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDataInsertPlayer::CopyFrom(const OrderDataInsertPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDataInsertPlayer::IsInitialized() const {

  return true;
}

void OrderDataInsertPlayer::Swap(OrderDataInsertPlayer* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(before_, other->before_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderDataInsertPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderDataInsertPlayer_descriptor_;
  metadata.reflection = OrderDataInsertPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderDataDeletePlayer::kPidFieldNumber;
const int OrderDataDeletePlayer::kOrderFieldNumber;
#endif  // !_MSC_VER

OrderDataDeletePlayer::OrderDataDeletePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderDataDeletePlayer::InitAsDefaultInstance() {
}

OrderDataDeletePlayer::OrderDataDeletePlayer(const OrderDataDeletePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderDataDeletePlayer::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderDataDeletePlayer::~OrderDataDeletePlayer() {
  SharedDtor();
}

void OrderDataDeletePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderDataDeletePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDataDeletePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderDataDeletePlayer_descriptor_;
}

const OrderDataDeletePlayer& OrderDataDeletePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageOrderSyncData_2eproto();
  return *default_instance_;
}

OrderDataDeletePlayer* OrderDataDeletePlayer::default_instance_ = NULL;

OrderDataDeletePlayer* OrderDataDeletePlayer::New() const {
  return new OrderDataDeletePlayer;
}

void OrderDataDeletePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderDataDeletePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderDataDeletePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderDataDeletePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderDataDeletePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDataDeletePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderDataDeletePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderDataDeletePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderDataDeletePlayer::MergeFrom(const OrderDataDeletePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderDataDeletePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDataDeletePlayer::CopyFrom(const OrderDataDeletePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDataDeletePlayer::IsInitialized() const {

  return true;
}

void OrderDataDeletePlayer::Swap(OrderDataDeletePlayer* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderDataDeletePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderDataDeletePlayer_descriptor_;
  metadata.reflection = OrderDataDeletePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderDataMoveFront::kSrcFieldNumber;
const int OrderDataMoveFront::kDstFieldNumber;
const int OrderDataMoveFront::kOrderFieldNumber;
#endif  // !_MSC_VER

OrderDataMoveFront::OrderDataMoveFront()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderDataMoveFront::InitAsDefaultInstance() {
}

OrderDataMoveFront::OrderDataMoveFront(const OrderDataMoveFront& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderDataMoveFront::SharedCtor() {
  _cached_size_ = 0;
  src_ = 0;
  dst_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderDataMoveFront::~OrderDataMoveFront() {
  SharedDtor();
}

void OrderDataMoveFront::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderDataMoveFront::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDataMoveFront::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderDataMoveFront_descriptor_;
}

const OrderDataMoveFront& OrderDataMoveFront::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageOrderSyncData_2eproto();
  return *default_instance_;
}

OrderDataMoveFront* OrderDataMoveFront::default_instance_ = NULL;

OrderDataMoveFront* OrderDataMoveFront::New() const {
  return new OrderDataMoveFront;
}

void OrderDataMoveFront::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_ = 0;
    dst_ = 0;
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderDataMoveFront::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst;
        break;
      }

      // optional int32 dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderDataMoveFront::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // optional int32 dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderDataMoveFront::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // optional int32 dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderDataMoveFront::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // optional int32 dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDataMoveFront::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderDataMoveFront* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderDataMoveFront*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderDataMoveFront::MergeFrom(const OrderDataMoveFront& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderDataMoveFront::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDataMoveFront::CopyFrom(const OrderDataMoveFront& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDataMoveFront::IsInitialized() const {

  return true;
}

void OrderDataMoveFront::Swap(OrderDataMoveFront* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderDataMoveFront::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderDataMoveFront_descriptor_;
  metadata.reflection = OrderDataMoveFront_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderDataMoveBack::kSrcFieldNumber;
const int OrderDataMoveBack::kDstFieldNumber;
const int OrderDataMoveBack::kOrderFieldNumber;
#endif  // !_MSC_VER

OrderDataMoveBack::OrderDataMoveBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderDataMoveBack::InitAsDefaultInstance() {
}

OrderDataMoveBack::OrderDataMoveBack(const OrderDataMoveBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderDataMoveBack::SharedCtor() {
  _cached_size_ = 0;
  src_ = 0;
  dst_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderDataMoveBack::~OrderDataMoveBack() {
  SharedDtor();
}

void OrderDataMoveBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderDataMoveBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDataMoveBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderDataMoveBack_descriptor_;
}

const OrderDataMoveBack& OrderDataMoveBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageOrderSyncData_2eproto();
  return *default_instance_;
}

OrderDataMoveBack* OrderDataMoveBack::default_instance_ = NULL;

OrderDataMoveBack* OrderDataMoveBack::New() const {
  return new OrderDataMoveBack;
}

void OrderDataMoveBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_ = 0;
    dst_ = 0;
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderDataMoveBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst;
        break;
      }

      // optional int32 dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderDataMoveBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // optional int32 dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderDataMoveBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // optional int32 dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderDataMoveBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // optional int32 dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDataMoveBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderDataMoveBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderDataMoveBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderDataMoveBack::MergeFrom(const OrderDataMoveBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderDataMoveBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDataMoveBack::CopyFrom(const OrderDataMoveBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDataMoveBack::IsInitialized() const {

  return true;
}

void OrderDataMoveBack::Swap(OrderDataMoveBack* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderDataMoveBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderDataMoveBack_descriptor_;
  metadata.reflection = OrderDataMoveBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderArenaPlayerData::kTypeFieldNumber;
const int OrderArenaPlayerData::kPlayerFieldNumber;
#endif  // !_MSC_VER

OrderArenaPlayerData::OrderArenaPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderArenaPlayerData::InitAsDefaultInstance() {
  player_ = const_cast< ::Message::ArenaPlayer*>(&::Message::ArenaPlayer::default_instance());
}

OrderArenaPlayerData::OrderArenaPlayerData(const OrderArenaPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderArenaPlayerData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderArenaPlayerData::~OrderArenaPlayerData() {
  SharedDtor();
}

void OrderArenaPlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void OrderArenaPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderArenaPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderArenaPlayerData_descriptor_;
}

const OrderArenaPlayerData& OrderArenaPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageOrderSyncData_2eproto();
  return *default_instance_;
}

OrderArenaPlayerData* OrderArenaPlayerData::default_instance_ = NULL;

OrderArenaPlayerData* OrderArenaPlayerData::New() const {
  return new OrderArenaPlayerData;
}

void OrderArenaPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_player()) {
      if (player_ != NULL) player_->::Message::ArenaPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderArenaPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .Message.ArenaPlayer player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderArenaPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .Message.ArenaPlayer player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderArenaPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .Message.ArenaPlayer player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderArenaPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .Message.ArenaPlayer player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderArenaPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderArenaPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderArenaPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderArenaPlayerData::MergeFrom(const OrderArenaPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_player()) {
      mutable_player()->::Message::ArenaPlayer::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderArenaPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderArenaPlayerData::CopyFrom(const OrderArenaPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderArenaPlayerData::IsInitialized() const {

  return true;
}

void OrderArenaPlayerData::Swap(OrderArenaPlayerData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderArenaPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderArenaPlayerData_descriptor_;
  metadata.reflection = OrderArenaPlayerData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
