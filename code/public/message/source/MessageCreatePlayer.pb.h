// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCreatePlayer.proto

#ifndef PROTOBUF_MessageCreatePlayer_2eproto__INCLUDED
#define PROTOBUF_MessageCreatePlayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageCreatePlayer_2eproto();
void protobuf_AssignDesc_MessageCreatePlayer_2eproto();
void protobuf_ShutdownFile_MessageCreatePlayer_2eproto();

class CreatePlayer;

// ===================================================================

class CreatePlayer : public ::google::protobuf::Message {
 public:
  CreatePlayer();
  virtual ~CreatePlayer();

  CreatePlayer(const CreatePlayer& from);

  inline CreatePlayer& operator=(const CreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePlayer& default_instance();

  void Swap(CreatePlayer* other);

  // implements Message ----------------------------------------------

  CreatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatePlayer& from);
  void MergeFrom(const CreatePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int32 server = 2;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline ::google::protobuf::int32 server() const;
  inline void set_server(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 roletemplate = 4;
  inline bool has_roletemplate() const;
  inline void clear_roletemplate();
  static const int kRoletemplateFieldNumber = 4;
  inline ::google::protobuf::int32 roletemplate() const;
  inline void set_roletemplate(::google::protobuf::int32 value);

  // optional int64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 stunt = 6;
  inline bool has_stunt() const;
  inline void clear_stunt();
  static const int kStuntFieldNumber = 6;
  inline ::google::protobuf::int32 stunt() const;
  inline void set_stunt(::google::protobuf::int32 value);

  // optional int32 quality = 7;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 7;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.CreatePlayer)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_roletemplate();
  inline void clear_has_roletemplate();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_stunt();
  inline void clear_has_stunt();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* name_;
  ::google::protobuf::int32 server_;
  ::google::protobuf::int32 roletemplate_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 stunt_;
  ::google::protobuf::int32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MessageCreatePlayer_2eproto();
  friend void protobuf_AssignDesc_MessageCreatePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessageCreatePlayer_2eproto();

  void InitAsDefaultInstance();
  static CreatePlayer* default_instance_;
};
// ===================================================================


// ===================================================================

// CreatePlayer

// optional int64 uid = 1;
inline bool CreatePlayer::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePlayer::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatePlayer::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatePlayer::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 CreatePlayer::uid() const {
  return uid_;
}
inline void CreatePlayer::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 server = 2;
inline bool CreatePlayer::has_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePlayer::set_has_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatePlayer::clear_has_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatePlayer::clear_server() {
  server_ = 0;
  clear_has_server();
}
inline ::google::protobuf::int32 CreatePlayer::server() const {
  return server_;
}
inline void CreatePlayer::set_server(::google::protobuf::int32 value) {
  set_has_server();
  server_ = value;
}

// optional string name = 3;
inline bool CreatePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatePlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreatePlayer::name() const {
  return *name_;
}
inline void CreatePlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreatePlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreatePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatePlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreatePlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatePlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 roletemplate = 4;
inline bool CreatePlayer::has_roletemplate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatePlayer::set_has_roletemplate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreatePlayer::clear_has_roletemplate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreatePlayer::clear_roletemplate() {
  roletemplate_ = 0;
  clear_has_roletemplate();
}
inline ::google::protobuf::int32 CreatePlayer::roletemplate() const {
  return roletemplate_;
}
inline void CreatePlayer::set_roletemplate(::google::protobuf::int32 value) {
  set_has_roletemplate();
  roletemplate_ = value;
}

// optional int64 pid = 5;
inline bool CreatePlayer::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatePlayer::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreatePlayer::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreatePlayer::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 CreatePlayer::pid() const {
  return pid_;
}
inline void CreatePlayer::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 stunt = 6;
inline bool CreatePlayer::has_stunt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreatePlayer::set_has_stunt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreatePlayer::clear_has_stunt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreatePlayer::clear_stunt() {
  stunt_ = 0;
  clear_has_stunt();
}
inline ::google::protobuf::int32 CreatePlayer::stunt() const {
  return stunt_;
}
inline void CreatePlayer::set_stunt(::google::protobuf::int32 value) {
  set_has_stunt();
  stunt_ = value;
}

// optional int32 quality = 7;
inline bool CreatePlayer::has_quality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreatePlayer::set_has_quality() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreatePlayer::clear_has_quality() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreatePlayer::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 CreatePlayer::quality() const {
  return quality_;
}
inline void CreatePlayer::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageCreatePlayer_2eproto__INCLUDED
