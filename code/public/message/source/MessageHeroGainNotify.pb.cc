// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageHeroGainNotify.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageHeroGainNotify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* HeroGainNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroGainNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageHeroGainNotify_2eproto() {
  protobuf_AddDesc_MessageHeroGainNotify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageHeroGainNotify.proto");
  GOOGLE_CHECK(file != NULL);
  HeroGainNotify_descriptor_ = file->message_type(0);
  static const int HeroGainNotify_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, intellect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, technique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, jouk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, treat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, physidamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, physidefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, magicdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, magicdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, stuntdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, stuntdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, basestrength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, baseintellect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, basetechnique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, baseagility_),
  };
  HeroGainNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroGainNotify_descriptor_,
      HeroGainNotify::default_instance_,
      HeroGainNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGainNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroGainNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageHeroGainNotify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroGainNotify_descriptor_, &HeroGainNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageHeroGainNotify_2eproto() {
  delete HeroGainNotify::default_instance_;
  delete HeroGainNotify_reflection_;
}

void protobuf_AddDesc_MessageHeroGainNotify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033MessageHeroGainNotify.proto\022\007Message\"\374"
    "\003\n\016HeroGainNotify\022\016\n\006heroid\030\001 \001(\003\022\022\n\ntem"
    "plateid\030\002 \001(\005\022\016\n\006parent\030\003 \001(\003\022\r\n\005level\030\004"
    " \001(\005\022\017\n\007quality\030\005 \001(\005\022\013\n\003exp\030\006 \001(\003\022\020\n\010st"
    "rength\030\007 \001(\005\022\021\n\tintellect\030\010 \001(\005\022\021\n\ttechn"
    "ique\030\t \001(\005\022\017\n\007agility\030\n \001(\005\022\013\n\003hit\030\013 \001(\005"
    "\022\014\n\004jouk\030\014 \001(\005\022\014\n\004crit\030\r \001(\005\022\020\n\010tenacity"
    "\030\016 \001(\005\022\r\n\005parry\030\017 \001(\005\022\r\n\005treat\030\020 \001(\005\022\023\n\013"
    "physidamage\030\021 \001(\005\022\024\n\014physidefense\030\022 \001(\005\022"
    "\023\n\013magicdamage\030\023 \001(\005\022\024\n\014magicdefense\030\024 \001"
    "(\005\022\023\n\013stuntdamage\030\025 \001(\005\022\024\n\014stuntdefense\030"
    "\026 \001(\005\022\r\n\005hpmax\030\027 \001(\005\022\024\n\014basestrength\030\030 \001"
    "(\005\022\025\n\rbaseintellect\030\031 \001(\005\022\025\n\rbasetechniq"
    "ue\030\032 \001(\005\022\023\n\013baseagility\030\033 \001(\005", 549);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageHeroGainNotify.proto", &protobuf_RegisterTypes);
  HeroGainNotify::default_instance_ = new HeroGainNotify();
  HeroGainNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageHeroGainNotify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageHeroGainNotify_2eproto {
  StaticDescriptorInitializer_MessageHeroGainNotify_2eproto() {
    protobuf_AddDesc_MessageHeroGainNotify_2eproto();
  }
} static_descriptor_initializer_MessageHeroGainNotify_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeroGainNotify::kHeroidFieldNumber;
const int HeroGainNotify::kTemplateidFieldNumber;
const int HeroGainNotify::kParentFieldNumber;
const int HeroGainNotify::kLevelFieldNumber;
const int HeroGainNotify::kQualityFieldNumber;
const int HeroGainNotify::kExpFieldNumber;
const int HeroGainNotify::kStrengthFieldNumber;
const int HeroGainNotify::kIntellectFieldNumber;
const int HeroGainNotify::kTechniqueFieldNumber;
const int HeroGainNotify::kAgilityFieldNumber;
const int HeroGainNotify::kHitFieldNumber;
const int HeroGainNotify::kJoukFieldNumber;
const int HeroGainNotify::kCritFieldNumber;
const int HeroGainNotify::kTenacityFieldNumber;
const int HeroGainNotify::kParryFieldNumber;
const int HeroGainNotify::kTreatFieldNumber;
const int HeroGainNotify::kPhysidamageFieldNumber;
const int HeroGainNotify::kPhysidefenseFieldNumber;
const int HeroGainNotify::kMagicdamageFieldNumber;
const int HeroGainNotify::kMagicdefenseFieldNumber;
const int HeroGainNotify::kStuntdamageFieldNumber;
const int HeroGainNotify::kStuntdefenseFieldNumber;
const int HeroGainNotify::kHpmaxFieldNumber;
const int HeroGainNotify::kBasestrengthFieldNumber;
const int HeroGainNotify::kBaseintellectFieldNumber;
const int HeroGainNotify::kBasetechniqueFieldNumber;
const int HeroGainNotify::kBaseagilityFieldNumber;
#endif  // !_MSC_VER

HeroGainNotify::HeroGainNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroGainNotify::InitAsDefaultInstance() {
}

HeroGainNotify::HeroGainNotify(const HeroGainNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroGainNotify::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = GOOGLE_LONGLONG(0);
  templateid_ = 0;
  parent_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  quality_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  strength_ = 0;
  intellect_ = 0;
  technique_ = 0;
  agility_ = 0;
  hit_ = 0;
  jouk_ = 0;
  crit_ = 0;
  tenacity_ = 0;
  parry_ = 0;
  treat_ = 0;
  physidamage_ = 0;
  physidefense_ = 0;
  magicdamage_ = 0;
  magicdefense_ = 0;
  stuntdamage_ = 0;
  stuntdefense_ = 0;
  hpmax_ = 0;
  basestrength_ = 0;
  baseintellect_ = 0;
  basetechnique_ = 0;
  baseagility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroGainNotify::~HeroGainNotify() {
  SharedDtor();
}

void HeroGainNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroGainNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroGainNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroGainNotify_descriptor_;
}

const HeroGainNotify& HeroGainNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageHeroGainNotify_2eproto();
  return *default_instance_;
}

HeroGainNotify* HeroGainNotify::default_instance_ = NULL;

HeroGainNotify* HeroGainNotify::New() const {
  return new HeroGainNotify;
}

void HeroGainNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = GOOGLE_LONGLONG(0);
    templateid_ = 0;
    parent_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    quality_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    strength_ = 0;
    intellect_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    technique_ = 0;
    agility_ = 0;
    hit_ = 0;
    jouk_ = 0;
    crit_ = 0;
    tenacity_ = 0;
    parry_ = 0;
    treat_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    physidamage_ = 0;
    physidefense_ = 0;
    magicdamage_ = 0;
    magicdefense_ = 0;
    stuntdamage_ = 0;
    stuntdefense_ = 0;
    hpmax_ = 0;
    basestrength_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    baseintellect_ = 0;
    basetechnique_ = 0;
    baseagility_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroGainNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent;
        break;
      }

      // optional int64 parent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int64 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_strength;
        break;
      }

      // optional int32 strength = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_intellect;
        break;
      }

      // optional int32 intellect = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intellect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intellect_)));
          set_has_intellect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_technique;
        break;
      }

      // optional int32 technique = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_technique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &technique_)));
          set_has_technique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_agility;
        break;
      }

      // optional int32 agility = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hit;
        break;
      }

      // optional int32 hit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_jouk;
        break;
      }

      // optional int32 jouk = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jouk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jouk_)));
          set_has_jouk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_crit;
        break;
      }

      // optional int32 crit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tenacity;
        break;
      }

      // optional int32 tenacity = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_parry;
        break;
      }

      // optional int32 parry = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_treat;
        break;
      }

      // optional int32 treat = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treat_)));
          set_has_treat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_physidamage;
        break;
      }

      // optional int32 physidamage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physidamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physidamage_)));
          set_has_physidamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_physidefense;
        break;
      }

      // optional int32 physidefense = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physidefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physidefense_)));
          set_has_physidefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_magicdamage;
        break;
      }

      // optional int32 magicdamage = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdamage_)));
          set_has_magicdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_magicdefense;
        break;
      }

      // optional int32 magicdefense = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefense_)));
          set_has_magicdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_stuntdamage;
        break;
      }

      // optional int32 stuntdamage = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stuntdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stuntdamage_)));
          set_has_stuntdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_stuntdefense;
        break;
      }

      // optional int32 stuntdefense = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stuntdefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stuntdefense_)));
          set_has_stuntdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_basestrength;
        break;
      }

      // optional int32 basestrength = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basestrength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basestrength_)));
          set_has_basestrength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_baseintellect;
        break;
      }

      // optional int32 baseintellect = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseintellect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseintellect_)));
          set_has_baseintellect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_basetechnique;
        break;
      }

      // optional int32 basetechnique = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basetechnique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basetechnique_)));
          set_has_basetechnique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_baseagility;
        break;
      }

      // optional int32 baseagility = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseagility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseagility_)));
          set_has_baseagility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroGainNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->heroid(), output);
  }

  // optional int32 templateid = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->templateid(), output);
  }

  // optional int64 parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->parent(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->exp(), output);
  }

  // optional int32 strength = 7;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strength(), output);
  }

  // optional int32 intellect = 8;
  if (has_intellect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->intellect(), output);
  }

  // optional int32 technique = 9;
  if (has_technique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->technique(), output);
  }

  // optional int32 agility = 10;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->agility(), output);
  }

  // optional int32 hit = 11;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hit(), output);
  }

  // optional int32 jouk = 12;
  if (has_jouk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->jouk(), output);
  }

  // optional int32 crit = 13;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->crit(), output);
  }

  // optional int32 tenacity = 14;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tenacity(), output);
  }

  // optional int32 parry = 15;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->parry(), output);
  }

  // optional int32 treat = 16;
  if (has_treat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->treat(), output);
  }

  // optional int32 physidamage = 17;
  if (has_physidamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->physidamage(), output);
  }

  // optional int32 physidefense = 18;
  if (has_physidefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->physidefense(), output);
  }

  // optional int32 magicdamage = 19;
  if (has_magicdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->magicdamage(), output);
  }

  // optional int32 magicdefense = 20;
  if (has_magicdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->magicdefense(), output);
  }

  // optional int32 stuntdamage = 21;
  if (has_stuntdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->stuntdamage(), output);
  }

  // optional int32 stuntdefense = 22;
  if (has_stuntdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->stuntdefense(), output);
  }

  // optional int32 hpmax = 23;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->hpmax(), output);
  }

  // optional int32 basestrength = 24;
  if (has_basestrength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->basestrength(), output);
  }

  // optional int32 baseintellect = 25;
  if (has_baseintellect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->baseintellect(), output);
  }

  // optional int32 basetechnique = 26;
  if (has_basetechnique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->basetechnique(), output);
  }

  // optional int32 baseagility = 27;
  if (has_baseagility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->baseagility(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroGainNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->heroid(), target);
  }

  // optional int32 templateid = 2;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->templateid(), target);
  }

  // optional int64 parent = 3;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->parent(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->exp(), target);
  }

  // optional int32 strength = 7;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strength(), target);
  }

  // optional int32 intellect = 8;
  if (has_intellect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->intellect(), target);
  }

  // optional int32 technique = 9;
  if (has_technique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->technique(), target);
  }

  // optional int32 agility = 10;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->agility(), target);
  }

  // optional int32 hit = 11;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hit(), target);
  }

  // optional int32 jouk = 12;
  if (has_jouk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->jouk(), target);
  }

  // optional int32 crit = 13;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->crit(), target);
  }

  // optional int32 tenacity = 14;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tenacity(), target);
  }

  // optional int32 parry = 15;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->parry(), target);
  }

  // optional int32 treat = 16;
  if (has_treat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->treat(), target);
  }

  // optional int32 physidamage = 17;
  if (has_physidamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->physidamage(), target);
  }

  // optional int32 physidefense = 18;
  if (has_physidefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->physidefense(), target);
  }

  // optional int32 magicdamage = 19;
  if (has_magicdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->magicdamage(), target);
  }

  // optional int32 magicdefense = 20;
  if (has_magicdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->magicdefense(), target);
  }

  // optional int32 stuntdamage = 21;
  if (has_stuntdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->stuntdamage(), target);
  }

  // optional int32 stuntdefense = 22;
  if (has_stuntdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->stuntdefense(), target);
  }

  // optional int32 hpmax = 23;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->hpmax(), target);
  }

  // optional int32 basestrength = 24;
  if (has_basestrength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->basestrength(), target);
  }

  // optional int32 baseintellect = 25;
  if (has_baseintellect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->baseintellect(), target);
  }

  // optional int32 basetechnique = 26;
  if (has_basetechnique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->basetechnique(), target);
  }

  // optional int32 baseagility = 27;
  if (has_baseagility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->baseagility(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroGainNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

    // optional int32 templateid = 2;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int64 parent = 3;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 strength = 7;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // optional int32 intellect = 8;
    if (has_intellect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intellect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 technique = 9;
    if (has_technique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->technique());
    }

    // optional int32 agility = 10;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 hit = 11;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

    // optional int32 jouk = 12;
    if (has_jouk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jouk());
    }

    // optional int32 crit = 13;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 tenacity = 14;
    if (has_tenacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacity());
    }

    // optional int32 parry = 15;
    if (has_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parry());
    }

    // optional int32 treat = 16;
    if (has_treat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treat());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 physidamage = 17;
    if (has_physidamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physidamage());
    }

    // optional int32 physidefense = 18;
    if (has_physidefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physidefense());
    }

    // optional int32 magicdamage = 19;
    if (has_magicdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdamage());
    }

    // optional int32 magicdefense = 20;
    if (has_magicdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefense());
    }

    // optional int32 stuntdamage = 21;
    if (has_stuntdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stuntdamage());
    }

    // optional int32 stuntdefense = 22;
    if (has_stuntdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stuntdefense());
    }

    // optional int32 hpmax = 23;
    if (has_hpmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 basestrength = 24;
    if (has_basestrength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basestrength());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 baseintellect = 25;
    if (has_baseintellect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseintellect());
    }

    // optional int32 basetechnique = 26;
    if (has_basetechnique()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basetechnique());
    }

    // optional int32 baseagility = 27;
    if (has_baseagility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseagility());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroGainNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroGainNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroGainNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroGainNotify::MergeFrom(const HeroGainNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_intellect()) {
      set_intellect(from.intellect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_technique()) {
      set_technique(from.technique());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_jouk()) {
      set_jouk(from.jouk());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_treat()) {
      set_treat(from.treat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_physidamage()) {
      set_physidamage(from.physidamage());
    }
    if (from.has_physidefense()) {
      set_physidefense(from.physidefense());
    }
    if (from.has_magicdamage()) {
      set_magicdamage(from.magicdamage());
    }
    if (from.has_magicdefense()) {
      set_magicdefense(from.magicdefense());
    }
    if (from.has_stuntdamage()) {
      set_stuntdamage(from.stuntdamage());
    }
    if (from.has_stuntdefense()) {
      set_stuntdefense(from.stuntdefense());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_basestrength()) {
      set_basestrength(from.basestrength());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_baseintellect()) {
      set_baseintellect(from.baseintellect());
    }
    if (from.has_basetechnique()) {
      set_basetechnique(from.basetechnique());
    }
    if (from.has_baseagility()) {
      set_baseagility(from.baseagility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroGainNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroGainNotify::CopyFrom(const HeroGainNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroGainNotify::IsInitialized() const {

  return true;
}

void HeroGainNotify::Swap(HeroGainNotify* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(templateid_, other->templateid_);
    std::swap(parent_, other->parent_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(exp_, other->exp_);
    std::swap(strength_, other->strength_);
    std::swap(intellect_, other->intellect_);
    std::swap(technique_, other->technique_);
    std::swap(agility_, other->agility_);
    std::swap(hit_, other->hit_);
    std::swap(jouk_, other->jouk_);
    std::swap(crit_, other->crit_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(parry_, other->parry_);
    std::swap(treat_, other->treat_);
    std::swap(physidamage_, other->physidamage_);
    std::swap(physidefense_, other->physidefense_);
    std::swap(magicdamage_, other->magicdamage_);
    std::swap(magicdefense_, other->magicdefense_);
    std::swap(stuntdamage_, other->stuntdamage_);
    std::swap(stuntdefense_, other->stuntdefense_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(basestrength_, other->basestrength_);
    std::swap(baseintellect_, other->baseintellect_);
    std::swap(basetechnique_, other->basetechnique_);
    std::swap(baseagility_, other->baseagility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroGainNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroGainNotify_descriptor_;
  metadata.reflection = HeroGainNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
