// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePlayer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessagePlayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* PlayerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAttrib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAttrib_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoadOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoadOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAttribI64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAttribI64_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAttribInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAttribInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObservePlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObservePlayerRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessagePlayer_2eproto() {
  protobuf_AddDesc_MessagePlayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessagePlayer.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerLogin_descriptor_ = file->message_type(0);
  static const int PlayerLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogin, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogin, templateid_),
  };
  PlayerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLogin_descriptor_,
      PlayerLogin::default_instance_,
      PlayerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLogin));
  PlayerLogout_descriptor_ = file->message_type(1);
  static const int PlayerLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogout, pid_),
  };
  PlayerLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLogout_descriptor_,
      PlayerLogout::default_instance_,
      PlayerLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLogout));
  CreatePlayer_descriptor_ = file->message_type(2);
  static const int CreatePlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, roletemplate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, stunt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, quality_),
  };
  CreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayer_descriptor_,
      CreatePlayer::default_instance_,
      CreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayer));
  DeletePlayer_descriptor_ = file->message_type(3);
  static const int DeletePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayer, pid_),
  };
  DeletePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePlayer_descriptor_,
      DeletePlayer::default_instance_,
      DeletePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePlayer));
  CheckNameRequest_descriptor_ = file->message_type(4);
  static const int CheckNameRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRequest, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRequest, name_),
  };
  CheckNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameRequest_descriptor_,
      CheckNameRequest::default_instance_,
      CheckNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameRequest));
  CheckNameResponse_descriptor_ = file->message_type(5);
  static const int CheckNameResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameResponse, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameResponse, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameResponse, result_),
  };
  CheckNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameResponse_descriptor_,
      CheckNameResponse::default_instance_,
      CheckNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameResponse));
  PlayerCount_descriptor_ = file->message_type(6);
  static const int PlayerCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, player_),
  };
  PlayerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCount_descriptor_,
      PlayerCount::default_instance_,
      PlayerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCount));
  PlayerAttrib_descriptor_ = file->message_type(7);
  static const int PlayerAttrib_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, intellect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, technique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, jouk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, treat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, physidamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, physidefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, magicdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, magicdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, stuntdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, stuntdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, staminamax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, basestrength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, baseintellect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, basetechnique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, baseagility_),
  };
  PlayerAttrib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAttrib_descriptor_,
      PlayerAttrib::default_instance_,
      PlayerAttrib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttrib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAttrib));
  PlayerLoadOver_descriptor_ = file->message_type(8);
  static const int PlayerLoadOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoadOver, pid_),
  };
  PlayerLoadOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoadOver_descriptor_,
      PlayerLoadOver::default_instance_,
      PlayerLoadOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoadOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoadOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoadOver));
  PlayerAttribI64_descriptor_ = file->message_type(9);
  static const int PlayerAttribI64_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribI64, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribI64, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribI64, value_),
  };
  PlayerAttribI64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAttribI64_descriptor_,
      PlayerAttribI64::default_instance_,
      PlayerAttribI64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribI64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribI64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAttribI64));
  PlayerAttribInt_descriptor_ = file->message_type(10);
  static const int PlayerAttribInt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribInt, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribInt, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribInt, value_),
  };
  PlayerAttribInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAttribInt_descriptor_,
      PlayerAttribInt::default_instance_,
      PlayerAttribInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAttribInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAttribInt));
  ObservePlayerRequest_descriptor_ = file->message_type(11);
  static const int ObservePlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservePlayerRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservePlayerRequest, playername_),
  };
  ObservePlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObservePlayerRequest_descriptor_,
      ObservePlayerRequest::default_instance_,
      ObservePlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservePlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservePlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObservePlayerRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessagePlayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLogin_descriptor_, &PlayerLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLogout_descriptor_, &PlayerLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayer_descriptor_, &CreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePlayer_descriptor_, &DeletePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameRequest_descriptor_, &CheckNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameResponse_descriptor_, &CheckNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCount_descriptor_, &PlayerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAttrib_descriptor_, &PlayerAttrib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoadOver_descriptor_, &PlayerLoadOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAttribI64_descriptor_, &PlayerAttribI64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAttribInt_descriptor_, &PlayerAttribInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObservePlayerRequest_descriptor_, &ObservePlayerRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessagePlayer_2eproto() {
  delete PlayerLogin::default_instance_;
  delete PlayerLogin_reflection_;
  delete PlayerLogout::default_instance_;
  delete PlayerLogout_reflection_;
  delete CreatePlayer::default_instance_;
  delete CreatePlayer_reflection_;
  delete DeletePlayer::default_instance_;
  delete DeletePlayer_reflection_;
  delete CheckNameRequest::default_instance_;
  delete CheckNameRequest_reflection_;
  delete CheckNameResponse::default_instance_;
  delete CheckNameResponse_reflection_;
  delete PlayerCount::default_instance_;
  delete PlayerCount_reflection_;
  delete PlayerAttrib::default_instance_;
  delete PlayerAttrib_reflection_;
  delete PlayerLoadOver::default_instance_;
  delete PlayerLoadOver_reflection_;
  delete PlayerAttribI64::default_instance_;
  delete PlayerAttribI64_reflection_;
  delete PlayerAttribInt::default_instance_;
  delete PlayerAttribInt_reflection_;
  delete ObservePlayerRequest::default_instance_;
  delete ObservePlayerRequest_reflection_;
}

void protobuf_AddDesc_MessagePlayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MessagePlayer.proto\022\007Message\";\n\013Player"
    "Login\022\013\n\003uid\030\001 \001(\003\022\013\n\003pid\030\002 \001(\003\022\022\n\ntempl"
    "ateid\030\003 \001(\005\"\033\n\014PlayerLogout\022\013\n\003pid\030\001 \001(\003"
    "\"|\n\014CreatePlayer\022\013\n\003uid\030\001 \001(\003\022\016\n\006server\030"
    "\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\024\n\014roletemplate\030\004 \001("
    "\005\022\013\n\003pid\030\005 \001(\003\022\r\n\005stunt\030\006 \001(\005\022\017\n\007quality"
    "\030\007 \001(\005\"\033\n\014DeletePlayer\022\013\n\003pid\030\001 \001(\003\":\n\020C"
    "heckNameRequest\022\013\n\003uid\030\001 \001(\003\022\013\n\003pid\030\002 \001("
    "\003\022\014\n\004name\030\003 \001(\t\"=\n\021CheckNameResponse\022\013\n\003"
    "uid\030\001 \001(\003\022\013\n\003pid\030\002 \001(\003\022\016\n\006result\030\003 \001(\010\"*"
    "\n\013PlayerCount\022\013\n\003uid\030\001 \001(\003\022\016\n\006player\030\002 \003"
    "(\003\"\305\004\n\014PlayerAttrib\022\013\n\003pid\030\001 \001(\003\022\014\n\004name"
    "\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\022\n\ntemplateid\030\004 \001("
    "\005\022\n\n\002hp\030\005 \001(\005\022\013\n\003exp\030\006 \001(\003\022\014\n\004gold\030\007 \001(\005"
    "\022\016\n\006silver\030\010 \001(\005\022\r\n\005merit\030\t \001(\005\022\020\n\010fight"
    "ing\030\n \001(\005\022\017\n\007stamina\030\013 \001(\005\022\020\n\010strength\030\014"
    " \001(\005\022\021\n\tintellect\030\r \001(\005\022\021\n\ttechnique\030\016 \001"
    "(\005\022\017\n\007agility\030\017 \001(\005\022\013\n\003hit\030\020 \001(\005\022\014\n\004jouk"
    "\030\021 \001(\005\022\014\n\004crit\030\022 \001(\005\022\020\n\010tenacity\030\023 \001(\005\022\r"
    "\n\005parry\030\024 \001(\005\022\r\n\005treat\030\025 \001(\005\022\023\n\013physidam"
    "age\030\026 \001(\005\022\024\n\014physidefense\030\027 \001(\005\022\023\n\013magic"
    "damage\030\030 \001(\005\022\024\n\014magicdefense\030\032 \001(\005\022\023\n\013st"
    "untdamage\030\033 \001(\005\022\024\n\014stuntdefense\030\034 \001(\005\022\022\n"
    "\nstaminamax\030\035 \001(\005\022\024\n\014basestrength\030\036 \001(\005\022"
    "\025\n\rbaseintellect\030\037 \001(\005\022\025\n\rbasetechnique\030"
    "  \001(\005\022\023\n\013baseagility\030! \001(\005\"\035\n\016PlayerLoad"
    "Over\022\013\n\003pid\030\001 \001(\003\";\n\017PlayerAttribI64\022\013\n\003"
    "pid\030\001 \001(\003\022\014\n\004attr\030\002 \001(\005\022\r\n\005value\030\003 \001(\003\";"
    "\n\017PlayerAttribInt\022\013\n\003pid\030\001 \001(\003\022\014\n\004attr\030\002"
    " \001(\005\022\r\n\005value\030\003 \001(\005\"<\n\024ObservePlayerRequ"
    "est\022\020\n\010playerid\030\001 \001(\003\022\022\n\nplayername\030\002 \001("
    "\t", 1241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessagePlayer.proto", &protobuf_RegisterTypes);
  PlayerLogin::default_instance_ = new PlayerLogin();
  PlayerLogout::default_instance_ = new PlayerLogout();
  CreatePlayer::default_instance_ = new CreatePlayer();
  DeletePlayer::default_instance_ = new DeletePlayer();
  CheckNameRequest::default_instance_ = new CheckNameRequest();
  CheckNameResponse::default_instance_ = new CheckNameResponse();
  PlayerCount::default_instance_ = new PlayerCount();
  PlayerAttrib::default_instance_ = new PlayerAttrib();
  PlayerLoadOver::default_instance_ = new PlayerLoadOver();
  PlayerAttribI64::default_instance_ = new PlayerAttribI64();
  PlayerAttribInt::default_instance_ = new PlayerAttribInt();
  ObservePlayerRequest::default_instance_ = new ObservePlayerRequest();
  PlayerLogin::default_instance_->InitAsDefaultInstance();
  PlayerLogout::default_instance_->InitAsDefaultInstance();
  CreatePlayer::default_instance_->InitAsDefaultInstance();
  DeletePlayer::default_instance_->InitAsDefaultInstance();
  CheckNameRequest::default_instance_->InitAsDefaultInstance();
  CheckNameResponse::default_instance_->InitAsDefaultInstance();
  PlayerCount::default_instance_->InitAsDefaultInstance();
  PlayerAttrib::default_instance_->InitAsDefaultInstance();
  PlayerLoadOver::default_instance_->InitAsDefaultInstance();
  PlayerAttribI64::default_instance_->InitAsDefaultInstance();
  PlayerAttribInt::default_instance_->InitAsDefaultInstance();
  ObservePlayerRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessagePlayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessagePlayer_2eproto {
  StaticDescriptorInitializer_MessagePlayer_2eproto() {
    protobuf_AddDesc_MessagePlayer_2eproto();
  }
} static_descriptor_initializer_MessagePlayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerLogin::kUidFieldNumber;
const int PlayerLogin::kPidFieldNumber;
const int PlayerLogin::kTemplateidFieldNumber;
#endif  // !_MSC_VER

PlayerLogin::PlayerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLogin::InitAsDefaultInstance() {
}

PlayerLogin::PlayerLogin(const PlayerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLogin::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  templateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLogin::~PlayerLogin() {
  SharedDtor();
}

void PlayerLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLogin_descriptor_;
}

const PlayerLogin& PlayerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

PlayerLogin* PlayerLogin::default_instance_ = NULL;

PlayerLogin* PlayerLogin::New() const {
  return new PlayerLogin;
}

void PlayerLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    pid_ = GOOGLE_LONGLONG(0);
    templateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // optional int32 templateid = 3;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->templateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  // optional int32 templateid = 3;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->templateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 templateid = 3;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLogin::MergeFrom(const PlayerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLogin::CopyFrom(const PlayerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLogin::IsInitialized() const {

  return true;
}

void PlayerLogin::Swap(PlayerLogin* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(pid_, other->pid_);
    std::swap(templateid_, other->templateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLogin_descriptor_;
  metadata.reflection = PlayerLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLogout::kPidFieldNumber;
#endif  // !_MSC_VER

PlayerLogout::PlayerLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLogout::InitAsDefaultInstance() {
}

PlayerLogout::PlayerLogout(const PlayerLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLogout::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLogout::~PlayerLogout() {
  SharedDtor();
}

void PlayerLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLogout_descriptor_;
}

const PlayerLogout& PlayerLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

PlayerLogout* PlayerLogout::default_instance_ = NULL;

PlayerLogout* PlayerLogout::New() const {
  return new PlayerLogout;
}

void PlayerLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLogout::MergeFrom(const PlayerLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLogout::CopyFrom(const PlayerLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLogout::IsInitialized() const {

  return true;
}

void PlayerLogout::Swap(PlayerLogout* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLogout_descriptor_;
  metadata.reflection = PlayerLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePlayer::kUidFieldNumber;
const int CreatePlayer::kServerFieldNumber;
const int CreatePlayer::kNameFieldNumber;
const int CreatePlayer::kRoletemplateFieldNumber;
const int CreatePlayer::kPidFieldNumber;
const int CreatePlayer::kStuntFieldNumber;
const int CreatePlayer::kQualityFieldNumber;
#endif  // !_MSC_VER

CreatePlayer::CreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayer::InitAsDefaultInstance() {
}

CreatePlayer::CreatePlayer(const CreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayer::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  server_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roletemplate_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  stunt_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayer::~CreatePlayer() {
  SharedDtor();
}

void CreatePlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayer_descriptor_;
}

const CreatePlayer& CreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

CreatePlayer* CreatePlayer::default_instance_ = NULL;

CreatePlayer* CreatePlayer::New() const {
  return new CreatePlayer;
}

void CreatePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    server_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    roletemplate_ = 0;
    pid_ = GOOGLE_LONGLONG(0);
    stunt_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server;
        break;
      }

      // optional int32 server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_)));
          set_has_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roletemplate;
        break;
      }

      // optional int32 roletemplate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roletemplate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roletemplate_)));
          set_has_roletemplate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional int64 pid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stunt;
        break;
      }

      // optional int32 stunt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stunt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stunt_)));
          set_has_stunt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int32 server = 2;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 roletemplate = 4;
  if (has_roletemplate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roletemplate(), output);
  }

  // optional int64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->pid(), output);
  }

  // optional int32 stunt = 6;
  if (has_stunt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stunt(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int32 server = 2;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 roletemplate = 4;
  if (has_roletemplate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roletemplate(), target);
  }

  // optional int64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->pid(), target);
  }

  // optional int32 stunt = 6;
  if (has_stunt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stunt(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 server = 2;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 roletemplate = 4;
    if (has_roletemplate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roletemplate());
    }

    // optional int64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 stunt = 6;
    if (has_stunt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stunt());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePlayer::MergeFrom(const CreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_roletemplate()) {
      set_roletemplate(from.roletemplate());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_stunt()) {
      set_stunt(from.stunt());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlayer::CopyFrom(const CreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayer::IsInitialized() const {

  return true;
}

void CreatePlayer::Swap(CreatePlayer* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(server_, other->server_);
    std::swap(name_, other->name_);
    std::swap(roletemplate_, other->roletemplate_);
    std::swap(pid_, other->pid_);
    std::swap(stunt_, other->stunt_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayer_descriptor_;
  metadata.reflection = CreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePlayer::kPidFieldNumber;
#endif  // !_MSC_VER

DeletePlayer::DeletePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeletePlayer::InitAsDefaultInstance() {
}

DeletePlayer::DeletePlayer(const DeletePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeletePlayer::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePlayer::~DeletePlayer() {
  SharedDtor();
}

void DeletePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePlayer_descriptor_;
}

const DeletePlayer& DeletePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

DeletePlayer* DeletePlayer::default_instance_ = NULL;

DeletePlayer* DeletePlayer::New() const {
  return new DeletePlayer;
}

void DeletePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeletePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeletePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeletePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePlayer::MergeFrom(const DeletePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePlayer::CopyFrom(const DeletePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePlayer::IsInitialized() const {

  return true;
}

void DeletePlayer::Swap(DeletePlayer* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePlayer_descriptor_;
  metadata.reflection = DeletePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameRequest::kUidFieldNumber;
const int CheckNameRequest::kPidFieldNumber;
const int CheckNameRequest::kNameFieldNumber;
#endif  // !_MSC_VER

CheckNameRequest::CheckNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNameRequest::InitAsDefaultInstance() {
}

CheckNameRequest::CheckNameRequest(const CheckNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNameRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameRequest::~CheckNameRequest() {
  SharedDtor();
}

void CheckNameRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CheckNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameRequest_descriptor_;
}

const CheckNameRequest& CheckNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

CheckNameRequest* CheckNameRequest::default_instance_ = NULL;

CheckNameRequest* CheckNameRequest::New() const {
  return new CheckNameRequest;
}

void CheckNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    pid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameRequest::MergeFrom(const CheckNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameRequest::CopyFrom(const CheckNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameRequest::IsInitialized() const {

  return true;
}

void CheckNameRequest::Swap(CheckNameRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameRequest_descriptor_;
  metadata.reflection = CheckNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameResponse::kUidFieldNumber;
const int CheckNameResponse::kPidFieldNumber;
const int CheckNameResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CheckNameResponse::CheckNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNameResponse::InitAsDefaultInstance() {
}

CheckNameResponse::CheckNameResponse(const CheckNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNameResponse::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameResponse::~CheckNameResponse() {
  SharedDtor();
}

void CheckNameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameResponse_descriptor_;
}

const CheckNameResponse& CheckNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

CheckNameResponse* CheckNameResponse::default_instance_ = NULL;

CheckNameResponse* CheckNameResponse::New() const {
  return new CheckNameResponse;
}

void CheckNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    pid_ = GOOGLE_LONGLONG(0);
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // optional bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  // optional bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameResponse::MergeFrom(const CheckNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameResponse::CopyFrom(const CheckNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameResponse::IsInitialized() const {

  return true;
}

void CheckNameResponse::Swap(CheckNameResponse* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(pid_, other->pid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameResponse_descriptor_;
  metadata.reflection = CheckNameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCount::kUidFieldNumber;
const int PlayerCount::kPlayerFieldNumber;
#endif  // !_MSC_VER

PlayerCount::PlayerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCount::InitAsDefaultInstance() {
}

PlayerCount::PlayerCount(const PlayerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCount::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCount::~PlayerCount() {
  SharedDtor();
}

void PlayerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCount_descriptor_;
}

const PlayerCount& PlayerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

PlayerCount* PlayerCount::default_instance_ = NULL;

PlayerCount* PlayerCount::New() const {
  return new PlayerCount;
}

void PlayerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player;
        break;
      }

      // repeated int64 player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_player())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_player())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // repeated int64 player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->player(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // repeated int64 player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->player(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  // repeated int64 player = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->player(i));
    }
    total_size += 1 * this->player_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCount::MergeFrom(const PlayerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCount::CopyFrom(const PlayerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCount::IsInitialized() const {

  return true;
}

void PlayerCount::Swap(PlayerCount* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    player_.Swap(&other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCount_descriptor_;
  metadata.reflection = PlayerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAttrib::kPidFieldNumber;
const int PlayerAttrib::kNameFieldNumber;
const int PlayerAttrib::kLevelFieldNumber;
const int PlayerAttrib::kTemplateidFieldNumber;
const int PlayerAttrib::kHpFieldNumber;
const int PlayerAttrib::kExpFieldNumber;
const int PlayerAttrib::kGoldFieldNumber;
const int PlayerAttrib::kSilverFieldNumber;
const int PlayerAttrib::kMeritFieldNumber;
const int PlayerAttrib::kFightingFieldNumber;
const int PlayerAttrib::kStaminaFieldNumber;
const int PlayerAttrib::kStrengthFieldNumber;
const int PlayerAttrib::kIntellectFieldNumber;
const int PlayerAttrib::kTechniqueFieldNumber;
const int PlayerAttrib::kAgilityFieldNumber;
const int PlayerAttrib::kHitFieldNumber;
const int PlayerAttrib::kJoukFieldNumber;
const int PlayerAttrib::kCritFieldNumber;
const int PlayerAttrib::kTenacityFieldNumber;
const int PlayerAttrib::kParryFieldNumber;
const int PlayerAttrib::kTreatFieldNumber;
const int PlayerAttrib::kPhysidamageFieldNumber;
const int PlayerAttrib::kPhysidefenseFieldNumber;
const int PlayerAttrib::kMagicdamageFieldNumber;
const int PlayerAttrib::kMagicdefenseFieldNumber;
const int PlayerAttrib::kStuntdamageFieldNumber;
const int PlayerAttrib::kStuntdefenseFieldNumber;
const int PlayerAttrib::kStaminamaxFieldNumber;
const int PlayerAttrib::kBasestrengthFieldNumber;
const int PlayerAttrib::kBaseintellectFieldNumber;
const int PlayerAttrib::kBasetechniqueFieldNumber;
const int PlayerAttrib::kBaseagilityFieldNumber;
#endif  // !_MSC_VER

PlayerAttrib::PlayerAttrib()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAttrib::InitAsDefaultInstance() {
}

PlayerAttrib::PlayerAttrib(const PlayerAttrib& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAttrib::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  templateid_ = 0;
  hp_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  gold_ = 0;
  silver_ = 0;
  merit_ = 0;
  fighting_ = 0;
  stamina_ = 0;
  strength_ = 0;
  intellect_ = 0;
  technique_ = 0;
  agility_ = 0;
  hit_ = 0;
  jouk_ = 0;
  crit_ = 0;
  tenacity_ = 0;
  parry_ = 0;
  treat_ = 0;
  physidamage_ = 0;
  physidefense_ = 0;
  magicdamage_ = 0;
  magicdefense_ = 0;
  stuntdamage_ = 0;
  stuntdefense_ = 0;
  staminamax_ = 0;
  basestrength_ = 0;
  baseintellect_ = 0;
  basetechnique_ = 0;
  baseagility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAttrib::~PlayerAttrib() {
  SharedDtor();
}

void PlayerAttrib::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerAttrib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAttrib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAttrib_descriptor_;
}

const PlayerAttrib& PlayerAttrib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

PlayerAttrib* PlayerAttrib::default_instance_ = NULL;

PlayerAttrib* PlayerAttrib::New() const {
  return new PlayerAttrib;
}

void PlayerAttrib::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    templateid_ = 0;
    hp_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    gold_ = 0;
    silver_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    merit_ = 0;
    fighting_ = 0;
    stamina_ = 0;
    strength_ = 0;
    intellect_ = 0;
    technique_ = 0;
    agility_ = 0;
    hit_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    jouk_ = 0;
    crit_ = 0;
    tenacity_ = 0;
    parry_ = 0;
    treat_ = 0;
    physidamage_ = 0;
    physidefense_ = 0;
    magicdamage_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    magicdefense_ = 0;
    stuntdamage_ = 0;
    stuntdefense_ = 0;
    staminamax_ = 0;
    basestrength_ = 0;
    baseintellect_ = 0;
    basetechnique_ = 0;
    baseagility_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAttrib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int64 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // optional int32 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_silver;
        break;
      }

      // optional int32 silver = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_merit;
        break;
      }

      // optional int32 merit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fighting;
        break;
      }

      // optional int32 fighting = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_strength;
        break;
      }

      // optional int32 strength = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_intellect;
        break;
      }

      // optional int32 intellect = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intellect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intellect_)));
          set_has_intellect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_technique;
        break;
      }

      // optional int32 technique = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_technique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &technique_)));
          set_has_technique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_agility;
        break;
      }

      // optional int32 agility = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hit;
        break;
      }

      // optional int32 hit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jouk;
        break;
      }

      // optional int32 jouk = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jouk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jouk_)));
          set_has_jouk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_crit;
        break;
      }

      // optional int32 crit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tenacity;
        break;
      }

      // optional int32 tenacity = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_parry;
        break;
      }

      // optional int32 parry = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_treat;
        break;
      }

      // optional int32 treat = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treat_)));
          set_has_treat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_physidamage;
        break;
      }

      // optional int32 physidamage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physidamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physidamage_)));
          set_has_physidamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_physidefense;
        break;
      }

      // optional int32 physidefense = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physidefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physidefense_)));
          set_has_physidefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_magicdamage;
        break;
      }

      // optional int32 magicdamage = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdamage_)));
          set_has_magicdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_magicdefense;
        break;
      }

      // optional int32 magicdefense = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefense_)));
          set_has_magicdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_stuntdamage;
        break;
      }

      // optional int32 stuntdamage = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stuntdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stuntdamage_)));
          set_has_stuntdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_stuntdefense;
        break;
      }

      // optional int32 stuntdefense = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stuntdefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stuntdefense_)));
          set_has_stuntdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_staminamax;
        break;
      }

      // optional int32 staminamax = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staminamax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &staminamax_)));
          set_has_staminamax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_basestrength;
        break;
      }

      // optional int32 basestrength = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basestrength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basestrength_)));
          set_has_basestrength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_baseintellect;
        break;
      }

      // optional int32 baseintellect = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseintellect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseintellect_)));
          set_has_baseintellect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_basetechnique;
        break;
      }

      // optional int32 basetechnique = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basetechnique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basetechnique_)));
          set_has_basetechnique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_baseagility;
        break;
      }

      // optional int32 baseagility = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseagility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseagility_)));
          set_has_baseagility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAttrib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 templateid = 4;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->templateid(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->exp(), output);
  }

  // optional int32 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gold(), output);
  }

  // optional int32 silver = 8;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->silver(), output);
  }

  // optional int32 merit = 9;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->merit(), output);
  }

  // optional int32 fighting = 10;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fighting(), output);
  }

  // optional int32 stamina = 11;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->stamina(), output);
  }

  // optional int32 strength = 12;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->strength(), output);
  }

  // optional int32 intellect = 13;
  if (has_intellect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->intellect(), output);
  }

  // optional int32 technique = 14;
  if (has_technique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->technique(), output);
  }

  // optional int32 agility = 15;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->agility(), output);
  }

  // optional int32 hit = 16;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hit(), output);
  }

  // optional int32 jouk = 17;
  if (has_jouk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->jouk(), output);
  }

  // optional int32 crit = 18;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->crit(), output);
  }

  // optional int32 tenacity = 19;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tenacity(), output);
  }

  // optional int32 parry = 20;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->parry(), output);
  }

  // optional int32 treat = 21;
  if (has_treat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->treat(), output);
  }

  // optional int32 physidamage = 22;
  if (has_physidamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->physidamage(), output);
  }

  // optional int32 physidefense = 23;
  if (has_physidefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->physidefense(), output);
  }

  // optional int32 magicdamage = 24;
  if (has_magicdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->magicdamage(), output);
  }

  // optional int32 magicdefense = 26;
  if (has_magicdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->magicdefense(), output);
  }

  // optional int32 stuntdamage = 27;
  if (has_stuntdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->stuntdamage(), output);
  }

  // optional int32 stuntdefense = 28;
  if (has_stuntdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->stuntdefense(), output);
  }

  // optional int32 staminamax = 29;
  if (has_staminamax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->staminamax(), output);
  }

  // optional int32 basestrength = 30;
  if (has_basestrength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->basestrength(), output);
  }

  // optional int32 baseintellect = 31;
  if (has_baseintellect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->baseintellect(), output);
  }

  // optional int32 basetechnique = 32;
  if (has_basetechnique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->basetechnique(), output);
  }

  // optional int32 baseagility = 33;
  if (has_baseagility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->baseagility(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAttrib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 templateid = 4;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->templateid(), target);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->exp(), target);
  }

  // optional int32 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gold(), target);
  }

  // optional int32 silver = 8;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->silver(), target);
  }

  // optional int32 merit = 9;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->merit(), target);
  }

  // optional int32 fighting = 10;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fighting(), target);
  }

  // optional int32 stamina = 11;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->stamina(), target);
  }

  // optional int32 strength = 12;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->strength(), target);
  }

  // optional int32 intellect = 13;
  if (has_intellect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->intellect(), target);
  }

  // optional int32 technique = 14;
  if (has_technique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->technique(), target);
  }

  // optional int32 agility = 15;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->agility(), target);
  }

  // optional int32 hit = 16;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hit(), target);
  }

  // optional int32 jouk = 17;
  if (has_jouk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->jouk(), target);
  }

  // optional int32 crit = 18;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->crit(), target);
  }

  // optional int32 tenacity = 19;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tenacity(), target);
  }

  // optional int32 parry = 20;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->parry(), target);
  }

  // optional int32 treat = 21;
  if (has_treat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->treat(), target);
  }

  // optional int32 physidamage = 22;
  if (has_physidamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->physidamage(), target);
  }

  // optional int32 physidefense = 23;
  if (has_physidefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->physidefense(), target);
  }

  // optional int32 magicdamage = 24;
  if (has_magicdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->magicdamage(), target);
  }

  // optional int32 magicdefense = 26;
  if (has_magicdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->magicdefense(), target);
  }

  // optional int32 stuntdamage = 27;
  if (has_stuntdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->stuntdamage(), target);
  }

  // optional int32 stuntdefense = 28;
  if (has_stuntdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->stuntdefense(), target);
  }

  // optional int32 staminamax = 29;
  if (has_staminamax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->staminamax(), target);
  }

  // optional int32 basestrength = 30;
  if (has_basestrength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->basestrength(), target);
  }

  // optional int32 baseintellect = 31;
  if (has_baseintellect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->baseintellect(), target);
  }

  // optional int32 basetechnique = 32;
  if (has_basetechnique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->basetechnique(), target);
  }

  // optional int32 baseagility = 33;
  if (has_baseagility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->baseagility(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAttrib::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 templateid = 4;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 silver = 8;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 merit = 9;
    if (has_merit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

    // optional int32 fighting = 10;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting());
    }

    // optional int32 stamina = 11;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // optional int32 strength = 12;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // optional int32 intellect = 13;
    if (has_intellect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intellect());
    }

    // optional int32 technique = 14;
    if (has_technique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->technique());
    }

    // optional int32 agility = 15;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 hit = 16;
    if (has_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 jouk = 17;
    if (has_jouk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jouk());
    }

    // optional int32 crit = 18;
    if (has_crit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 tenacity = 19;
    if (has_tenacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacity());
    }

    // optional int32 parry = 20;
    if (has_parry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parry());
    }

    // optional int32 treat = 21;
    if (has_treat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treat());
    }

    // optional int32 physidamage = 22;
    if (has_physidamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physidamage());
    }

    // optional int32 physidefense = 23;
    if (has_physidefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physidefense());
    }

    // optional int32 magicdamage = 24;
    if (has_magicdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdamage());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 magicdefense = 26;
    if (has_magicdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefense());
    }

    // optional int32 stuntdamage = 27;
    if (has_stuntdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stuntdamage());
    }

    // optional int32 stuntdefense = 28;
    if (has_stuntdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stuntdefense());
    }

    // optional int32 staminamax = 29;
    if (has_staminamax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->staminamax());
    }

    // optional int32 basestrength = 30;
    if (has_basestrength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basestrength());
    }

    // optional int32 baseintellect = 31;
    if (has_baseintellect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseintellect());
    }

    // optional int32 basetechnique = 32;
    if (has_basetechnique()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basetechnique());
    }

    // optional int32 baseagility = 33;
    if (has_baseagility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseagility());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAttrib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAttrib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAttrib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAttrib::MergeFrom(const PlayerAttrib& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_merit()) {
      set_merit(from.merit());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_intellect()) {
      set_intellect(from.intellect());
    }
    if (from.has_technique()) {
      set_technique(from.technique());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_jouk()) {
      set_jouk(from.jouk());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_treat()) {
      set_treat(from.treat());
    }
    if (from.has_physidamage()) {
      set_physidamage(from.physidamage());
    }
    if (from.has_physidefense()) {
      set_physidefense(from.physidefense());
    }
    if (from.has_magicdamage()) {
      set_magicdamage(from.magicdamage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_magicdefense()) {
      set_magicdefense(from.magicdefense());
    }
    if (from.has_stuntdamage()) {
      set_stuntdamage(from.stuntdamage());
    }
    if (from.has_stuntdefense()) {
      set_stuntdefense(from.stuntdefense());
    }
    if (from.has_staminamax()) {
      set_staminamax(from.staminamax());
    }
    if (from.has_basestrength()) {
      set_basestrength(from.basestrength());
    }
    if (from.has_baseintellect()) {
      set_baseintellect(from.baseintellect());
    }
    if (from.has_basetechnique()) {
      set_basetechnique(from.basetechnique());
    }
    if (from.has_baseagility()) {
      set_baseagility(from.baseagility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAttrib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAttrib::CopyFrom(const PlayerAttrib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAttrib::IsInitialized() const {

  return true;
}

void PlayerAttrib::Swap(PlayerAttrib* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(templateid_, other->templateid_);
    std::swap(hp_, other->hp_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(silver_, other->silver_);
    std::swap(merit_, other->merit_);
    std::swap(fighting_, other->fighting_);
    std::swap(stamina_, other->stamina_);
    std::swap(strength_, other->strength_);
    std::swap(intellect_, other->intellect_);
    std::swap(technique_, other->technique_);
    std::swap(agility_, other->agility_);
    std::swap(hit_, other->hit_);
    std::swap(jouk_, other->jouk_);
    std::swap(crit_, other->crit_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(parry_, other->parry_);
    std::swap(treat_, other->treat_);
    std::swap(physidamage_, other->physidamage_);
    std::swap(physidefense_, other->physidefense_);
    std::swap(magicdamage_, other->magicdamage_);
    std::swap(magicdefense_, other->magicdefense_);
    std::swap(stuntdamage_, other->stuntdamage_);
    std::swap(stuntdefense_, other->stuntdefense_);
    std::swap(staminamax_, other->staminamax_);
    std::swap(basestrength_, other->basestrength_);
    std::swap(baseintellect_, other->baseintellect_);
    std::swap(basetechnique_, other->basetechnique_);
    std::swap(baseagility_, other->baseagility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAttrib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAttrib_descriptor_;
  metadata.reflection = PlayerAttrib_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLoadOver::kPidFieldNumber;
#endif  // !_MSC_VER

PlayerLoadOver::PlayerLoadOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoadOver::InitAsDefaultInstance() {
}

PlayerLoadOver::PlayerLoadOver(const PlayerLoadOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoadOver::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoadOver::~PlayerLoadOver() {
  SharedDtor();
}

void PlayerLoadOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLoadOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoadOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoadOver_descriptor_;
}

const PlayerLoadOver& PlayerLoadOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

PlayerLoadOver* PlayerLoadOver::default_instance_ = NULL;

PlayerLoadOver* PlayerLoadOver::New() const {
  return new PlayerLoadOver;
}

void PlayerLoadOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoadOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLoadOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoadOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoadOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoadOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoadOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoadOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoadOver::MergeFrom(const PlayerLoadOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoadOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoadOver::CopyFrom(const PlayerLoadOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoadOver::IsInitialized() const {

  return true;
}

void PlayerLoadOver::Swap(PlayerLoadOver* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoadOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoadOver_descriptor_;
  metadata.reflection = PlayerLoadOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAttribI64::kPidFieldNumber;
const int PlayerAttribI64::kAttrFieldNumber;
const int PlayerAttribI64::kValueFieldNumber;
#endif  // !_MSC_VER

PlayerAttribI64::PlayerAttribI64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAttribI64::InitAsDefaultInstance() {
}

PlayerAttribI64::PlayerAttribI64(const PlayerAttribI64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAttribI64::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  attr_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAttribI64::~PlayerAttribI64() {
  SharedDtor();
}

void PlayerAttribI64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAttribI64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAttribI64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAttribI64_descriptor_;
}

const PlayerAttribI64& PlayerAttribI64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

PlayerAttribI64* PlayerAttribI64::default_instance_ = NULL;

PlayerAttribI64* PlayerAttribI64::New() const {
  return new PlayerAttribI64;
}

void PlayerAttribI64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    attr_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAttribI64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr;
        break;
      }

      // optional int32 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_)));
          set_has_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int64 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAttribI64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr(), output);
  }

  // optional int64 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAttribI64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attr(), target);
  }

  // optional int64 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAttribI64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr());
    }

    // optional int64 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAttribI64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAttribI64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAttribI64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAttribI64::MergeFrom(const PlayerAttribI64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAttribI64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAttribI64::CopyFrom(const PlayerAttribI64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAttribI64::IsInitialized() const {

  return true;
}

void PlayerAttribI64::Swap(PlayerAttribI64* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(attr_, other->attr_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAttribI64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAttribI64_descriptor_;
  metadata.reflection = PlayerAttribI64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAttribInt::kPidFieldNumber;
const int PlayerAttribInt::kAttrFieldNumber;
const int PlayerAttribInt::kValueFieldNumber;
#endif  // !_MSC_VER

PlayerAttribInt::PlayerAttribInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAttribInt::InitAsDefaultInstance() {
}

PlayerAttribInt::PlayerAttribInt(const PlayerAttribInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAttribInt::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  attr_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAttribInt::~PlayerAttribInt() {
  SharedDtor();
}

void PlayerAttribInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAttribInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAttribInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAttribInt_descriptor_;
}

const PlayerAttribInt& PlayerAttribInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

PlayerAttribInt* PlayerAttribInt::default_instance_ = NULL;

PlayerAttribInt* PlayerAttribInt::New() const {
  return new PlayerAttribInt;
}

void PlayerAttribInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    attr_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAttribInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr;
        break;
      }

      // optional int32 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_)));
          set_has_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAttribInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAttribInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attr(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAttribInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAttribInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAttribInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAttribInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAttribInt::MergeFrom(const PlayerAttribInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAttribInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAttribInt::CopyFrom(const PlayerAttribInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAttribInt::IsInitialized() const {

  return true;
}

void PlayerAttribInt::Swap(PlayerAttribInt* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(attr_, other->attr_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAttribInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAttribInt_descriptor_;
  metadata.reflection = PlayerAttribInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObservePlayerRequest::kPlayeridFieldNumber;
const int ObservePlayerRequest::kPlayernameFieldNumber;
#endif  // !_MSC_VER

ObservePlayerRequest::ObservePlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObservePlayerRequest::InitAsDefaultInstance() {
}

ObservePlayerRequest::ObservePlayerRequest(const ObservePlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObservePlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObservePlayerRequest::~ObservePlayerRequest() {
  SharedDtor();
}

void ObservePlayerRequest::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void ObservePlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObservePlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObservePlayerRequest_descriptor_;
}

const ObservePlayerRequest& ObservePlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayer_2eproto();
  return *default_instance_;
}

ObservePlayerRequest* ObservePlayerRequest::default_instance_ = NULL;

ObservePlayerRequest* ObservePlayerRequest::New() const {
  return new ObservePlayerRequest;
}

void ObservePlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObservePlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // optional string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObservePlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObservePlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObservePlayerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObservePlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObservePlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObservePlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObservePlayerRequest::MergeFrom(const ObservePlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObservePlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePlayerRequest::CopyFrom(const ObservePlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePlayerRequest::IsInitialized() const {

  return true;
}

void ObservePlayerRequest::Swap(ObservePlayerRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObservePlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObservePlayerRequest_descriptor_;
  metadata.reflection = ObservePlayerRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
