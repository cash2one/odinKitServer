// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTaskSyncToData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageTaskSyncToData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* DataTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTaskSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTaskSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTaskUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTaskUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTaskAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTaskAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTaskDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTaskDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataUnreceiveAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataUnreceiveAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataUnreceiveDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataUnreceiveDel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageTaskSyncToData_2eproto() {
  protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageTaskSyncToData.proto");
  GOOGLE_CHECK(file != NULL);
  DataTask_descriptor_ = file->message_type(0);
  static const int DataTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTask, args_),
  };
  DataTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTask_descriptor_,
      DataTask::default_instance_,
      DataTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTask));
  DataTaskSync_descriptor_ = file->message_type(1);
  static const int DataTaskSync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskSync, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskSync, unreceive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskSync, pid_),
  };
  DataTaskSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTaskSync_descriptor_,
      DataTaskSync::default_instance_,
      DataTaskSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTaskSync));
  DataTaskUpdate_descriptor_ = file->message_type(2);
  static const int DataTaskUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskUpdate, task_),
  };
  DataTaskUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTaskUpdate_descriptor_,
      DataTaskUpdate::default_instance_,
      DataTaskUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTaskUpdate));
  DataTaskAdd_descriptor_ = file->message_type(3);
  static const int DataTaskAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskAdd, task_),
  };
  DataTaskAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTaskAdd_descriptor_,
      DataTaskAdd::default_instance_,
      DataTaskAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTaskAdd));
  DataTaskDel_descriptor_ = file->message_type(4);
  static const int DataTaskDel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskDel, task_),
  };
  DataTaskDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTaskDel_descriptor_,
      DataTaskDel::default_instance_,
      DataTaskDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTaskDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTaskDel));
  DataUnreceiveAdd_descriptor_ = file->message_type(5);
  static const int DataUnreceiveAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUnreceiveAdd, unreceive_),
  };
  DataUnreceiveAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataUnreceiveAdd_descriptor_,
      DataUnreceiveAdd::default_instance_,
      DataUnreceiveAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUnreceiveAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUnreceiveAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataUnreceiveAdd));
  DataUnreceiveDel_descriptor_ = file->message_type(6);
  static const int DataUnreceiveDel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUnreceiveDel, unreceive_),
  };
  DataUnreceiveDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataUnreceiveDel_descriptor_,
      DataUnreceiveDel::default_instance_,
      DataUnreceiveDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUnreceiveDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataUnreceiveDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataUnreceiveDel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageTaskSyncToData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTask_descriptor_, &DataTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTaskSync_descriptor_, &DataTaskSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTaskUpdate_descriptor_, &DataTaskUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTaskAdd_descriptor_, &DataTaskAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTaskDel_descriptor_, &DataTaskDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataUnreceiveAdd_descriptor_, &DataUnreceiveAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataUnreceiveDel_descriptor_, &DataUnreceiveDel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageTaskSyncToData_2eproto() {
  delete DataTask::default_instance_;
  delete DataTask_reflection_;
  delete DataTaskSync::default_instance_;
  delete DataTaskSync_reflection_;
  delete DataTaskUpdate::default_instance_;
  delete DataTaskUpdate_reflection_;
  delete DataTaskAdd::default_instance_;
  delete DataTaskAdd_reflection_;
  delete DataTaskDel::default_instance_;
  delete DataTaskDel_reflection_;
  delete DataUnreceiveAdd::default_instance_;
  delete DataUnreceiveAdd_reflection_;
  delete DataUnreceiveDel::default_instance_;
  delete DataUnreceiveDel_reflection_;
}

void protobuf_AddDesc_MessageTaskSyncToData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033MessageTaskSyncToData.proto\022\007Message\"$"
    "\n\010DataTask\022\n\n\002id\030\001 \002(\005\022\014\n\004args\030\002 \003(\005\"O\n\014"
    "DataTaskSync\022\037\n\004task\030\001 \003(\0132\021.Message.Dat"
    "aTask\022\021\n\tunreceive\030\002 \003(\005\022\013\n\003pid\030\003 \002(\003\"1\n"
    "\016DataTaskUpdate\022\037\n\004task\030\001 \001(\0132\021.Message."
    "DataTask\".\n\013DataTaskAdd\022\037\n\004task\030\001 \001(\0132\021."
    "Message.DataTask\"\033\n\013DataTaskDel\022\014\n\004task\030"
    "\001 \001(\005\"%\n\020DataUnreceiveAdd\022\021\n\tunreceive\030\001"
    " \001(\005\"%\n\020DataUnreceiveDel\022\021\n\tunreceive\030\001 "
    "\001(\005", 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageTaskSyncToData.proto", &protobuf_RegisterTypes);
  DataTask::default_instance_ = new DataTask();
  DataTaskSync::default_instance_ = new DataTaskSync();
  DataTaskUpdate::default_instance_ = new DataTaskUpdate();
  DataTaskAdd::default_instance_ = new DataTaskAdd();
  DataTaskDel::default_instance_ = new DataTaskDel();
  DataUnreceiveAdd::default_instance_ = new DataUnreceiveAdd();
  DataUnreceiveDel::default_instance_ = new DataUnreceiveDel();
  DataTask::default_instance_->InitAsDefaultInstance();
  DataTaskSync::default_instance_->InitAsDefaultInstance();
  DataTaskUpdate::default_instance_->InitAsDefaultInstance();
  DataTaskAdd::default_instance_->InitAsDefaultInstance();
  DataTaskDel::default_instance_->InitAsDefaultInstance();
  DataUnreceiveAdd::default_instance_->InitAsDefaultInstance();
  DataUnreceiveDel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageTaskSyncToData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageTaskSyncToData_2eproto {
  StaticDescriptorInitializer_MessageTaskSyncToData_2eproto() {
    protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  }
} static_descriptor_initializer_MessageTaskSyncToData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DataTask::kIdFieldNumber;
const int DataTask::kArgsFieldNumber;
#endif  // !_MSC_VER

DataTask::DataTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataTask::InitAsDefaultInstance() {
}

DataTask::DataTask(const DataTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTask::~DataTask() {
  SharedDtor();
}

void DataTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTask_descriptor_;
}

const DataTask& DataTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  return *default_instance_;
}

DataTask* DataTask::default_instance_ = NULL;

DataTask* DataTask::New() const {
  return new DataTask;
}

void DataTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_args;
        break;
      }

      // repeated int32 args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_args())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 args = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTask::MergeFrom(const DataTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTask::CopyFrom(const DataTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DataTask::Swap(DataTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTask_descriptor_;
  metadata.reflection = DataTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataTaskSync::kTaskFieldNumber;
const int DataTaskSync::kUnreceiveFieldNumber;
const int DataTaskSync::kPidFieldNumber;
#endif  // !_MSC_VER

DataTaskSync::DataTaskSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataTaskSync::InitAsDefaultInstance() {
}

DataTaskSync::DataTaskSync(const DataTaskSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataTaskSync::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTaskSync::~DataTaskSync() {
  SharedDtor();
}

void DataTaskSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataTaskSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTaskSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTaskSync_descriptor_;
}

const DataTaskSync& DataTaskSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  return *default_instance_;
}

DataTaskSync* DataTaskSync::default_instance_ = NULL;

DataTaskSync* DataTaskSync::New() const {
  return new DataTaskSync;
}

void DataTaskSync::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
  }
  task_.Clear();
  unreceive_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTaskSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.DataTask task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectTag(16)) goto parse_unreceive;
        break;
      }

      // repeated int32 unreceive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unreceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_unreceive())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unreceive())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unreceive;
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required int64 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTaskSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.DataTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  // repeated int32 unreceive = 2;
  for (int i = 0; i < this->unreceive_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->unreceive(i), output);
  }

  // required int64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataTaskSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.DataTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  // repeated int32 unreceive = 2;
  for (int i = 0; i < this->unreceive_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->unreceive(i), target);
  }

  // required int64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataTaskSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  // repeated .Message.DataTask task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated int32 unreceive = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unreceive_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unreceive(i));
    }
    total_size += 1 * this->unreceive_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTaskSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTaskSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTaskSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTaskSync::MergeFrom(const DataTaskSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  unreceive_.MergeFrom(from.unreceive_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTaskSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTaskSync::CopyFrom(const DataTaskSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTaskSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  return true;
}

void DataTaskSync::Swap(DataTaskSync* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    unreceive_.Swap(&other->unreceive_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTaskSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTaskSync_descriptor_;
  metadata.reflection = DataTaskSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataTaskUpdate::kTaskFieldNumber;
#endif  // !_MSC_VER

DataTaskUpdate::DataTaskUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataTaskUpdate::InitAsDefaultInstance() {
  task_ = const_cast< ::Message::DataTask*>(&::Message::DataTask::default_instance());
}

DataTaskUpdate::DataTaskUpdate(const DataTaskUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataTaskUpdate::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTaskUpdate::~DataTaskUpdate() {
  SharedDtor();
}

void DataTaskUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void DataTaskUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTaskUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTaskUpdate_descriptor_;
}

const DataTaskUpdate& DataTaskUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  return *default_instance_;
}

DataTaskUpdate* DataTaskUpdate::default_instance_ = NULL;

DataTaskUpdate* DataTaskUpdate::New() const {
  return new DataTaskUpdate;
}

void DataTaskUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::Message::DataTask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTaskUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Message.DataTask task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTaskUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Message.DataTask task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataTaskUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Message.DataTask task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataTaskUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Message.DataTask task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTaskUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTaskUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTaskUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTaskUpdate::MergeFrom(const DataTaskUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::Message::DataTask::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTaskUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTaskUpdate::CopyFrom(const DataTaskUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTaskUpdate::IsInitialized() const {

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void DataTaskUpdate::Swap(DataTaskUpdate* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTaskUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTaskUpdate_descriptor_;
  metadata.reflection = DataTaskUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataTaskAdd::kTaskFieldNumber;
#endif  // !_MSC_VER

DataTaskAdd::DataTaskAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataTaskAdd::InitAsDefaultInstance() {
  task_ = const_cast< ::Message::DataTask*>(&::Message::DataTask::default_instance());
}

DataTaskAdd::DataTaskAdd(const DataTaskAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataTaskAdd::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTaskAdd::~DataTaskAdd() {
  SharedDtor();
}

void DataTaskAdd::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void DataTaskAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTaskAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTaskAdd_descriptor_;
}

const DataTaskAdd& DataTaskAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  return *default_instance_;
}

DataTaskAdd* DataTaskAdd::default_instance_ = NULL;

DataTaskAdd* DataTaskAdd::New() const {
  return new DataTaskAdd;
}

void DataTaskAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::Message::DataTask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTaskAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Message.DataTask task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTaskAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Message.DataTask task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataTaskAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Message.DataTask task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataTaskAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Message.DataTask task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTaskAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTaskAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTaskAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTaskAdd::MergeFrom(const DataTaskAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::Message::DataTask::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTaskAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTaskAdd::CopyFrom(const DataTaskAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTaskAdd::IsInitialized() const {

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void DataTaskAdd::Swap(DataTaskAdd* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTaskAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTaskAdd_descriptor_;
  metadata.reflection = DataTaskAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataTaskDel::kTaskFieldNumber;
#endif  // !_MSC_VER

DataTaskDel::DataTaskDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataTaskDel::InitAsDefaultInstance() {
}

DataTaskDel::DataTaskDel(const DataTaskDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataTaskDel::SharedCtor() {
  _cached_size_ = 0;
  task_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTaskDel::~DataTaskDel() {
  SharedDtor();
}

void DataTaskDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataTaskDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTaskDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTaskDel_descriptor_;
}

const DataTaskDel& DataTaskDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  return *default_instance_;
}

DataTaskDel* DataTaskDel::default_instance_ = NULL;

DataTaskDel* DataTaskDel::New() const {
  return new DataTaskDel;
}

void DataTaskDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTaskDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_)));
          set_has_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTaskDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataTaskDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataTaskDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTaskDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTaskDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTaskDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTaskDel::MergeFrom(const DataTaskDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      set_task(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTaskDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTaskDel::CopyFrom(const DataTaskDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTaskDel::IsInitialized() const {

  return true;
}

void DataTaskDel::Swap(DataTaskDel* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTaskDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTaskDel_descriptor_;
  metadata.reflection = DataTaskDel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataUnreceiveAdd::kUnreceiveFieldNumber;
#endif  // !_MSC_VER

DataUnreceiveAdd::DataUnreceiveAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataUnreceiveAdd::InitAsDefaultInstance() {
}

DataUnreceiveAdd::DataUnreceiveAdd(const DataUnreceiveAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataUnreceiveAdd::SharedCtor() {
  _cached_size_ = 0;
  unreceive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataUnreceiveAdd::~DataUnreceiveAdd() {
  SharedDtor();
}

void DataUnreceiveAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataUnreceiveAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataUnreceiveAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataUnreceiveAdd_descriptor_;
}

const DataUnreceiveAdd& DataUnreceiveAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  return *default_instance_;
}

DataUnreceiveAdd* DataUnreceiveAdd::default_instance_ = NULL;

DataUnreceiveAdd* DataUnreceiveAdd::New() const {
  return new DataUnreceiveAdd;
}

void DataUnreceiveAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unreceive_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataUnreceiveAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unreceive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unreceive_)));
          set_has_unreceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataUnreceiveAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 unreceive = 1;
  if (has_unreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unreceive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataUnreceiveAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 unreceive = 1;
  if (has_unreceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unreceive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataUnreceiveAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 unreceive = 1;
    if (has_unreceive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unreceive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataUnreceiveAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataUnreceiveAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataUnreceiveAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataUnreceiveAdd::MergeFrom(const DataUnreceiveAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unreceive()) {
      set_unreceive(from.unreceive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataUnreceiveAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataUnreceiveAdd::CopyFrom(const DataUnreceiveAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataUnreceiveAdd::IsInitialized() const {

  return true;
}

void DataUnreceiveAdd::Swap(DataUnreceiveAdd* other) {
  if (other != this) {
    std::swap(unreceive_, other->unreceive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataUnreceiveAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataUnreceiveAdd_descriptor_;
  metadata.reflection = DataUnreceiveAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataUnreceiveDel::kUnreceiveFieldNumber;
#endif  // !_MSC_VER

DataUnreceiveDel::DataUnreceiveDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataUnreceiveDel::InitAsDefaultInstance() {
}

DataUnreceiveDel::DataUnreceiveDel(const DataUnreceiveDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataUnreceiveDel::SharedCtor() {
  _cached_size_ = 0;
  unreceive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataUnreceiveDel::~DataUnreceiveDel() {
  SharedDtor();
}

void DataUnreceiveDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataUnreceiveDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataUnreceiveDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataUnreceiveDel_descriptor_;
}

const DataUnreceiveDel& DataUnreceiveDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskSyncToData_2eproto();
  return *default_instance_;
}

DataUnreceiveDel* DataUnreceiveDel::default_instance_ = NULL;

DataUnreceiveDel* DataUnreceiveDel::New() const {
  return new DataUnreceiveDel;
}

void DataUnreceiveDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unreceive_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataUnreceiveDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unreceive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unreceive_)));
          set_has_unreceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataUnreceiveDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 unreceive = 1;
  if (has_unreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unreceive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataUnreceiveDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 unreceive = 1;
  if (has_unreceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unreceive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataUnreceiveDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 unreceive = 1;
    if (has_unreceive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unreceive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataUnreceiveDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataUnreceiveDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataUnreceiveDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataUnreceiveDel::MergeFrom(const DataUnreceiveDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unreceive()) {
      set_unreceive(from.unreceive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataUnreceiveDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataUnreceiveDel::CopyFrom(const DataUnreceiveDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataUnreceiveDel::IsInitialized() const {

  return true;
}

void DataUnreceiveDel::Swap(DataUnreceiveDel* other) {
  if (other != this) {
    std::swap(unreceive_, other->unreceive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataUnreceiveDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataUnreceiveDel_descriptor_;
  metadata.reflection = DataUnreceiveDel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
