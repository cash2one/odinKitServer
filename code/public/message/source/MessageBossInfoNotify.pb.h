// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBossInfoNotify.proto

#ifndef PROTOBUF_MessageBossInfoNotify_2eproto__INCLUDED
#define PROTOBUF_MessageBossInfoNotify_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageBossInfoNotify_2eproto();
void protobuf_AssignDesc_MessageBossInfoNotify_2eproto();
void protobuf_ShutdownFile_MessageBossInfoNotify_2eproto();

class BossInfoNotify;
class BossInfoNotify_Ranking;

// ===================================================================

class BossInfoNotify_Ranking : public ::google::protobuf::Message {
 public:
  BossInfoNotify_Ranking();
  virtual ~BossInfoNotify_Ranking();

  BossInfoNotify_Ranking(const BossInfoNotify_Ranking& from);

  inline BossInfoNotify_Ranking& operator=(const BossInfoNotify_Ranking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossInfoNotify_Ranking& default_instance();

  void Swap(BossInfoNotify_Ranking* other);

  // implements Message ----------------------------------------------

  BossInfoNotify_Ranking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossInfoNotify_Ranking& from);
  void MergeFrom(const BossInfoNotify_Ranking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playername = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.BossInfoNotify.Ranking)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playername_;
  ::google::protobuf::int32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessageBossInfoNotify_2eproto();
  friend void protobuf_AssignDesc_MessageBossInfoNotify_2eproto();
  friend void protobuf_ShutdownFile_MessageBossInfoNotify_2eproto();

  void InitAsDefaultInstance();
  static BossInfoNotify_Ranking* default_instance_;
};
// -------------------------------------------------------------------

class BossInfoNotify : public ::google::protobuf::Message {
 public:
  BossInfoNotify();
  virtual ~BossInfoNotify();

  BossInfoNotify(const BossInfoNotify& from);

  inline BossInfoNotify& operator=(const BossInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossInfoNotify& default_instance();

  void Swap(BossInfoNotify* other);

  // implements Message ----------------------------------------------

  BossInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossInfoNotify& from);
  void MergeFrom(const BossInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BossInfoNotify_Ranking Ranking;

  // accessors -------------------------------------------------------

  // optional int32 hp = 1;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 1;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional string killer = 2;
  inline bool has_killer() const;
  inline void clear_killer();
  static const int kKillerFieldNumber = 2;
  inline const ::std::string& killer() const;
  inline void set_killer(const ::std::string& value);
  inline void set_killer(const char* value);
  inline void set_killer(const char* value, size_t size);
  inline ::std::string* mutable_killer();
  inline ::std::string* release_killer();
  inline void set_allocated_killer(::std::string* killer);

  // repeated .Message.BossInfoNotify.Ranking player = 3;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 3;
  inline const ::Message::BossInfoNotify_Ranking& player(int index) const;
  inline ::Message::BossInfoNotify_Ranking* mutable_player(int index);
  inline ::Message::BossInfoNotify_Ranking* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::BossInfoNotify_Ranking >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::BossInfoNotify_Ranking >*
      mutable_player();

  // optional int32 hpmax = 4;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 4;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 joinercnt = 5;
  inline bool has_joinercnt() const;
  inline void clear_joinercnt();
  static const int kJoinercntFieldNumber = 5;
  inline ::google::protobuf::int32 joinercnt() const;
  inline void set_joinercnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.BossInfoNotify)
 private:
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_killer();
  inline void clear_has_killer();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_joinercnt();
  inline void clear_has_joinercnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* killer_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::RepeatedPtrField< ::Message::BossInfoNotify_Ranking > player_;
  ::google::protobuf::int32 joinercnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MessageBossInfoNotify_2eproto();
  friend void protobuf_AssignDesc_MessageBossInfoNotify_2eproto();
  friend void protobuf_ShutdownFile_MessageBossInfoNotify_2eproto();

  void InitAsDefaultInstance();
  static BossInfoNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// BossInfoNotify_Ranking

// optional string playername = 1;
inline bool BossInfoNotify_Ranking::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossInfoNotify_Ranking::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossInfoNotify_Ranking::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossInfoNotify_Ranking::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& BossInfoNotify_Ranking::playername() const {
  return *playername_;
}
inline void BossInfoNotify_Ranking::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void BossInfoNotify_Ranking::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void BossInfoNotify_Ranking::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossInfoNotify_Ranking::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* BossInfoNotify_Ranking::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossInfoNotify_Ranking::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 damage = 2;
inline bool BossInfoNotify_Ranking::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossInfoNotify_Ranking::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossInfoNotify_Ranking::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossInfoNotify_Ranking::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BossInfoNotify_Ranking::damage() const {
  return damage_;
}
inline void BossInfoNotify_Ranking::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// BossInfoNotify

// optional int32 hp = 1;
inline bool BossInfoNotify::has_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossInfoNotify::set_has_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossInfoNotify::clear_has_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossInfoNotify::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BossInfoNotify::hp() const {
  return hp_;
}
inline void BossInfoNotify::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional string killer = 2;
inline bool BossInfoNotify::has_killer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossInfoNotify::set_has_killer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossInfoNotify::clear_has_killer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossInfoNotify::clear_killer() {
  if (killer_ != &::google::protobuf::internal::kEmptyString) {
    killer_->clear();
  }
  clear_has_killer();
}
inline const ::std::string& BossInfoNotify::killer() const {
  return *killer_;
}
inline void BossInfoNotify::set_killer(const ::std::string& value) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  killer_->assign(value);
}
inline void BossInfoNotify::set_killer(const char* value) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  killer_->assign(value);
}
inline void BossInfoNotify::set_killer(const char* value, size_t size) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  killer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossInfoNotify::mutable_killer() {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  return killer_;
}
inline ::std::string* BossInfoNotify::release_killer() {
  clear_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = killer_;
    killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossInfoNotify::set_allocated_killer(::std::string* killer) {
  if (killer_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_;
  }
  if (killer) {
    set_has_killer();
    killer_ = killer;
  } else {
    clear_has_killer();
    killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Message.BossInfoNotify.Ranking player = 3;
inline int BossInfoNotify::player_size() const {
  return player_.size();
}
inline void BossInfoNotify::clear_player() {
  player_.Clear();
}
inline const ::Message::BossInfoNotify_Ranking& BossInfoNotify::player(int index) const {
  return player_.Get(index);
}
inline ::Message::BossInfoNotify_Ranking* BossInfoNotify::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::Message::BossInfoNotify_Ranking* BossInfoNotify::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::BossInfoNotify_Ranking >&
BossInfoNotify::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::BossInfoNotify_Ranking >*
BossInfoNotify::mutable_player() {
  return &player_;
}

// optional int32 hpmax = 4;
inline bool BossInfoNotify::has_hpmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossInfoNotify::set_has_hpmax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossInfoNotify::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossInfoNotify::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 BossInfoNotify::hpmax() const {
  return hpmax_;
}
inline void BossInfoNotify::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// optional int32 joinercnt = 5;
inline bool BossInfoNotify::has_joinercnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossInfoNotify::set_has_joinercnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossInfoNotify::clear_has_joinercnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossInfoNotify::clear_joinercnt() {
  joinercnt_ = 0;
  clear_has_joinercnt();
}
inline ::google::protobuf::int32 BossInfoNotify::joinercnt() const {
  return joinercnt_;
}
inline void BossInfoNotify::set_joinercnt(::google::protobuf::int32 value) {
  set_has_joinercnt();
  joinercnt_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageBossInfoNotify_2eproto__INCLUDED
