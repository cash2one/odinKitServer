// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageZoneInfoSync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageZoneInfoSync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* ZoneInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneInfoSync_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageZoneInfoSync_2eproto() {
  protobuf_AddDesc_MessageZoneInfoSync_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageZoneInfoSync.proto");
  GOOGLE_CHECK(file != NULL);
  ZoneInfoSync_descriptor_ = file->message_type(0);
  static const int ZoneInfoSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoSync, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoSync, record_),
  };
  ZoneInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneInfoSync_descriptor_,
      ZoneInfoSync::default_instance_,
      ZoneInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneInfoSync));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageZoneInfoSync_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneInfoSync_descriptor_, &ZoneInfoSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageZoneInfoSync_2eproto() {
  delete ZoneInfoSync::default_instance_;
  delete ZoneInfoSync_reflection_;
}

void protobuf_AddDesc_MessageZoneInfoSync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031MessageZoneInfoSync.proto\022\007Message\".\n\014"
    "ZoneInfoSync\022\016\n\006zoneid\030\001 \003(\005\022\016\n\006record\030\002"
    " \003(\005", 84);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageZoneInfoSync.proto", &protobuf_RegisterTypes);
  ZoneInfoSync::default_instance_ = new ZoneInfoSync();
  ZoneInfoSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageZoneInfoSync_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageZoneInfoSync_2eproto {
  StaticDescriptorInitializer_MessageZoneInfoSync_2eproto() {
    protobuf_AddDesc_MessageZoneInfoSync_2eproto();
  }
} static_descriptor_initializer_MessageZoneInfoSync_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ZoneInfoSync::kZoneidFieldNumber;
const int ZoneInfoSync::kRecordFieldNumber;
#endif  // !_MSC_VER

ZoneInfoSync::ZoneInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneInfoSync::InitAsDefaultInstance() {
}

ZoneInfoSync::ZoneInfoSync(const ZoneInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneInfoSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneInfoSync::~ZoneInfoSync() {
  SharedDtor();
}

void ZoneInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneInfoSync_descriptor_;
}

const ZoneInfoSync& ZoneInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageZoneInfoSync_2eproto();
  return *default_instance_;
}

ZoneInfoSync* ZoneInfoSync::default_instance_ = NULL;

ZoneInfoSync* ZoneInfoSync::New() const {
  return new ZoneInfoSync;
}

void ZoneInfoSync::Clear() {
  zoneid_.Clear();
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_zoneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zoneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_zoneid;
        if (input->ExpectTag(16)) goto parse_record;
        break;
      }

      // repeated int32 record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 zoneid = 1;
  for (int i = 0; i < this->zoneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->zoneid(i), output);
  }

  // repeated int32 record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 zoneid = 1;
  for (int i = 0; i < this->zoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->zoneid(i), target);
  }

  // repeated int32 record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneInfoSync::ByteSize() const {
  int total_size = 0;

  // repeated int32 zoneid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->zoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zoneid(i));
    }
    total_size += 1 * this->zoneid_size() + data_size;
  }

  // repeated int32 record = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->record(i));
    }
    total_size += 1 * this->record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneInfoSync::MergeFrom(const ZoneInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  zoneid_.MergeFrom(from.zoneid_);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneInfoSync::CopyFrom(const ZoneInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneInfoSync::IsInitialized() const {

  return true;
}

void ZoneInfoSync::Swap(ZoneInfoSync* other) {
  if (other != this) {
    zoneid_.Swap(&other->zoneid_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneInfoSync_descriptor_;
  metadata.reflection = ZoneInfoSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
