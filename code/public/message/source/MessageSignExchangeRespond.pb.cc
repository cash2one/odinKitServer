// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageSignExchangeRespond.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageSignExchangeRespond.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* SignExchgRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignExchgRespond_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignExchgRespond_ItemExchg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignExchgRespond_ItemExchg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageSignExchangeRespond_2eproto() {
  protobuf_AddDesc_MessageSignExchangeRespond_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageSignExchangeRespond.proto");
  GOOGLE_CHECK(file != NULL);
  SignExchgRespond_descriptor_ = file->message_type(0);
  static const int SignExchgRespond_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond, freecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond, flushcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond, itemexchg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond, flushcost_),
  };
  SignExchgRespond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignExchgRespond_descriptor_,
      SignExchgRespond::default_instance_,
      SignExchgRespond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignExchgRespond));
  SignExchgRespond_ItemExchg_descriptor_ = SignExchgRespond_descriptor_->nested_type(0);
  static const int SignExchgRespond_ItemExchg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond_ItemExchg, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond_ItemExchg, badage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond_ItemExchg, knistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond_ItemExchg, bexchg_),
  };
  SignExchgRespond_ItemExchg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignExchgRespond_ItemExchg_descriptor_,
      SignExchgRespond_ItemExchg::default_instance_,
      SignExchgRespond_ItemExchg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond_ItemExchg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignExchgRespond_ItemExchg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignExchgRespond_ItemExchg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageSignExchangeRespond_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignExchgRespond_descriptor_, &SignExchgRespond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignExchgRespond_ItemExchg_descriptor_, &SignExchgRespond_ItemExchg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageSignExchangeRespond_2eproto() {
  delete SignExchgRespond::default_instance_;
  delete SignExchgRespond_reflection_;
  delete SignExchgRespond_ItemExchg::default_instance_;
  delete SignExchgRespond_ItemExchg_reflection_;
}

void protobuf_AddDesc_MessageSignExchangeRespond_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n MessageSignExchangeRespond.proto\022\007Mess"
    "age\"\323\001\n\020SignExchgRespond\022\021\n\tfreecount\030\001 "
    "\001(\005\022\022\n\nflushcount\030\002 \001(\005\0226\n\titemexchg\030\003 \003"
    "(\0132#.Message.SignExchgRespond.ItemExchg\022"
    "\021\n\tflushcost\030\004 \001(\005\032M\n\tItemExchg\022\016\n\006tempi"
    "d\030\001 \001(\005\022\016\n\006badage\030\002 \001(\005\022\020\n\010knistate\030\003 \001("
    "\005\022\016\n\006bexchg\030\004 \001(\010", 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageSignExchangeRespond.proto", &protobuf_RegisterTypes);
  SignExchgRespond::default_instance_ = new SignExchgRespond();
  SignExchgRespond_ItemExchg::default_instance_ = new SignExchgRespond_ItemExchg();
  SignExchgRespond::default_instance_->InitAsDefaultInstance();
  SignExchgRespond_ItemExchg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageSignExchangeRespond_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageSignExchangeRespond_2eproto {
  StaticDescriptorInitializer_MessageSignExchangeRespond_2eproto() {
    protobuf_AddDesc_MessageSignExchangeRespond_2eproto();
  }
} static_descriptor_initializer_MessageSignExchangeRespond_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SignExchgRespond_ItemExchg::kTempidFieldNumber;
const int SignExchgRespond_ItemExchg::kBadageFieldNumber;
const int SignExchgRespond_ItemExchg::kKnistateFieldNumber;
const int SignExchgRespond_ItemExchg::kBexchgFieldNumber;
#endif  // !_MSC_VER

SignExchgRespond_ItemExchg::SignExchgRespond_ItemExchg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignExchgRespond_ItemExchg::InitAsDefaultInstance() {
}

SignExchgRespond_ItemExchg::SignExchgRespond_ItemExchg(const SignExchgRespond_ItemExchg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignExchgRespond_ItemExchg::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0;
  badage_ = 0;
  knistate_ = 0;
  bexchg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignExchgRespond_ItemExchg::~SignExchgRespond_ItemExchg() {
  SharedDtor();
}

void SignExchgRespond_ItemExchg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignExchgRespond_ItemExchg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignExchgRespond_ItemExchg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignExchgRespond_ItemExchg_descriptor_;
}

const SignExchgRespond_ItemExchg& SignExchgRespond_ItemExchg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageSignExchangeRespond_2eproto();
  return *default_instance_;
}

SignExchgRespond_ItemExchg* SignExchgRespond_ItemExchg::default_instance_ = NULL;

SignExchgRespond_ItemExchg* SignExchgRespond_ItemExchg::New() const {
  return new SignExchgRespond_ItemExchg;
}

void SignExchgRespond_ItemExchg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0;
    badage_ = 0;
    knistate_ = 0;
    bexchg_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignExchgRespond_ItemExchg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_badage;
        break;
      }

      // optional int32 badage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badage_)));
          set_has_badage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_knistate;
        break;
      }

      // optional int32 knistate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knistate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knistate_)));
          set_has_knistate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bexchg;
        break;
      }

      // optional bool bexchg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bexchg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bexchg_)));
          set_has_bexchg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignExchgRespond_ItemExchg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tempid(), output);
  }

  // optional int32 badage = 2;
  if (has_badage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->badage(), output);
  }

  // optional int32 knistate = 3;
  if (has_knistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->knistate(), output);
  }

  // optional bool bexchg = 4;
  if (has_bexchg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bexchg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignExchgRespond_ItemExchg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tempid(), target);
  }

  // optional int32 badage = 2;
  if (has_badage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->badage(), target);
  }

  // optional int32 knistate = 3;
  if (has_knistate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->knistate(), target);
  }

  // optional bool bexchg = 4;
  if (has_bexchg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bexchg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignExchgRespond_ItemExchg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tempid());
    }

    // optional int32 badage = 2;
    if (has_badage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badage());
    }

    // optional int32 knistate = 3;
    if (has_knistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knistate());
    }

    // optional bool bexchg = 4;
    if (has_bexchg()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignExchgRespond_ItemExchg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignExchgRespond_ItemExchg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignExchgRespond_ItemExchg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignExchgRespond_ItemExchg::MergeFrom(const SignExchgRespond_ItemExchg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_badage()) {
      set_badage(from.badage());
    }
    if (from.has_knistate()) {
      set_knistate(from.knistate());
    }
    if (from.has_bexchg()) {
      set_bexchg(from.bexchg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignExchgRespond_ItemExchg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignExchgRespond_ItemExchg::CopyFrom(const SignExchgRespond_ItemExchg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignExchgRespond_ItemExchg::IsInitialized() const {

  return true;
}

void SignExchgRespond_ItemExchg::Swap(SignExchgRespond_ItemExchg* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(badage_, other->badage_);
    std::swap(knistate_, other->knistate_);
    std::swap(bexchg_, other->bexchg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignExchgRespond_ItemExchg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignExchgRespond_ItemExchg_descriptor_;
  metadata.reflection = SignExchgRespond_ItemExchg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SignExchgRespond::kFreecountFieldNumber;
const int SignExchgRespond::kFlushcountFieldNumber;
const int SignExchgRespond::kItemexchgFieldNumber;
const int SignExchgRespond::kFlushcostFieldNumber;
#endif  // !_MSC_VER

SignExchgRespond::SignExchgRespond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignExchgRespond::InitAsDefaultInstance() {
}

SignExchgRespond::SignExchgRespond(const SignExchgRespond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignExchgRespond::SharedCtor() {
  _cached_size_ = 0;
  freecount_ = 0;
  flushcount_ = 0;
  flushcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignExchgRespond::~SignExchgRespond() {
  SharedDtor();
}

void SignExchgRespond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignExchgRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignExchgRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignExchgRespond_descriptor_;
}

const SignExchgRespond& SignExchgRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageSignExchangeRespond_2eproto();
  return *default_instance_;
}

SignExchgRespond* SignExchgRespond::default_instance_ = NULL;

SignExchgRespond* SignExchgRespond::New() const {
  return new SignExchgRespond;
}

void SignExchgRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freecount_ = 0;
    flushcount_ = 0;
    flushcost_ = 0;
  }
  itemexchg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignExchgRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 freecount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freecount_)));
          set_has_freecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flushcount;
        break;
      }

      // optional int32 flushcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flushcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flushcount_)));
          set_has_flushcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemexchg;
        break;
      }

      // repeated .Message.SignExchgRespond.ItemExchg itemexchg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemexchg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemexchg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemexchg;
        if (input->ExpectTag(32)) goto parse_flushcost;
        break;
      }

      // optional int32 flushcost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flushcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flushcost_)));
          set_has_flushcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignExchgRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 freecount = 1;
  if (has_freecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->freecount(), output);
  }

  // optional int32 flushcount = 2;
  if (has_flushcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flushcount(), output);
  }

  // repeated .Message.SignExchgRespond.ItemExchg itemexchg = 3;
  for (int i = 0; i < this->itemexchg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemexchg(i), output);
  }

  // optional int32 flushcost = 4;
  if (has_flushcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flushcost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignExchgRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 freecount = 1;
  if (has_freecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->freecount(), target);
  }

  // optional int32 flushcount = 2;
  if (has_flushcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flushcount(), target);
  }

  // repeated .Message.SignExchgRespond.ItemExchg itemexchg = 3;
  for (int i = 0; i < this->itemexchg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemexchg(i), target);
  }

  // optional int32 flushcost = 4;
  if (has_flushcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flushcost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignExchgRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 freecount = 1;
    if (has_freecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freecount());
    }

    // optional int32 flushcount = 2;
    if (has_flushcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flushcount());
    }

    // optional int32 flushcost = 4;
    if (has_flushcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flushcost());
    }

  }
  // repeated .Message.SignExchgRespond.ItemExchg itemexchg = 3;
  total_size += 1 * this->itemexchg_size();
  for (int i = 0; i < this->itemexchg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemexchg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignExchgRespond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignExchgRespond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignExchgRespond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignExchgRespond::MergeFrom(const SignExchgRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemexchg_.MergeFrom(from.itemexchg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freecount()) {
      set_freecount(from.freecount());
    }
    if (from.has_flushcount()) {
      set_flushcount(from.flushcount());
    }
    if (from.has_flushcost()) {
      set_flushcost(from.flushcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignExchgRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignExchgRespond::CopyFrom(const SignExchgRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignExchgRespond::IsInitialized() const {

  return true;
}

void SignExchgRespond::Swap(SignExchgRespond* other) {
  if (other != this) {
    std::swap(freecount_, other->freecount_);
    std::swap(flushcount_, other->flushcount_);
    itemexchg_.Swap(&other->itemexchg_);
    std::swap(flushcost_, other->flushcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignExchgRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignExchgRespond_descriptor_;
  metadata.reflection = SignExchgRespond_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
