// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageNetTestResponse.proto

#ifndef PROTOBUF_MessageNetTestResponse_2eproto__INCLUDED
#define PROTOBUF_MessageNetTestResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageNetTestResponse_2eproto();
void protobuf_AssignDesc_MessageNetTestResponse_2eproto();
void protobuf_ShutdownFile_MessageNetTestResponse_2eproto();

class NetTestResponse;

// ===================================================================

class NetTestResponse : public ::google::protobuf::Message {
 public:
  NetTestResponse();
  virtual ~NetTestResponse();

  NetTestResponse(const NetTestResponse& from);

  inline NetTestResponse& operator=(const NetTestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetTestResponse& default_instance();

  void Swap(NetTestResponse* other);

  // implements Message ----------------------------------------------

  NetTestResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetTestResponse& from);
  void MergeFrom(const NetTestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 no = 1;
  inline bool has_no() const;
  inline void clear_no();
  static const int kNoFieldNumber = 1;
  inline ::google::protobuf::int32 no() const;
  inline void set_no(::google::protobuf::int32 value);

  // repeated int32 idata = 2;
  inline int idata_size() const;
  inline void clear_idata();
  static const int kIdataFieldNumber = 2;
  inline ::google::protobuf::int32 idata(int index) const;
  inline void set_idata(int index, ::google::protobuf::int32 value);
  inline void add_idata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      idata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_idata();

  // optional string sdata = 3;
  inline bool has_sdata() const;
  inline void clear_sdata();
  static const int kSdataFieldNumber = 3;
  inline const ::std::string& sdata() const;
  inline void set_sdata(const ::std::string& value);
  inline void set_sdata(const char* value);
  inline void set_sdata(const char* value, size_t size);
  inline ::std::string* mutable_sdata();
  inline ::std::string* release_sdata();
  inline void set_allocated_sdata(::std::string* sdata);

  // @@protoc_insertion_point(class_scope:Message.NetTestResponse)
 private:
  inline void set_has_no();
  inline void clear_has_no();
  inline void set_has_sdata();
  inline void clear_has_sdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > idata_;
  ::std::string* sdata_;
  ::google::protobuf::int32 no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessageNetTestResponse_2eproto();
  friend void protobuf_AssignDesc_MessageNetTestResponse_2eproto();
  friend void protobuf_ShutdownFile_MessageNetTestResponse_2eproto();

  void InitAsDefaultInstance();
  static NetTestResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// NetTestResponse

// required int32 no = 1;
inline bool NetTestResponse::has_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetTestResponse::set_has_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetTestResponse::clear_has_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetTestResponse::clear_no() {
  no_ = 0;
  clear_has_no();
}
inline ::google::protobuf::int32 NetTestResponse::no() const {
  return no_;
}
inline void NetTestResponse::set_no(::google::protobuf::int32 value) {
  set_has_no();
  no_ = value;
}

// repeated int32 idata = 2;
inline int NetTestResponse::idata_size() const {
  return idata_.size();
}
inline void NetTestResponse::clear_idata() {
  idata_.Clear();
}
inline ::google::protobuf::int32 NetTestResponse::idata(int index) const {
  return idata_.Get(index);
}
inline void NetTestResponse::set_idata(int index, ::google::protobuf::int32 value) {
  idata_.Set(index, value);
}
inline void NetTestResponse::add_idata(::google::protobuf::int32 value) {
  idata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetTestResponse::idata() const {
  return idata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetTestResponse::mutable_idata() {
  return &idata_;
}

// optional string sdata = 3;
inline bool NetTestResponse::has_sdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetTestResponse::set_has_sdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetTestResponse::clear_has_sdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetTestResponse::clear_sdata() {
  if (sdata_ != &::google::protobuf::internal::kEmptyString) {
    sdata_->clear();
  }
  clear_has_sdata();
}
inline const ::std::string& NetTestResponse::sdata() const {
  return *sdata_;
}
inline void NetTestResponse::set_sdata(const ::std::string& value) {
  set_has_sdata();
  if (sdata_ == &::google::protobuf::internal::kEmptyString) {
    sdata_ = new ::std::string;
  }
  sdata_->assign(value);
}
inline void NetTestResponse::set_sdata(const char* value) {
  set_has_sdata();
  if (sdata_ == &::google::protobuf::internal::kEmptyString) {
    sdata_ = new ::std::string;
  }
  sdata_->assign(value);
}
inline void NetTestResponse::set_sdata(const char* value, size_t size) {
  set_has_sdata();
  if (sdata_ == &::google::protobuf::internal::kEmptyString) {
    sdata_ = new ::std::string;
  }
  sdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetTestResponse::mutable_sdata() {
  set_has_sdata();
  if (sdata_ == &::google::protobuf::internal::kEmptyString) {
    sdata_ = new ::std::string;
  }
  return sdata_;
}
inline ::std::string* NetTestResponse::release_sdata() {
  clear_has_sdata();
  if (sdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sdata_;
    sdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetTestResponse::set_allocated_sdata(::std::string* sdata) {
  if (sdata_ != &::google::protobuf::internal::kEmptyString) {
    delete sdata_;
  }
  if (sdata) {
    set_has_sdata();
    sdata_ = sdata;
  } else {
    clear_has_sdata();
    sdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageNetTestResponse_2eproto__INCLUDED
