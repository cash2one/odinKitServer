// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageFriend.proto

#ifndef PROTOBUF_MessageFriend_2eproto__INCLUDED
#define PROTOBUF_MessageFriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageFriend_2eproto();
void protobuf_AssignDesc_MessageFriend_2eproto();
void protobuf_ShutdownFile_MessageFriend_2eproto();

class Friend;

// ===================================================================

class Friend : public ::google::protobuf::Message {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 templateid = 4;
  inline bool has_templateid() const;
  inline void clear_templateid();
  static const int kTemplateidFieldNumber = 4;
  inline ::google::protobuf::int32 templateid() const;
  inline void set_templateid(::google::protobuf::int32 value);

  // optional int32 fighter = 5;
  inline bool has_fighter() const;
  inline void clear_fighter();
  static const int kFighterFieldNumber = 5;
  inline ::google::protobuf::int32 fighter() const;
  inline void set_fighter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.Friend)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_templateid();
  inline void clear_has_templateid();
  inline void set_has_fighter();
  inline void clear_has_fighter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 templateid_;
  ::google::protobuf::int32 fighter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MessageFriend_2eproto();
  friend void protobuf_AssignDesc_MessageFriend_2eproto();
  friend void protobuf_ShutdownFile_MessageFriend_2eproto();

  void InitAsDefaultInstance();
  static Friend* default_instance_;
};
// ===================================================================


// ===================================================================

// Friend

// optional int64 pid = 1;
inline bool Friend::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 Friend::pid() const {
  return pid_;
}
inline void Friend::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional string name = 2;
inline bool Friend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend::name() const {
  return *name_;
}
inline void Friend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Friend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool Friend::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Friend::level() const {
  return level_;
}
inline void Friend::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 templateid = 4;
inline bool Friend::has_templateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend::set_has_templateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend::clear_templateid() {
  templateid_ = 0;
  clear_has_templateid();
}
inline ::google::protobuf::int32 Friend::templateid() const {
  return templateid_;
}
inline void Friend::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
}

// optional int32 fighter = 5;
inline bool Friend::has_fighter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Friend::set_has_fighter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Friend::clear_has_fighter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Friend::clear_fighter() {
  fighter_ = 0;
  clear_has_fighter();
}
inline ::google::protobuf::int32 Friend::fighter() const {
  return fighter_;
}
inline void Friend::set_fighter(::google::protobuf::int32 value) {
  set_has_fighter();
  fighter_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageFriend_2eproto__INCLUDED
