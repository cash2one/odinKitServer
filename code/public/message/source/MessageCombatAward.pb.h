// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCombatAward.proto

#ifndef PROTOBUF_MessageCombatAward_2eproto__INCLUDED
#define PROTOBUF_MessageCombatAward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageCombatAward_2eproto();
void protobuf_AssignDesc_MessageCombatAward_2eproto();
void protobuf_ShutdownFile_MessageCombatAward_2eproto();

class CombatAward;
class CombatAward_Item;

// ===================================================================

class CombatAward_Item : public ::google::protobuf::Message {
 public:
  CombatAward_Item();
  virtual ~CombatAward_Item();

  CombatAward_Item(const CombatAward_Item& from);

  inline CombatAward_Item& operator=(const CombatAward_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CombatAward_Item& default_instance();

  void Swap(CombatAward_Item* other);

  // implements Message ----------------------------------------------

  CombatAward_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CombatAward_Item& from);
  void MergeFrom(const CombatAward_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 stack = 2;
  inline bool has_stack() const;
  inline void clear_stack();
  static const int kStackFieldNumber = 2;
  inline ::google::protobuf::int32 stack() const;
  inline void set_stack(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.CombatAward.Item)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_stack();
  inline void clear_has_stack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 stack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessageCombatAward_2eproto();
  friend void protobuf_AssignDesc_MessageCombatAward_2eproto();
  friend void protobuf_ShutdownFile_MessageCombatAward_2eproto();

  void InitAsDefaultInstance();
  static CombatAward_Item* default_instance_;
};
// -------------------------------------------------------------------

class CombatAward : public ::google::protobuf::Message {
 public:
  CombatAward();
  virtual ~CombatAward();

  CombatAward(const CombatAward& from);

  inline CombatAward& operator=(const CombatAward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CombatAward& default_instance();

  void Swap(CombatAward* other);

  // implements Message ----------------------------------------------

  CombatAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CombatAward& from);
  void MergeFrom(const CombatAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CombatAward_Item Item;

  // accessors -------------------------------------------------------

  // optional int32 record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline ::google::protobuf::int32 record() const;
  inline void set_record(::google::protobuf::int32 value);

  // optional int32 attackrecord = 3;
  inline bool has_attackrecord() const;
  inline void clear_attackrecord();
  static const int kAttackrecordFieldNumber = 3;
  inline ::google::protobuf::int32 attackrecord() const;
  inline void set_attackrecord(::google::protobuf::int32 value);

  // optional int32 defendrecord = 4;
  inline bool has_defendrecord() const;
  inline void clear_defendrecord();
  static const int kDefendrecordFieldNumber = 4;
  inline ::google::protobuf::int32 defendrecord() const;
  inline void set_defendrecord(::google::protobuf::int32 value);

  // optional int32 combatrecord = 5;
  inline bool has_combatrecord() const;
  inline void clear_combatrecord();
  static const int kCombatrecordFieldNumber = 5;
  inline ::google::protobuf::int32 combatrecord() const;
  inline void set_combatrecord(::google::protobuf::int32 value);

  // repeated .Message.CombatAward.Item dropitem = 6;
  inline int dropitem_size() const;
  inline void clear_dropitem();
  static const int kDropitemFieldNumber = 6;
  inline const ::Message::CombatAward_Item& dropitem(int index) const;
  inline ::Message::CombatAward_Item* mutable_dropitem(int index);
  inline ::Message::CombatAward_Item* add_dropitem();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >&
      dropitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >*
      mutable_dropitem();

  // repeated .Message.CombatAward.Item prizeitem = 7;
  inline int prizeitem_size() const;
  inline void clear_prizeitem();
  static const int kPrizeitemFieldNumber = 7;
  inline const ::Message::CombatAward_Item& prizeitem(int index) const;
  inline ::Message::CombatAward_Item* mutable_prizeitem(int index);
  inline ::Message::CombatAward_Item* add_prizeitem();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >&
      prizeitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >*
      mutable_prizeitem();

  // optional int32 price2 = 8;
  inline bool has_price2() const;
  inline void clear_price2();
  static const int kPrice2FieldNumber = 8;
  inline ::google::protobuf::int32 price2() const;
  inline void set_price2(::google::protobuf::int32 value);

  // optional int32 price3 = 9;
  inline bool has_price3() const;
  inline void clear_price3();
  static const int kPrice3FieldNumber = 9;
  inline ::google::protobuf::int32 price3() const;
  inline void set_price3(::google::protobuf::int32 value);

  // optional int32 gainexp = 10;
  inline bool has_gainexp() const;
  inline void clear_gainexp();
  static const int kGainexpFieldNumber = 10;
  inline ::google::protobuf::int32 gainexp() const;
  inline void set_gainexp(::google::protobuf::int32 value);

  // optional int32 gainsilver = 11;
  inline bool has_gainsilver() const;
  inline void clear_gainsilver();
  static const int kGainsilverFieldNumber = 11;
  inline ::google::protobuf::int32 gainsilver() const;
  inline void set_gainsilver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.CombatAward)
 private:
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_attackrecord();
  inline void clear_has_attackrecord();
  inline void set_has_defendrecord();
  inline void clear_has_defendrecord();
  inline void set_has_combatrecord();
  inline void clear_has_combatrecord();
  inline void set_has_price2();
  inline void clear_has_price2();
  inline void set_has_price3();
  inline void clear_has_price3();
  inline void set_has_gainexp();
  inline void clear_has_gainexp();
  inline void set_has_gainsilver();
  inline void clear_has_gainsilver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 record_;
  ::google::protobuf::int32 attackrecord_;
  ::google::protobuf::int32 defendrecord_;
  ::google::protobuf::int32 combatrecord_;
  ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item > dropitem_;
  ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item > prizeitem_;
  ::google::protobuf::int32 price2_;
  ::google::protobuf::int32 price3_;
  ::google::protobuf::int32 gainexp_;
  ::google::protobuf::int32 gainsilver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_MessageCombatAward_2eproto();
  friend void protobuf_AssignDesc_MessageCombatAward_2eproto();
  friend void protobuf_ShutdownFile_MessageCombatAward_2eproto();

  void InitAsDefaultInstance();
  static CombatAward* default_instance_;
};
// ===================================================================


// ===================================================================

// CombatAward_Item

// optional int32 itemid = 1;
inline bool CombatAward_Item::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CombatAward_Item::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CombatAward_Item::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CombatAward_Item::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 CombatAward_Item::itemid() const {
  return itemid_;
}
inline void CombatAward_Item::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 stack = 2;
inline bool CombatAward_Item::has_stack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CombatAward_Item::set_has_stack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CombatAward_Item::clear_has_stack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CombatAward_Item::clear_stack() {
  stack_ = 0;
  clear_has_stack();
}
inline ::google::protobuf::int32 CombatAward_Item::stack() const {
  return stack_;
}
inline void CombatAward_Item::set_stack(::google::protobuf::int32 value) {
  set_has_stack();
  stack_ = value;
}

// -------------------------------------------------------------------

// CombatAward

// optional int32 record = 2;
inline bool CombatAward::has_record() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CombatAward::set_has_record() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CombatAward::clear_has_record() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CombatAward::clear_record() {
  record_ = 0;
  clear_has_record();
}
inline ::google::protobuf::int32 CombatAward::record() const {
  return record_;
}
inline void CombatAward::set_record(::google::protobuf::int32 value) {
  set_has_record();
  record_ = value;
}

// optional int32 attackrecord = 3;
inline bool CombatAward::has_attackrecord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CombatAward::set_has_attackrecord() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CombatAward::clear_has_attackrecord() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CombatAward::clear_attackrecord() {
  attackrecord_ = 0;
  clear_has_attackrecord();
}
inline ::google::protobuf::int32 CombatAward::attackrecord() const {
  return attackrecord_;
}
inline void CombatAward::set_attackrecord(::google::protobuf::int32 value) {
  set_has_attackrecord();
  attackrecord_ = value;
}

// optional int32 defendrecord = 4;
inline bool CombatAward::has_defendrecord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CombatAward::set_has_defendrecord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CombatAward::clear_has_defendrecord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CombatAward::clear_defendrecord() {
  defendrecord_ = 0;
  clear_has_defendrecord();
}
inline ::google::protobuf::int32 CombatAward::defendrecord() const {
  return defendrecord_;
}
inline void CombatAward::set_defendrecord(::google::protobuf::int32 value) {
  set_has_defendrecord();
  defendrecord_ = value;
}

// optional int32 combatrecord = 5;
inline bool CombatAward::has_combatrecord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CombatAward::set_has_combatrecord() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CombatAward::clear_has_combatrecord() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CombatAward::clear_combatrecord() {
  combatrecord_ = 0;
  clear_has_combatrecord();
}
inline ::google::protobuf::int32 CombatAward::combatrecord() const {
  return combatrecord_;
}
inline void CombatAward::set_combatrecord(::google::protobuf::int32 value) {
  set_has_combatrecord();
  combatrecord_ = value;
}

// repeated .Message.CombatAward.Item dropitem = 6;
inline int CombatAward::dropitem_size() const {
  return dropitem_.size();
}
inline void CombatAward::clear_dropitem() {
  dropitem_.Clear();
}
inline const ::Message::CombatAward_Item& CombatAward::dropitem(int index) const {
  return dropitem_.Get(index);
}
inline ::Message::CombatAward_Item* CombatAward::mutable_dropitem(int index) {
  return dropitem_.Mutable(index);
}
inline ::Message::CombatAward_Item* CombatAward::add_dropitem() {
  return dropitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >&
CombatAward::dropitem() const {
  return dropitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >*
CombatAward::mutable_dropitem() {
  return &dropitem_;
}

// repeated .Message.CombatAward.Item prizeitem = 7;
inline int CombatAward::prizeitem_size() const {
  return prizeitem_.size();
}
inline void CombatAward::clear_prizeitem() {
  prizeitem_.Clear();
}
inline const ::Message::CombatAward_Item& CombatAward::prizeitem(int index) const {
  return prizeitem_.Get(index);
}
inline ::Message::CombatAward_Item* CombatAward::mutable_prizeitem(int index) {
  return prizeitem_.Mutable(index);
}
inline ::Message::CombatAward_Item* CombatAward::add_prizeitem() {
  return prizeitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >&
CombatAward::prizeitem() const {
  return prizeitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::CombatAward_Item >*
CombatAward::mutable_prizeitem() {
  return &prizeitem_;
}

// optional int32 price2 = 8;
inline bool CombatAward::has_price2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CombatAward::set_has_price2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CombatAward::clear_has_price2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CombatAward::clear_price2() {
  price2_ = 0;
  clear_has_price2();
}
inline ::google::protobuf::int32 CombatAward::price2() const {
  return price2_;
}
inline void CombatAward::set_price2(::google::protobuf::int32 value) {
  set_has_price2();
  price2_ = value;
}

// optional int32 price3 = 9;
inline bool CombatAward::has_price3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CombatAward::set_has_price3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CombatAward::clear_has_price3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CombatAward::clear_price3() {
  price3_ = 0;
  clear_has_price3();
}
inline ::google::protobuf::int32 CombatAward::price3() const {
  return price3_;
}
inline void CombatAward::set_price3(::google::protobuf::int32 value) {
  set_has_price3();
  price3_ = value;
}

// optional int32 gainexp = 10;
inline bool CombatAward::has_gainexp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CombatAward::set_has_gainexp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CombatAward::clear_has_gainexp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CombatAward::clear_gainexp() {
  gainexp_ = 0;
  clear_has_gainexp();
}
inline ::google::protobuf::int32 CombatAward::gainexp() const {
  return gainexp_;
}
inline void CombatAward::set_gainexp(::google::protobuf::int32 value) {
  set_has_gainexp();
  gainexp_ = value;
}

// optional int32 gainsilver = 11;
inline bool CombatAward::has_gainsilver() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CombatAward::set_has_gainsilver() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CombatAward::clear_has_gainsilver() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CombatAward::clear_gainsilver() {
  gainsilver_ = 0;
  clear_has_gainsilver();
}
inline ::google::protobuf::int32 CombatAward::gainsilver() const {
  return gainsilver_;
}
inline void CombatAward::set_gainsilver(::google::protobuf::int32 value) {
  set_has_gainsilver();
  gainsilver_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageCombatAward_2eproto__INCLUDED
