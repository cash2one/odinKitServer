// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCombatStart.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageCombatStart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* CombatStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatStart_Fighter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatStart_Fighter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageCombatStart_2eproto() {
  protobuf_AddDesc_MessageCombatStart_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageCombatStart.proto");
  GOOGLE_CHECK(file != NULL);
  CombatStart_descriptor_ = file->message_type(0);
  static const int CombatStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart, ermyformatlevel_),
  };
  CombatStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatStart_descriptor_,
      CombatStart::default_instance_,
      CombatStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatStart));
  CombatStart_Fighter_descriptor_ = CombatStart_descriptor_->nested_type(0);
  static const int CombatStart_Fighter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, stunt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, hotohori_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, quality_),
  };
  CombatStart_Fighter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatStart_Fighter_descriptor_,
      CombatStart_Fighter::default_instance_,
      CombatStart_Fighter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStart_Fighter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatStart_Fighter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageCombatStart_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatStart_descriptor_, &CombatStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatStart_Fighter_descriptor_, &CombatStart_Fighter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageCombatStart_2eproto() {
  delete CombatStart::default_instance_;
  delete CombatStart_reflection_;
  delete CombatStart_Fighter::default_instance_;
  delete CombatStart_Fighter_reflection_;
}

void protobuf_AddDesc_MessageCombatStart_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030MessageCombatStart.proto\022\007Message\"\362\001\n\013"
    "CombatStart\022-\n\007fighter\030\001 \003(\0132\034.Message.C"
    "ombatStart.Fighter\022\027\n\017ermyformatlevel\030\002 "
    "\001(\005\032\232\001\n\007Fighter\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001("
    "\005\022\014\n\004name\030\003 \001(\t\022\n\n\002hp\030\004 \001(\005\022\r\n\005level\030\005 \001"
    "(\005\022\013\n\003pos\030\006 \001(\005\022\r\n\005stunt\030\007 \001(\005\022\020\n\010hotoho"
    "ri\030\010 \001(\005\022\r\n\005hpmax\030\t \001(\005\022\017\n\007quality\030\n \001(\005", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageCombatStart.proto", &protobuf_RegisterTypes);
  CombatStart::default_instance_ = new CombatStart();
  CombatStart_Fighter::default_instance_ = new CombatStart_Fighter();
  CombatStart::default_instance_->InitAsDefaultInstance();
  CombatStart_Fighter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageCombatStart_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageCombatStart_2eproto {
  StaticDescriptorInitializer_MessageCombatStart_2eproto() {
    protobuf_AddDesc_MessageCombatStart_2eproto();
  }
} static_descriptor_initializer_MessageCombatStart_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CombatStart_Fighter::kTypeFieldNumber;
const int CombatStart_Fighter::kIdFieldNumber;
const int CombatStart_Fighter::kNameFieldNumber;
const int CombatStart_Fighter::kHpFieldNumber;
const int CombatStart_Fighter::kLevelFieldNumber;
const int CombatStart_Fighter::kPosFieldNumber;
const int CombatStart_Fighter::kStuntFieldNumber;
const int CombatStart_Fighter::kHotohoriFieldNumber;
const int CombatStart_Fighter::kHpmaxFieldNumber;
const int CombatStart_Fighter::kQualityFieldNumber;
#endif  // !_MSC_VER

CombatStart_Fighter::CombatStart_Fighter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatStart_Fighter::InitAsDefaultInstance() {
}

CombatStart_Fighter::CombatStart_Fighter(const CombatStart_Fighter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatStart_Fighter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hp_ = 0;
  level_ = 0;
  pos_ = 0;
  stunt_ = 0;
  hotohori_ = 0;
  hpmax_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatStart_Fighter::~CombatStart_Fighter() {
  SharedDtor();
}

void CombatStart_Fighter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CombatStart_Fighter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatStart_Fighter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatStart_Fighter_descriptor_;
}

const CombatStart_Fighter& CombatStart_Fighter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageCombatStart_2eproto();
  return *default_instance_;
}

CombatStart_Fighter* CombatStart_Fighter::default_instance_ = NULL;

CombatStart_Fighter* CombatStart_Fighter::New() const {
  return new CombatStart_Fighter;
}

void CombatStart_Fighter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hp_ = 0;
    level_ = 0;
    pos_ = 0;
    stunt_ = 0;
    hotohori_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hpmax_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatStart_Fighter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional int32 pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stunt;
        break;
      }

      // optional int32 stunt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stunt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stunt_)));
          set_has_stunt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hotohori;
        break;
      }

      // optional int32 hotohori = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hotohori:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotohori_)));
          set_has_hotohori();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }

      // optional int32 quality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatStart_Fighter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos(), output);
  }

  // optional int32 stunt = 7;
  if (has_stunt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stunt(), output);
  }

  // optional int32 hotohori = 8;
  if (has_hotohori()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hotohori(), output);
  }

  // optional int32 hpmax = 9;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hpmax(), output);
  }

  // optional int32 quality = 10;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatStart_Fighter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos(), target);
  }

  // optional int32 stunt = 7;
  if (has_stunt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stunt(), target);
  }

  // optional int32 hotohori = 8;
  if (has_hotohori()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hotohori(), target);
  }

  // optional int32 hpmax = 9;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hpmax(), target);
  }

  // optional int32 quality = 10;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatStart_Fighter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 stunt = 7;
    if (has_stunt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stunt());
    }

    // optional int32 hotohori = 8;
    if (has_hotohori()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotohori());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hpmax = 9;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 quality = 10;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatStart_Fighter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatStart_Fighter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatStart_Fighter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatStart_Fighter::MergeFrom(const CombatStart_Fighter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_stunt()) {
      set_stunt(from.stunt());
    }
    if (from.has_hotohori()) {
      set_hotohori(from.hotohori());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatStart_Fighter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatStart_Fighter::CopyFrom(const CombatStart_Fighter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatStart_Fighter::IsInitialized() const {

  return true;
}

void CombatStart_Fighter::Swap(CombatStart_Fighter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(hp_, other->hp_);
    std::swap(level_, other->level_);
    std::swap(pos_, other->pos_);
    std::swap(stunt_, other->stunt_);
    std::swap(hotohori_, other->hotohori_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatStart_Fighter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatStart_Fighter_descriptor_;
  metadata.reflection = CombatStart_Fighter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CombatStart::kFighterFieldNumber;
const int CombatStart::kErmyformatlevelFieldNumber;
#endif  // !_MSC_VER

CombatStart::CombatStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatStart::InitAsDefaultInstance() {
}

CombatStart::CombatStart(const CombatStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatStart::SharedCtor() {
  _cached_size_ = 0;
  ermyformatlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatStart::~CombatStart() {
  SharedDtor();
}

void CombatStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatStart_descriptor_;
}

const CombatStart& CombatStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageCombatStart_2eproto();
  return *default_instance_;
}

CombatStart* CombatStart::default_instance_ = NULL;

CombatStart* CombatStart::New() const {
  return new CombatStart;
}

void CombatStart::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ermyformatlevel_ = 0;
  }
  fighter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.CombatStart.Fighter fighter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fighter;
        if (input->ExpectTag(16)) goto parse_ermyformatlevel;
        break;
      }

      // optional int32 ermyformatlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ermyformatlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ermyformatlevel_)));
          set_has_ermyformatlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.CombatStart.Fighter fighter = 1;
  for (int i = 0; i < this->fighter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fighter(i), output);
  }

  // optional int32 ermyformatlevel = 2;
  if (has_ermyformatlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ermyformatlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.CombatStart.Fighter fighter = 1;
  for (int i = 0; i < this->fighter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fighter(i), target);
  }

  // optional int32 ermyformatlevel = 2;
  if (has_ermyformatlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ermyformatlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 ermyformatlevel = 2;
    if (has_ermyformatlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ermyformatlevel());
    }

  }
  // repeated .Message.CombatStart.Fighter fighter = 1;
  total_size += 1 * this->fighter_size();
  for (int i = 0; i < this->fighter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatStart::MergeFrom(const CombatStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  fighter_.MergeFrom(from.fighter_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ermyformatlevel()) {
      set_ermyformatlevel(from.ermyformatlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatStart::CopyFrom(const CombatStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatStart::IsInitialized() const {

  return true;
}

void CombatStart::Swap(CombatStart* other) {
  if (other != this) {
    fighter_.Swap(&other->fighter_);
    std::swap(ermyformatlevel_, other->ermyformatlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatStart_descriptor_;
  metadata.reflection = CombatStart_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
