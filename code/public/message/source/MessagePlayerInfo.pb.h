// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePlayerInfo.proto

#ifndef PROTOBUF_MessagePlayerInfo_2eproto__INCLUDED
#define PROTOBUF_MessagePlayerInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessagePlayerInfo_2eproto();
void protobuf_AssignDesc_MessagePlayerInfo_2eproto();
void protobuf_ShutdownFile_MessagePlayerInfo_2eproto();

class PlayerInfo;

// ===================================================================

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 template = 4;
  inline bool has_template_() const;
  inline void clear_template_();
  static const int kTemplateFieldNumber = 4;
  inline ::google::protobuf::int32 template_() const;
  inline void set_template_(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 goldcoin = 6;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldcoinFieldNumber = 6;
  inline ::google::protobuf::int32 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::int32 value);

  // optional int32 silvercoin = 7;
  inline bool has_silvercoin() const;
  inline void clear_silvercoin();
  static const int kSilvercoinFieldNumber = 7;
  inline ::google::protobuf::int32 silvercoin() const;
  inline void set_silvercoin(::google::protobuf::int32 value);

  // optional int32 credit = 8;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 8;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // optional int64 exp = 9;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 9;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int64 logintime = 10;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLogintimeFieldNumber = 10;
  inline ::google::protobuf::int64 logintime() const;
  inline void set_logintime(::google::protobuf::int64 value);

  // optional int64 logouttime = 11;
  inline bool has_logouttime() const;
  inline void clear_logouttime();
  static const int kLogouttimeFieldNumber = 11;
  inline ::google::protobuf::int64 logouttime() const;
  inline void set_logouttime(::google::protobuf::int64 value);

  // optional int32 stamina = 12;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 12;
  inline ::google::protobuf::int32 stamina() const;
  inline void set_stamina(::google::protobuf::int32 value);

  // optional int32 trainstrength = 13;
  inline bool has_trainstrength() const;
  inline void clear_trainstrength();
  static const int kTrainstrengthFieldNumber = 13;
  inline ::google::protobuf::int32 trainstrength() const;
  inline void set_trainstrength(::google::protobuf::int32 value);

  // optional int32 trainintellect = 14;
  inline bool has_trainintellect() const;
  inline void clear_trainintellect();
  static const int kTrainintellectFieldNumber = 14;
  inline ::google::protobuf::int32 trainintellect() const;
  inline void set_trainintellect(::google::protobuf::int32 value);

  // optional int32 traintechnique = 15;
  inline bool has_traintechnique() const;
  inline void clear_traintechnique();
  static const int kTraintechniqueFieldNumber = 15;
  inline ::google::protobuf::int32 traintechnique() const;
  inline void set_traintechnique(::google::protobuf::int32 value);

  // optional int32 trainagility = 16;
  inline bool has_trainagility() const;
  inline void clear_trainagility();
  static const int kTrainagilityFieldNumber = 16;
  inline ::google::protobuf::int32 trainagility() const;
  inline void set_trainagility(::google::protobuf::int32 value);

  // optional int32 stuntskill = 17;
  inline bool has_stuntskill() const;
  inline void clear_stuntskill();
  static const int kStuntskillFieldNumber = 17;
  inline ::google::protobuf::int32 stuntskill() const;
  inline void set_stuntskill(::google::protobuf::int32 value);

  // optional int32 knightstate = 18;
  inline bool has_knightstate() const;
  inline void clear_knightstate();
  static const int kKnightstateFieldNumber = 18;
  inline ::google::protobuf::int32 knightstate() const;
  inline void set_knightstate(::google::protobuf::int32 value);

  // optional int32 knightstateexp = 19;
  inline bool has_knightstateexp() const;
  inline void clear_knightstateexp();
  static const int kKnightstateexpFieldNumber = 19;
  inline ::google::protobuf::int32 knightstateexp() const;
  inline void set_knightstateexp(::google::protobuf::int32 value);

  // optional int32 merit = 20;
  inline bool has_merit() const;
  inline void clear_merit();
  static const int kMeritFieldNumber = 20;
  inline ::google::protobuf::int32 merit() const;
  inline void set_merit(::google::protobuf::int32 value);

  // optional int32 worshipcount = 21;
  inline bool has_worshipcount() const;
  inline void clear_worshipcount();
  static const int kWorshipcountFieldNumber = 21;
  inline ::google::protobuf::int32 worshipcount() const;
  inline void set_worshipcount(::google::protobuf::int32 value);

  // optional int32 freecount = 22;
  inline bool has_freecount() const;
  inline void clear_freecount();
  static const int kFreecountFieldNumber = 22;
  inline ::google::protobuf::int32 freecount() const;
  inline void set_freecount(::google::protobuf::int32 value);

  // optional int32 stategreen = 23;
  inline bool has_stategreen() const;
  inline void clear_stategreen();
  static const int kStategreenFieldNumber = 23;
  inline ::google::protobuf::int32 stategreen() const;
  inline void set_stategreen(::google::protobuf::int32 value);

  // optional int32 stateblue = 24;
  inline bool has_stateblue() const;
  inline void clear_stateblue();
  static const int kStateblueFieldNumber = 24;
  inline ::google::protobuf::int32 stateblue() const;
  inline void set_stateblue(::google::protobuf::int32 value);

  // optional int32 statepurple = 25;
  inline bool has_statepurple() const;
  inline void clear_statepurple();
  static const int kStatepurpleFieldNumber = 25;
  inline ::google::protobuf::int32 statepurple() const;
  inline void set_statepurple(::google::protobuf::int32 value);

  // optional int32 stateorange = 26;
  inline bool has_stateorange() const;
  inline void clear_stateorange();
  static const int kStateorangeFieldNumber = 26;
  inline ::google::protobuf::int32 stateorange() const;
  inline void set_stateorange(::google::protobuf::int32 value);

  // optional int32 bagmaxcapacity = 27;
  inline bool has_bagmaxcapacity() const;
  inline void clear_bagmaxcapacity();
  static const int kBagmaxcapacityFieldNumber = 27;
  inline ::google::protobuf::int32 bagmaxcapacity() const;
  inline void set_bagmaxcapacity(::google::protobuf::int32 value);

  // optional int32 quality = 28;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 28;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 qualitypro = 29;
  inline bool has_qualitypro() const;
  inline void clear_qualitypro();
  static const int kQualityproFieldNumber = 29;
  inline ::google::protobuf::int32 qualitypro() const;
  inline void set_qualitypro(::google::protobuf::int32 value);

  // repeated int64 debutinfo = 30;
  inline int debutinfo_size() const;
  inline void clear_debutinfo();
  static const int kDebutinfoFieldNumber = 30;
  inline ::google::protobuf::int64 debutinfo(int index) const;
  inline void set_debutinfo(int index, ::google::protobuf::int64 value);
  inline void add_debutinfo(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      debutinfo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_debutinfo();

  // @@protoc_insertion_point(class_scope:Message.PlayerInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_template_();
  inline void clear_has_template_();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();
  inline void set_has_silvercoin();
  inline void clear_has_silvercoin();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_logouttime();
  inline void clear_has_logouttime();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_trainstrength();
  inline void clear_has_trainstrength();
  inline void set_has_trainintellect();
  inline void clear_has_trainintellect();
  inline void set_has_traintechnique();
  inline void clear_has_traintechnique();
  inline void set_has_trainagility();
  inline void clear_has_trainagility();
  inline void set_has_stuntskill();
  inline void clear_has_stuntskill();
  inline void set_has_knightstate();
  inline void clear_has_knightstate();
  inline void set_has_knightstateexp();
  inline void clear_has_knightstateexp();
  inline void set_has_merit();
  inline void clear_has_merit();
  inline void set_has_worshipcount();
  inline void clear_has_worshipcount();
  inline void set_has_freecount();
  inline void clear_has_freecount();
  inline void set_has_stategreen();
  inline void clear_has_stategreen();
  inline void set_has_stateblue();
  inline void clear_has_stateblue();
  inline void set_has_statepurple();
  inline void clear_has_statepurple();
  inline void set_has_stateorange();
  inline void clear_has_stateorange();
  inline void set_has_bagmaxcapacity();
  inline void clear_has_bagmaxcapacity();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_qualitypro();
  inline void clear_has_qualitypro();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int64 userid_;
  ::std::string* name_;
  ::google::protobuf::int32 template__;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 goldcoin_;
  ::google::protobuf::int32 silvercoin_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int64 logintime_;
  ::google::protobuf::int64 logouttime_;
  ::google::protobuf::int32 trainstrength_;
  ::google::protobuf::int32 trainintellect_;
  ::google::protobuf::int32 traintechnique_;
  ::google::protobuf::int32 trainagility_;
  ::google::protobuf::int32 stuntskill_;
  ::google::protobuf::int32 knightstate_;
  ::google::protobuf::int32 knightstateexp_;
  ::google::protobuf::int32 merit_;
  ::google::protobuf::int32 worshipcount_;
  ::google::protobuf::int32 freecount_;
  ::google::protobuf::int32 stategreen_;
  ::google::protobuf::int32 stateblue_;
  ::google::protobuf::int32 statepurple_;
  ::google::protobuf::int32 stateorange_;
  ::google::protobuf::int32 bagmaxcapacity_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > debutinfo_;
  ::google::protobuf::int32 qualitypro_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MessagePlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerInfo

// optional int64 playerid = 1;
inline bool PlayerInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 PlayerInfo::playerid() const {
  return playerid_;
}
inline void PlayerInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int64 userid = 2;
inline bool PlayerInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 PlayerInfo::userid() const {
  return userid_;
}
inline void PlayerInfo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string name = 3;
inline bool PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerInfo::name() const {
  return *name_;
}
inline void PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 template = 4;
inline bool PlayerInfo::has_template_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_template_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_template_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_template_() {
  template__ = 0;
  clear_has_template_();
}
inline ::google::protobuf::int32 PlayerInfo::template_() const {
  return template__;
}
inline void PlayerInfo::set_template_(::google::protobuf::int32 value) {
  set_has_template_();
  template__ = value;
}

// optional int32 level = 5;
inline bool PlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerInfo::level() const {
  return level_;
}
inline void PlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 goldcoin = 6;
inline bool PlayerInfo::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfo::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfo::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfo::clear_goldcoin() {
  goldcoin_ = 0;
  clear_has_goldcoin();
}
inline ::google::protobuf::int32 PlayerInfo::goldcoin() const {
  return goldcoin_;
}
inline void PlayerInfo::set_goldcoin(::google::protobuf::int32 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// optional int32 silvercoin = 7;
inline bool PlayerInfo::has_silvercoin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInfo::set_has_silvercoin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInfo::clear_has_silvercoin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInfo::clear_silvercoin() {
  silvercoin_ = 0;
  clear_has_silvercoin();
}
inline ::google::protobuf::int32 PlayerInfo::silvercoin() const {
  return silvercoin_;
}
inline void PlayerInfo::set_silvercoin(::google::protobuf::int32 value) {
  set_has_silvercoin();
  silvercoin_ = value;
}

// optional int32 credit = 8;
inline bool PlayerInfo::has_credit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInfo::set_has_credit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInfo::clear_has_credit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInfo::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 PlayerInfo::credit() const {
  return credit_;
}
inline void PlayerInfo::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
}

// optional int64 exp = 9;
inline bool PlayerInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 PlayerInfo::exp() const {
  return exp_;
}
inline void PlayerInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 logintime = 10;
inline bool PlayerInfo::has_logintime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerInfo::set_has_logintime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerInfo::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerInfo::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::int64 PlayerInfo::logintime() const {
  return logintime_;
}
inline void PlayerInfo::set_logintime(::google::protobuf::int64 value) {
  set_has_logintime();
  logintime_ = value;
}

// optional int64 logouttime = 11;
inline bool PlayerInfo::has_logouttime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerInfo::set_has_logouttime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerInfo::clear_has_logouttime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerInfo::clear_logouttime() {
  logouttime_ = GOOGLE_LONGLONG(0);
  clear_has_logouttime();
}
inline ::google::protobuf::int64 PlayerInfo::logouttime() const {
  return logouttime_;
}
inline void PlayerInfo::set_logouttime(::google::protobuf::int64 value) {
  set_has_logouttime();
  logouttime_ = value;
}

// optional int32 stamina = 12;
inline bool PlayerInfo::has_stamina() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerInfo::set_has_stamina() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerInfo::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerInfo::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline ::google::protobuf::int32 PlayerInfo::stamina() const {
  return stamina_;
}
inline void PlayerInfo::set_stamina(::google::protobuf::int32 value) {
  set_has_stamina();
  stamina_ = value;
}

// optional int32 trainstrength = 13;
inline bool PlayerInfo::has_trainstrength() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerInfo::set_has_trainstrength() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerInfo::clear_has_trainstrength() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerInfo::clear_trainstrength() {
  trainstrength_ = 0;
  clear_has_trainstrength();
}
inline ::google::protobuf::int32 PlayerInfo::trainstrength() const {
  return trainstrength_;
}
inline void PlayerInfo::set_trainstrength(::google::protobuf::int32 value) {
  set_has_trainstrength();
  trainstrength_ = value;
}

// optional int32 trainintellect = 14;
inline bool PlayerInfo::has_trainintellect() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerInfo::set_has_trainintellect() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerInfo::clear_has_trainintellect() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerInfo::clear_trainintellect() {
  trainintellect_ = 0;
  clear_has_trainintellect();
}
inline ::google::protobuf::int32 PlayerInfo::trainintellect() const {
  return trainintellect_;
}
inline void PlayerInfo::set_trainintellect(::google::protobuf::int32 value) {
  set_has_trainintellect();
  trainintellect_ = value;
}

// optional int32 traintechnique = 15;
inline bool PlayerInfo::has_traintechnique() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerInfo::set_has_traintechnique() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerInfo::clear_has_traintechnique() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerInfo::clear_traintechnique() {
  traintechnique_ = 0;
  clear_has_traintechnique();
}
inline ::google::protobuf::int32 PlayerInfo::traintechnique() const {
  return traintechnique_;
}
inline void PlayerInfo::set_traintechnique(::google::protobuf::int32 value) {
  set_has_traintechnique();
  traintechnique_ = value;
}

// optional int32 trainagility = 16;
inline bool PlayerInfo::has_trainagility() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerInfo::set_has_trainagility() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerInfo::clear_has_trainagility() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerInfo::clear_trainagility() {
  trainagility_ = 0;
  clear_has_trainagility();
}
inline ::google::protobuf::int32 PlayerInfo::trainagility() const {
  return trainagility_;
}
inline void PlayerInfo::set_trainagility(::google::protobuf::int32 value) {
  set_has_trainagility();
  trainagility_ = value;
}

// optional int32 stuntskill = 17;
inline bool PlayerInfo::has_stuntskill() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerInfo::set_has_stuntskill() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerInfo::clear_has_stuntskill() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerInfo::clear_stuntskill() {
  stuntskill_ = 0;
  clear_has_stuntskill();
}
inline ::google::protobuf::int32 PlayerInfo::stuntskill() const {
  return stuntskill_;
}
inline void PlayerInfo::set_stuntskill(::google::protobuf::int32 value) {
  set_has_stuntskill();
  stuntskill_ = value;
}

// optional int32 knightstate = 18;
inline bool PlayerInfo::has_knightstate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerInfo::set_has_knightstate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerInfo::clear_has_knightstate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerInfo::clear_knightstate() {
  knightstate_ = 0;
  clear_has_knightstate();
}
inline ::google::protobuf::int32 PlayerInfo::knightstate() const {
  return knightstate_;
}
inline void PlayerInfo::set_knightstate(::google::protobuf::int32 value) {
  set_has_knightstate();
  knightstate_ = value;
}

// optional int32 knightstateexp = 19;
inline bool PlayerInfo::has_knightstateexp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerInfo::set_has_knightstateexp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerInfo::clear_has_knightstateexp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerInfo::clear_knightstateexp() {
  knightstateexp_ = 0;
  clear_has_knightstateexp();
}
inline ::google::protobuf::int32 PlayerInfo::knightstateexp() const {
  return knightstateexp_;
}
inline void PlayerInfo::set_knightstateexp(::google::protobuf::int32 value) {
  set_has_knightstateexp();
  knightstateexp_ = value;
}

// optional int32 merit = 20;
inline bool PlayerInfo::has_merit() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerInfo::set_has_merit() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerInfo::clear_has_merit() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerInfo::clear_merit() {
  merit_ = 0;
  clear_has_merit();
}
inline ::google::protobuf::int32 PlayerInfo::merit() const {
  return merit_;
}
inline void PlayerInfo::set_merit(::google::protobuf::int32 value) {
  set_has_merit();
  merit_ = value;
}

// optional int32 worshipcount = 21;
inline bool PlayerInfo::has_worshipcount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerInfo::set_has_worshipcount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerInfo::clear_has_worshipcount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerInfo::clear_worshipcount() {
  worshipcount_ = 0;
  clear_has_worshipcount();
}
inline ::google::protobuf::int32 PlayerInfo::worshipcount() const {
  return worshipcount_;
}
inline void PlayerInfo::set_worshipcount(::google::protobuf::int32 value) {
  set_has_worshipcount();
  worshipcount_ = value;
}

// optional int32 freecount = 22;
inline bool PlayerInfo::has_freecount() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlayerInfo::set_has_freecount() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlayerInfo::clear_has_freecount() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlayerInfo::clear_freecount() {
  freecount_ = 0;
  clear_has_freecount();
}
inline ::google::protobuf::int32 PlayerInfo::freecount() const {
  return freecount_;
}
inline void PlayerInfo::set_freecount(::google::protobuf::int32 value) {
  set_has_freecount();
  freecount_ = value;
}

// optional int32 stategreen = 23;
inline bool PlayerInfo::has_stategreen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PlayerInfo::set_has_stategreen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PlayerInfo::clear_has_stategreen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PlayerInfo::clear_stategreen() {
  stategreen_ = 0;
  clear_has_stategreen();
}
inline ::google::protobuf::int32 PlayerInfo::stategreen() const {
  return stategreen_;
}
inline void PlayerInfo::set_stategreen(::google::protobuf::int32 value) {
  set_has_stategreen();
  stategreen_ = value;
}

// optional int32 stateblue = 24;
inline bool PlayerInfo::has_stateblue() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PlayerInfo::set_has_stateblue() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PlayerInfo::clear_has_stateblue() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PlayerInfo::clear_stateblue() {
  stateblue_ = 0;
  clear_has_stateblue();
}
inline ::google::protobuf::int32 PlayerInfo::stateblue() const {
  return stateblue_;
}
inline void PlayerInfo::set_stateblue(::google::protobuf::int32 value) {
  set_has_stateblue();
  stateblue_ = value;
}

// optional int32 statepurple = 25;
inline bool PlayerInfo::has_statepurple() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PlayerInfo::set_has_statepurple() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PlayerInfo::clear_has_statepurple() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PlayerInfo::clear_statepurple() {
  statepurple_ = 0;
  clear_has_statepurple();
}
inline ::google::protobuf::int32 PlayerInfo::statepurple() const {
  return statepurple_;
}
inline void PlayerInfo::set_statepurple(::google::protobuf::int32 value) {
  set_has_statepurple();
  statepurple_ = value;
}

// optional int32 stateorange = 26;
inline bool PlayerInfo::has_stateorange() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PlayerInfo::set_has_stateorange() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PlayerInfo::clear_has_stateorange() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PlayerInfo::clear_stateorange() {
  stateorange_ = 0;
  clear_has_stateorange();
}
inline ::google::protobuf::int32 PlayerInfo::stateorange() const {
  return stateorange_;
}
inline void PlayerInfo::set_stateorange(::google::protobuf::int32 value) {
  set_has_stateorange();
  stateorange_ = value;
}

// optional int32 bagmaxcapacity = 27;
inline bool PlayerInfo::has_bagmaxcapacity() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PlayerInfo::set_has_bagmaxcapacity() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PlayerInfo::clear_has_bagmaxcapacity() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PlayerInfo::clear_bagmaxcapacity() {
  bagmaxcapacity_ = 0;
  clear_has_bagmaxcapacity();
}
inline ::google::protobuf::int32 PlayerInfo::bagmaxcapacity() const {
  return bagmaxcapacity_;
}
inline void PlayerInfo::set_bagmaxcapacity(::google::protobuf::int32 value) {
  set_has_bagmaxcapacity();
  bagmaxcapacity_ = value;
}

// optional int32 quality = 28;
inline bool PlayerInfo::has_quality() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PlayerInfo::set_has_quality() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PlayerInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PlayerInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 PlayerInfo::quality() const {
  return quality_;
}
inline void PlayerInfo::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 qualitypro = 29;
inline bool PlayerInfo::has_qualitypro() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PlayerInfo::set_has_qualitypro() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PlayerInfo::clear_has_qualitypro() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PlayerInfo::clear_qualitypro() {
  qualitypro_ = 0;
  clear_has_qualitypro();
}
inline ::google::protobuf::int32 PlayerInfo::qualitypro() const {
  return qualitypro_;
}
inline void PlayerInfo::set_qualitypro(::google::protobuf::int32 value) {
  set_has_qualitypro();
  qualitypro_ = value;
}

// repeated int64 debutinfo = 30;
inline int PlayerInfo::debutinfo_size() const {
  return debutinfo_.size();
}
inline void PlayerInfo::clear_debutinfo() {
  debutinfo_.Clear();
}
inline ::google::protobuf::int64 PlayerInfo::debutinfo(int index) const {
  return debutinfo_.Get(index);
}
inline void PlayerInfo::set_debutinfo(int index, ::google::protobuf::int64 value) {
  debutinfo_.Set(index, value);
}
inline void PlayerInfo::add_debutinfo(::google::protobuf::int64 value) {
  debutinfo_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PlayerInfo::debutinfo() const {
  return debutinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PlayerInfo::mutable_debutinfo() {
  return &debutinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessagePlayerInfo_2eproto__INCLUDED
