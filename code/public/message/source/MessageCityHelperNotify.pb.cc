// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCityHelperNotify.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageCityHelperNotify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* CityHelperNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityHelperNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityHelperNotify_Helper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityHelperNotify_Helper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageCityHelperNotify_2eproto() {
  protobuf_AddDesc_MessageCityHelperNotify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageCityHelperNotify.proto");
  GOOGLE_CHECK(file != NULL);
  CityHelperNotify_descriptor_ = file->message_type(0);
  static const int CityHelperNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify, helper_),
  };
  CityHelperNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityHelperNotify_descriptor_,
      CityHelperNotify::default_instance_,
      CityHelperNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityHelperNotify));
  CityHelperNotify_Helper_descriptor_ = CityHelperNotify_descriptor_->nested_type(0);
  static const int CityHelperNotify_Helper_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, vocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, basestrength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, baseintellect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, basetechnique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, baseagility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, intellect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, technique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, physidamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, physidefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, magicdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, magicdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, stuntdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, stuntdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, jouk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, treat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, floatprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, stunt_),
  };
  CityHelperNotify_Helper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityHelperNotify_Helper_descriptor_,
      CityHelperNotify_Helper::default_instance_,
      CityHelperNotify_Helper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityHelperNotify_Helper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityHelperNotify_Helper));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageCityHelperNotify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityHelperNotify_descriptor_, &CityHelperNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityHelperNotify_Helper_descriptor_, &CityHelperNotify_Helper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageCityHelperNotify_2eproto() {
  delete CityHelperNotify::default_instance_;
  delete CityHelperNotify_reflection_;
  delete CityHelperNotify_Helper::default_instance_;
  delete CityHelperNotify_Helper_reflection_;
}

void protobuf_AddDesc_MessageCityHelperNotify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035MessageCityHelperNotify.proto\022\007Message"
    "\"\217\005\n\020CityHelperNotify\0220\n\006helper\030\001 \003(\0132 ."
    "Message.CityHelperNotify.Helper\032\310\004\n\006Help"
    "er\022\020\n\010playerid\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\r\n\005le"
    "vel\030\003 \001(\005\022\020\n\010vocation\030\004 \001(\005\022\020\n\010fighting\030"
    "\005 \001(\005\022\022\n\ntemplateid\030\006 \001(\005\022\024\n\014basestrengt"
    "h\030\007 \001(\005\022\025\n\rbaseintellect\030\010 \001(\005\022\025\n\rbasete"
    "chnique\030\t \001(\005\022\023\n\013baseagility\030\n \001(\005\022\020\n\010st"
    "rength\030\013 \001(\005\022\021\n\tintellect\030\014 \001(\005\022\021\n\ttechn"
    "ique\030\r \001(\005\022\017\n\007agility\030\016 \001(\005\022\r\n\005hpmax\030\017 \001"
    "(\005\022\023\n\013physidamage\030\020 \001(\005\022\024\n\014physidefense\030"
    "\021 \001(\005\022\023\n\013magicdamage\030\022 \001(\005\022\024\n\014magicdefen"
    "se\030\023 \001(\005\022\023\n\013stuntdamage\030\024 \001(\005\022\024\n\014stuntde"
    "fense\030\025 \001(\005\022\013\n\003hit\030\026 \001(\005\022\014\n\004jouk\030\027 \001(\005\022\014"
    "\n\004crit\030\030 \001(\005\022\020\n\010tenacity\030\031 \001(\005\022\r\n\005parry\030"
    "\032 \001(\005\022\r\n\005treat\030\033 \001(\005\022\017\n\007counter\030\034 \001(\005\022\021\n"
    "\tfloatprob\030\035 \001(\005\022\013\n\003sex\030\036 \001(\005\022\014\n\004body\030\037 "
    "\001(\005\022\r\n\005stunt\030  \001(\005", 698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageCityHelperNotify.proto", &protobuf_RegisterTypes);
  CityHelperNotify::default_instance_ = new CityHelperNotify();
  CityHelperNotify_Helper::default_instance_ = new CityHelperNotify_Helper();
  CityHelperNotify::default_instance_->InitAsDefaultInstance();
  CityHelperNotify_Helper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageCityHelperNotify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageCityHelperNotify_2eproto {
  StaticDescriptorInitializer_MessageCityHelperNotify_2eproto() {
    protobuf_AddDesc_MessageCityHelperNotify_2eproto();
  }
} static_descriptor_initializer_MessageCityHelperNotify_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CityHelperNotify_Helper::kPlayeridFieldNumber;
const int CityHelperNotify_Helper::kNameFieldNumber;
const int CityHelperNotify_Helper::kLevelFieldNumber;
const int CityHelperNotify_Helper::kVocationFieldNumber;
const int CityHelperNotify_Helper::kFightingFieldNumber;
const int CityHelperNotify_Helper::kTemplateidFieldNumber;
const int CityHelperNotify_Helper::kBasestrengthFieldNumber;
const int CityHelperNotify_Helper::kBaseintellectFieldNumber;
const int CityHelperNotify_Helper::kBasetechniqueFieldNumber;
const int CityHelperNotify_Helper::kBaseagilityFieldNumber;
const int CityHelperNotify_Helper::kStrengthFieldNumber;
const int CityHelperNotify_Helper::kIntellectFieldNumber;
const int CityHelperNotify_Helper::kTechniqueFieldNumber;
const int CityHelperNotify_Helper::kAgilityFieldNumber;
const int CityHelperNotify_Helper::kHpmaxFieldNumber;
const int CityHelperNotify_Helper::kPhysidamageFieldNumber;
const int CityHelperNotify_Helper::kPhysidefenseFieldNumber;
const int CityHelperNotify_Helper::kMagicdamageFieldNumber;
const int CityHelperNotify_Helper::kMagicdefenseFieldNumber;
const int CityHelperNotify_Helper::kStuntdamageFieldNumber;
const int CityHelperNotify_Helper::kStuntdefenseFieldNumber;
const int CityHelperNotify_Helper::kHitFieldNumber;
const int CityHelperNotify_Helper::kJoukFieldNumber;
const int CityHelperNotify_Helper::kCritFieldNumber;
const int CityHelperNotify_Helper::kTenacityFieldNumber;
const int CityHelperNotify_Helper::kParryFieldNumber;
const int CityHelperNotify_Helper::kTreatFieldNumber;
const int CityHelperNotify_Helper::kCounterFieldNumber;
const int CityHelperNotify_Helper::kFloatprobFieldNumber;
const int CityHelperNotify_Helper::kSexFieldNumber;
const int CityHelperNotify_Helper::kBodyFieldNumber;
const int CityHelperNotify_Helper::kStuntFieldNumber;
#endif  // !_MSC_VER

CityHelperNotify_Helper::CityHelperNotify_Helper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CityHelperNotify_Helper::InitAsDefaultInstance() {
}

CityHelperNotify_Helper::CityHelperNotify_Helper(const CityHelperNotify_Helper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityHelperNotify_Helper::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  vocation_ = 0;
  fighting_ = 0;
  templateid_ = 0;
  basestrength_ = 0;
  baseintellect_ = 0;
  basetechnique_ = 0;
  baseagility_ = 0;
  strength_ = 0;
  intellect_ = 0;
  technique_ = 0;
  agility_ = 0;
  hpmax_ = 0;
  physidamage_ = 0;
  physidefense_ = 0;
  magicdamage_ = 0;
  magicdefense_ = 0;
  stuntdamage_ = 0;
  stuntdefense_ = 0;
  hit_ = 0;
  jouk_ = 0;
  crit_ = 0;
  tenacity_ = 0;
  parry_ = 0;
  treat_ = 0;
  counter_ = 0;
  floatprob_ = 0;
  sex_ = 0;
  body_ = 0;
  stunt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityHelperNotify_Helper::~CityHelperNotify_Helper() {
  SharedDtor();
}

void CityHelperNotify_Helper::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CityHelperNotify_Helper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityHelperNotify_Helper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityHelperNotify_Helper_descriptor_;
}

const CityHelperNotify_Helper& CityHelperNotify_Helper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageCityHelperNotify_2eproto();
  return *default_instance_;
}

CityHelperNotify_Helper* CityHelperNotify_Helper::default_instance_ = NULL;

CityHelperNotify_Helper* CityHelperNotify_Helper::New() const {
  return new CityHelperNotify_Helper;
}

void CityHelperNotify_Helper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    vocation_ = 0;
    fighting_ = 0;
    templateid_ = 0;
    basestrength_ = 0;
    baseintellect_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    basetechnique_ = 0;
    baseagility_ = 0;
    strength_ = 0;
    intellect_ = 0;
    technique_ = 0;
    agility_ = 0;
    hpmax_ = 0;
    physidamage_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    physidefense_ = 0;
    magicdamage_ = 0;
    magicdefense_ = 0;
    stuntdamage_ = 0;
    stuntdefense_ = 0;
    hit_ = 0;
    jouk_ = 0;
    crit_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tenacity_ = 0;
    parry_ = 0;
    treat_ = 0;
    counter_ = 0;
    floatprob_ = 0;
    sex_ = 0;
    body_ = 0;
    stunt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityHelperNotify_Helper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vocation;
        break;
      }

      // optional int32 vocation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vocation_)));
          set_has_vocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fighting;
        break;
      }

      // optional int32 fighting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_basestrength;
        break;
      }

      // optional int32 basestrength = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basestrength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basestrength_)));
          set_has_basestrength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_baseintellect;
        break;
      }

      // optional int32 baseintellect = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseintellect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseintellect_)));
          set_has_baseintellect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_basetechnique;
        break;
      }

      // optional int32 basetechnique = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basetechnique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basetechnique_)));
          set_has_basetechnique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_baseagility;
        break;
      }

      // optional int32 baseagility = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseagility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseagility_)));
          set_has_baseagility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_strength;
        break;
      }

      // optional int32 strength = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_intellect;
        break;
      }

      // optional int32 intellect = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intellect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intellect_)));
          set_has_intellect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_technique;
        break;
      }

      // optional int32 technique = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_technique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &technique_)));
          set_has_technique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_agility;
        break;
      }

      // optional int32 agility = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_physidamage;
        break;
      }

      // optional int32 physidamage = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physidamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physidamage_)));
          set_has_physidamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_physidefense;
        break;
      }

      // optional int32 physidefense = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physidefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physidefense_)));
          set_has_physidefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_magicdamage;
        break;
      }

      // optional int32 magicdamage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdamage_)));
          set_has_magicdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_magicdefense;
        break;
      }

      // optional int32 magicdefense = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefense_)));
          set_has_magicdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_stuntdamage;
        break;
      }

      // optional int32 stuntdamage = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stuntdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stuntdamage_)));
          set_has_stuntdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_stuntdefense;
        break;
      }

      // optional int32 stuntdefense = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stuntdefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stuntdefense_)));
          set_has_stuntdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_hit;
        break;
      }

      // optional int32 hit = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_jouk;
        break;
      }

      // optional int32 jouk = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jouk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jouk_)));
          set_has_jouk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_crit;
        break;
      }

      // optional int32 crit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tenacity;
        break;
      }

      // optional int32 tenacity = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_parry;
        break;
      }

      // optional int32 parry = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_treat;
        break;
      }

      // optional int32 treat = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treat_)));
          set_has_treat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_counter;
        break;
      }

      // optional int32 counter = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_floatprob;
        break;
      }

      // optional int32 floatprob = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floatprob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floatprob_)));
          set_has_floatprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_sex;
        break;
      }

      // optional int32 sex = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_body;
        break;
      }

      // optional int32 body = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_stunt;
        break;
      }

      // optional int32 stunt = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stunt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stunt_)));
          set_has_stunt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityHelperNotify_Helper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 vocation = 4;
  if (has_vocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vocation(), output);
  }

  // optional int32 fighting = 5;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fighting(), output);
  }

  // optional int32 templateid = 6;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->templateid(), output);
  }

  // optional int32 basestrength = 7;
  if (has_basestrength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->basestrength(), output);
  }

  // optional int32 baseintellect = 8;
  if (has_baseintellect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->baseintellect(), output);
  }

  // optional int32 basetechnique = 9;
  if (has_basetechnique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->basetechnique(), output);
  }

  // optional int32 baseagility = 10;
  if (has_baseagility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->baseagility(), output);
  }

  // optional int32 strength = 11;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->strength(), output);
  }

  // optional int32 intellect = 12;
  if (has_intellect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->intellect(), output);
  }

  // optional int32 technique = 13;
  if (has_technique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->technique(), output);
  }

  // optional int32 agility = 14;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->agility(), output);
  }

  // optional int32 hpmax = 15;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hpmax(), output);
  }

  // optional int32 physidamage = 16;
  if (has_physidamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->physidamage(), output);
  }

  // optional int32 physidefense = 17;
  if (has_physidefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->physidefense(), output);
  }

  // optional int32 magicdamage = 18;
  if (has_magicdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->magicdamage(), output);
  }

  // optional int32 magicdefense = 19;
  if (has_magicdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->magicdefense(), output);
  }

  // optional int32 stuntdamage = 20;
  if (has_stuntdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->stuntdamage(), output);
  }

  // optional int32 stuntdefense = 21;
  if (has_stuntdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->stuntdefense(), output);
  }

  // optional int32 hit = 22;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hit(), output);
  }

  // optional int32 jouk = 23;
  if (has_jouk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->jouk(), output);
  }

  // optional int32 crit = 24;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->crit(), output);
  }

  // optional int32 tenacity = 25;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tenacity(), output);
  }

  // optional int32 parry = 26;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->parry(), output);
  }

  // optional int32 treat = 27;
  if (has_treat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->treat(), output);
  }

  // optional int32 counter = 28;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->counter(), output);
  }

  // optional int32 floatprob = 29;
  if (has_floatprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->floatprob(), output);
  }

  // optional int32 sex = 30;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->sex(), output);
  }

  // optional int32 body = 31;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->body(), output);
  }

  // optional int32 stunt = 32;
  if (has_stunt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->stunt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CityHelperNotify_Helper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 vocation = 4;
  if (has_vocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vocation(), target);
  }

  // optional int32 fighting = 5;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fighting(), target);
  }

  // optional int32 templateid = 6;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->templateid(), target);
  }

  // optional int32 basestrength = 7;
  if (has_basestrength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->basestrength(), target);
  }

  // optional int32 baseintellect = 8;
  if (has_baseintellect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->baseintellect(), target);
  }

  // optional int32 basetechnique = 9;
  if (has_basetechnique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->basetechnique(), target);
  }

  // optional int32 baseagility = 10;
  if (has_baseagility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->baseagility(), target);
  }

  // optional int32 strength = 11;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->strength(), target);
  }

  // optional int32 intellect = 12;
  if (has_intellect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->intellect(), target);
  }

  // optional int32 technique = 13;
  if (has_technique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->technique(), target);
  }

  // optional int32 agility = 14;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->agility(), target);
  }

  // optional int32 hpmax = 15;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hpmax(), target);
  }

  // optional int32 physidamage = 16;
  if (has_physidamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->physidamage(), target);
  }

  // optional int32 physidefense = 17;
  if (has_physidefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->physidefense(), target);
  }

  // optional int32 magicdamage = 18;
  if (has_magicdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->magicdamage(), target);
  }

  // optional int32 magicdefense = 19;
  if (has_magicdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->magicdefense(), target);
  }

  // optional int32 stuntdamage = 20;
  if (has_stuntdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->stuntdamage(), target);
  }

  // optional int32 stuntdefense = 21;
  if (has_stuntdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->stuntdefense(), target);
  }

  // optional int32 hit = 22;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hit(), target);
  }

  // optional int32 jouk = 23;
  if (has_jouk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->jouk(), target);
  }

  // optional int32 crit = 24;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->crit(), target);
  }

  // optional int32 tenacity = 25;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tenacity(), target);
  }

  // optional int32 parry = 26;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->parry(), target);
  }

  // optional int32 treat = 27;
  if (has_treat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->treat(), target);
  }

  // optional int32 counter = 28;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->counter(), target);
  }

  // optional int32 floatprob = 29;
  if (has_floatprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->floatprob(), target);
  }

  // optional int32 sex = 30;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->sex(), target);
  }

  // optional int32 body = 31;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->body(), target);
  }

  // optional int32 stunt = 32;
  if (has_stunt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->stunt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityHelperNotify_Helper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 vocation = 4;
    if (has_vocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vocation());
    }

    // optional int32 fighting = 5;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting());
    }

    // optional int32 templateid = 6;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int32 basestrength = 7;
    if (has_basestrength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basestrength());
    }

    // optional int32 baseintellect = 8;
    if (has_baseintellect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseintellect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 basetechnique = 9;
    if (has_basetechnique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basetechnique());
    }

    // optional int32 baseagility = 10;
    if (has_baseagility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseagility());
    }

    // optional int32 strength = 11;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // optional int32 intellect = 12;
    if (has_intellect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intellect());
    }

    // optional int32 technique = 13;
    if (has_technique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->technique());
    }

    // optional int32 agility = 14;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 hpmax = 15;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 physidamage = 16;
    if (has_physidamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physidamage());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 physidefense = 17;
    if (has_physidefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physidefense());
    }

    // optional int32 magicdamage = 18;
    if (has_magicdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdamage());
    }

    // optional int32 magicdefense = 19;
    if (has_magicdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefense());
    }

    // optional int32 stuntdamage = 20;
    if (has_stuntdamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stuntdamage());
    }

    // optional int32 stuntdefense = 21;
    if (has_stuntdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stuntdefense());
    }

    // optional int32 hit = 22;
    if (has_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

    // optional int32 jouk = 23;
    if (has_jouk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jouk());
    }

    // optional int32 crit = 24;
    if (has_crit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 tenacity = 25;
    if (has_tenacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacity());
    }

    // optional int32 parry = 26;
    if (has_parry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parry());
    }

    // optional int32 treat = 27;
    if (has_treat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treat());
    }

    // optional int32 counter = 28;
    if (has_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counter());
    }

    // optional int32 floatprob = 29;
    if (has_floatprob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floatprob());
    }

    // optional int32 sex = 30;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 body = 31;
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body());
    }

    // optional int32 stunt = 32;
    if (has_stunt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stunt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityHelperNotify_Helper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityHelperNotify_Helper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityHelperNotify_Helper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityHelperNotify_Helper::MergeFrom(const CityHelperNotify_Helper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vocation()) {
      set_vocation(from.vocation());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_basestrength()) {
      set_basestrength(from.basestrength());
    }
    if (from.has_baseintellect()) {
      set_baseintellect(from.baseintellect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_basetechnique()) {
      set_basetechnique(from.basetechnique());
    }
    if (from.has_baseagility()) {
      set_baseagility(from.baseagility());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_intellect()) {
      set_intellect(from.intellect());
    }
    if (from.has_technique()) {
      set_technique(from.technique());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_physidamage()) {
      set_physidamage(from.physidamage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_physidefense()) {
      set_physidefense(from.physidefense());
    }
    if (from.has_magicdamage()) {
      set_magicdamage(from.magicdamage());
    }
    if (from.has_magicdefense()) {
      set_magicdefense(from.magicdefense());
    }
    if (from.has_stuntdamage()) {
      set_stuntdamage(from.stuntdamage());
    }
    if (from.has_stuntdefense()) {
      set_stuntdefense(from.stuntdefense());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_jouk()) {
      set_jouk(from.jouk());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_treat()) {
      set_treat(from.treat());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
    if (from.has_floatprob()) {
      set_floatprob(from.floatprob());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_stunt()) {
      set_stunt(from.stunt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityHelperNotify_Helper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityHelperNotify_Helper::CopyFrom(const CityHelperNotify_Helper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityHelperNotify_Helper::IsInitialized() const {

  return true;
}

void CityHelperNotify_Helper::Swap(CityHelperNotify_Helper* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(vocation_, other->vocation_);
    std::swap(fighting_, other->fighting_);
    std::swap(templateid_, other->templateid_);
    std::swap(basestrength_, other->basestrength_);
    std::swap(baseintellect_, other->baseintellect_);
    std::swap(basetechnique_, other->basetechnique_);
    std::swap(baseagility_, other->baseagility_);
    std::swap(strength_, other->strength_);
    std::swap(intellect_, other->intellect_);
    std::swap(technique_, other->technique_);
    std::swap(agility_, other->agility_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(physidamage_, other->physidamage_);
    std::swap(physidefense_, other->physidefense_);
    std::swap(magicdamage_, other->magicdamage_);
    std::swap(magicdefense_, other->magicdefense_);
    std::swap(stuntdamage_, other->stuntdamage_);
    std::swap(stuntdefense_, other->stuntdefense_);
    std::swap(hit_, other->hit_);
    std::swap(jouk_, other->jouk_);
    std::swap(crit_, other->crit_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(parry_, other->parry_);
    std::swap(treat_, other->treat_);
    std::swap(counter_, other->counter_);
    std::swap(floatprob_, other->floatprob_);
    std::swap(sex_, other->sex_);
    std::swap(body_, other->body_);
    std::swap(stunt_, other->stunt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityHelperNotify_Helper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityHelperNotify_Helper_descriptor_;
  metadata.reflection = CityHelperNotify_Helper_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CityHelperNotify::kHelperFieldNumber;
#endif  // !_MSC_VER

CityHelperNotify::CityHelperNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CityHelperNotify::InitAsDefaultInstance() {
}

CityHelperNotify::CityHelperNotify(const CityHelperNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityHelperNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityHelperNotify::~CityHelperNotify() {
  SharedDtor();
}

void CityHelperNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityHelperNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityHelperNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityHelperNotify_descriptor_;
}

const CityHelperNotify& CityHelperNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageCityHelperNotify_2eproto();
  return *default_instance_;
}

CityHelperNotify* CityHelperNotify::default_instance_ = NULL;

CityHelperNotify* CityHelperNotify::New() const {
  return new CityHelperNotify;
}

void CityHelperNotify::Clear() {
  helper_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityHelperNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.CityHelperNotify.Helper helper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_helper;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityHelperNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.CityHelperNotify.Helper helper = 1;
  for (int i = 0; i < this->helper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->helper(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CityHelperNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.CityHelperNotify.Helper helper = 1;
  for (int i = 0; i < this->helper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->helper(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityHelperNotify::ByteSize() const {
  int total_size = 0;

  // repeated .Message.CityHelperNotify.Helper helper = 1;
  total_size += 1 * this->helper_size();
  for (int i = 0; i < this->helper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helper(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityHelperNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityHelperNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityHelperNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityHelperNotify::MergeFrom(const CityHelperNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  helper_.MergeFrom(from.helper_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityHelperNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityHelperNotify::CopyFrom(const CityHelperNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityHelperNotify::IsInitialized() const {

  return true;
}

void CityHelperNotify::Swap(CityHelperNotify* other) {
  if (other != this) {
    helper_.Swap(&other->helper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityHelperNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityHelperNotify_descriptor_;
  metadata.reflection = CityHelperNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
