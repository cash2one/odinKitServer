// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageNotifySWChecher.proto

#ifndef PROTOBUF_MessageNotifySWChecher_2eproto__INCLUDED
#define PROTOBUF_MessageNotifySWChecher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageNotifySWChecher_2eproto();
void protobuf_AssignDesc_MessageNotifySWChecher_2eproto();
void protobuf_ShutdownFile_MessageNotifySWChecher_2eproto();

class NotifySWChecker;

// ===================================================================

class NotifySWChecker : public ::google::protobuf::Message {
 public:
  NotifySWChecker();
  virtual ~NotifySWChecker();

  NotifySWChecker(const NotifySWChecker& from);

  inline NotifySWChecker& operator=(const NotifySWChecker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifySWChecker& default_instance();

  void Swap(NotifySWChecker* other);

  // implements Message ----------------------------------------------

  NotifySWChecker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifySWChecker& from);
  void MergeFrom(const NotifySWChecker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional string accessToken = 2;
  inline bool has_accesstoken() const;
  inline void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 2;
  inline const ::std::string& accesstoken() const;
  inline void set_accesstoken(const ::std::string& value);
  inline void set_accesstoken(const char* value);
  inline void set_accesstoken(const char* value, size_t size);
  inline ::std::string* mutable_accesstoken();
  inline ::std::string* release_accesstoken();
  inline void set_allocated_accesstoken(::std::string* accesstoken);

  // optional string paysrvip = 3;
  inline bool has_paysrvip() const;
  inline void clear_paysrvip();
  static const int kPaysrvipFieldNumber = 3;
  inline const ::std::string& paysrvip() const;
  inline void set_paysrvip(const ::std::string& value);
  inline void set_paysrvip(const char* value);
  inline void set_paysrvip(const char* value, size_t size);
  inline ::std::string* mutable_paysrvip();
  inline ::std::string* release_paysrvip();
  inline void set_allocated_paysrvip(::std::string* paysrvip);

  // optional int32 srvport = 4;
  inline bool has_srvport() const;
  inline void clear_srvport();
  static const int kSrvportFieldNumber = 4;
  inline ::google::protobuf::int32 srvport() const;
  inline void set_srvport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.NotifySWChecker)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_accesstoken();
  inline void clear_has_accesstoken();
  inline void set_has_paysrvip();
  inline void clear_has_paysrvip();
  inline void set_has_srvport();
  inline void clear_has_srvport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guid_;
  ::std::string* accesstoken_;
  ::std::string* paysrvip_;
  ::google::protobuf::int32 srvport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MessageNotifySWChecher_2eproto();
  friend void protobuf_AssignDesc_MessageNotifySWChecher_2eproto();
  friend void protobuf_ShutdownFile_MessageNotifySWChecher_2eproto();

  void InitAsDefaultInstance();
  static NotifySWChecker* default_instance_;
};
// ===================================================================


// ===================================================================

// NotifySWChecker

// optional string guid = 1;
inline bool NotifySWChecker::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifySWChecker::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifySWChecker::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifySWChecker::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& NotifySWChecker::guid() const {
  return *guid_;
}
inline void NotifySWChecker::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void NotifySWChecker::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void NotifySWChecker::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifySWChecker::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* NotifySWChecker::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotifySWChecker::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string accessToken = 2;
inline bool NotifySWChecker::has_accesstoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifySWChecker::set_has_accesstoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifySWChecker::clear_has_accesstoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifySWChecker::clear_accesstoken() {
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    accesstoken_->clear();
  }
  clear_has_accesstoken();
}
inline const ::std::string& NotifySWChecker::accesstoken() const {
  return *accesstoken_;
}
inline void NotifySWChecker::set_accesstoken(const ::std::string& value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
}
inline void NotifySWChecker::set_accesstoken(const char* value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
}
inline void NotifySWChecker::set_accesstoken(const char* value, size_t size) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifySWChecker::mutable_accesstoken() {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  return accesstoken_;
}
inline ::std::string* NotifySWChecker::release_accesstoken() {
  clear_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accesstoken_;
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotifySWChecker::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    delete accesstoken_;
  }
  if (accesstoken) {
    set_has_accesstoken();
    accesstoken_ = accesstoken;
  } else {
    clear_has_accesstoken();
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string paysrvip = 3;
inline bool NotifySWChecker::has_paysrvip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifySWChecker::set_has_paysrvip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifySWChecker::clear_has_paysrvip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifySWChecker::clear_paysrvip() {
  if (paysrvip_ != &::google::protobuf::internal::kEmptyString) {
    paysrvip_->clear();
  }
  clear_has_paysrvip();
}
inline const ::std::string& NotifySWChecker::paysrvip() const {
  return *paysrvip_;
}
inline void NotifySWChecker::set_paysrvip(const ::std::string& value) {
  set_has_paysrvip();
  if (paysrvip_ == &::google::protobuf::internal::kEmptyString) {
    paysrvip_ = new ::std::string;
  }
  paysrvip_->assign(value);
}
inline void NotifySWChecker::set_paysrvip(const char* value) {
  set_has_paysrvip();
  if (paysrvip_ == &::google::protobuf::internal::kEmptyString) {
    paysrvip_ = new ::std::string;
  }
  paysrvip_->assign(value);
}
inline void NotifySWChecker::set_paysrvip(const char* value, size_t size) {
  set_has_paysrvip();
  if (paysrvip_ == &::google::protobuf::internal::kEmptyString) {
    paysrvip_ = new ::std::string;
  }
  paysrvip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifySWChecker::mutable_paysrvip() {
  set_has_paysrvip();
  if (paysrvip_ == &::google::protobuf::internal::kEmptyString) {
    paysrvip_ = new ::std::string;
  }
  return paysrvip_;
}
inline ::std::string* NotifySWChecker::release_paysrvip() {
  clear_has_paysrvip();
  if (paysrvip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paysrvip_;
    paysrvip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotifySWChecker::set_allocated_paysrvip(::std::string* paysrvip) {
  if (paysrvip_ != &::google::protobuf::internal::kEmptyString) {
    delete paysrvip_;
  }
  if (paysrvip) {
    set_has_paysrvip();
    paysrvip_ = paysrvip;
  } else {
    clear_has_paysrvip();
    paysrvip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 srvport = 4;
inline bool NotifySWChecker::has_srvport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifySWChecker::set_has_srvport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifySWChecker::clear_has_srvport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifySWChecker::clear_srvport() {
  srvport_ = 0;
  clear_has_srvport();
}
inline ::google::protobuf::int32 NotifySWChecker::srvport() const {
  return srvport_;
}
inline void NotifySWChecker::set_srvport(::google::protobuf::int32 value) {
  set_has_srvport();
  srvport_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageNotifySWChecher_2eproto__INCLUDED
