// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageWipeAward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageWipeAward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* WipeAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WipeAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* WipeAward_AwardElem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WipeAward_AwardElem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WipeAward_AwardElem_AwardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WipeAward_AwardElem_AwardItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageWipeAward_2eproto() {
  protobuf_AddDesc_MessageWipeAward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageWipeAward.proto");
  GOOGLE_CHECK(file != NULL);
  WipeAward_descriptor_ = file->message_type(0);
  static const int WipeAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward, wipecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward, wipeawards_),
  };
  WipeAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WipeAward_descriptor_,
      WipeAward::default_instance_,
      WipeAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WipeAward));
  WipeAward_AwardElem_descriptor_ = WipeAward_descriptor_->nested_type(0);
  static const int WipeAward_AwardElem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem, wiperound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem, itemawards_),
  };
  WipeAward_AwardElem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WipeAward_AwardElem_descriptor_,
      WipeAward_AwardElem::default_instance_,
      WipeAward_AwardElem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WipeAward_AwardElem));
  WipeAward_AwardElem_AwardItem_descriptor_ = WipeAward_AwardElem_descriptor_->nested_type(0);
  static const int WipeAward_AwardElem_AwardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem_AwardItem, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem_AwardItem, num_),
  };
  WipeAward_AwardElem_AwardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WipeAward_AwardElem_AwardItem_descriptor_,
      WipeAward_AwardElem_AwardItem::default_instance_,
      WipeAward_AwardElem_AwardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem_AwardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeAward_AwardElem_AwardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WipeAward_AwardElem_AwardItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageWipeAward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WipeAward_descriptor_, &WipeAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WipeAward_AwardElem_descriptor_, &WipeAward_AwardElem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WipeAward_AwardElem_AwardItem_descriptor_, &WipeAward_AwardElem_AwardItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageWipeAward_2eproto() {
  delete WipeAward::default_instance_;
  delete WipeAward_reflection_;
  delete WipeAward_AwardElem::default_instance_;
  delete WipeAward_AwardElem_reflection_;
  delete WipeAward_AwardElem_AwardItem::default_instance_;
  delete WipeAward_AwardElem_AwardItem_reflection_;
}

void protobuf_AddDesc_MessageWipeAward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MessageWipeAward.proto\022\007Message\"\364\001\n\tWi"
    "peAward\022\021\n\twipecount\030\001 \001(\005\0220\n\nwipeawards"
    "\030\002 \003(\0132\034.Message.WipeAward.AwardElem\032\241\001\n"
    "\tAwardElem\022\021\n\twiperound\030\001 \001(\005\022\016\n\006silver\030"
    "\002 \001(\005\022\013\n\003exp\030\003 \001(\005\022:\n\nitemawards\030\004 \003(\0132&"
    ".Message.WipeAward.AwardElem.AwardItem\032("
    "\n\tAwardItem\022\016\n\006tempid\030\001 \001(\005\022\013\n\003num\030\002 \001(\005", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageWipeAward.proto", &protobuf_RegisterTypes);
  WipeAward::default_instance_ = new WipeAward();
  WipeAward_AwardElem::default_instance_ = new WipeAward_AwardElem();
  WipeAward_AwardElem_AwardItem::default_instance_ = new WipeAward_AwardElem_AwardItem();
  WipeAward::default_instance_->InitAsDefaultInstance();
  WipeAward_AwardElem::default_instance_->InitAsDefaultInstance();
  WipeAward_AwardElem_AwardItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageWipeAward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageWipeAward_2eproto {
  StaticDescriptorInitializer_MessageWipeAward_2eproto() {
    protobuf_AddDesc_MessageWipeAward_2eproto();
  }
} static_descriptor_initializer_MessageWipeAward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WipeAward_AwardElem_AwardItem::kTempidFieldNumber;
const int WipeAward_AwardElem_AwardItem::kNumFieldNumber;
#endif  // !_MSC_VER

WipeAward_AwardElem_AwardItem::WipeAward_AwardElem_AwardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WipeAward_AwardElem_AwardItem::InitAsDefaultInstance() {
}

WipeAward_AwardElem_AwardItem::WipeAward_AwardElem_AwardItem(const WipeAward_AwardElem_AwardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WipeAward_AwardElem_AwardItem::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WipeAward_AwardElem_AwardItem::~WipeAward_AwardElem_AwardItem() {
  SharedDtor();
}

void WipeAward_AwardElem_AwardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WipeAward_AwardElem_AwardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WipeAward_AwardElem_AwardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WipeAward_AwardElem_AwardItem_descriptor_;
}

const WipeAward_AwardElem_AwardItem& WipeAward_AwardElem_AwardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageWipeAward_2eproto();
  return *default_instance_;
}

WipeAward_AwardElem_AwardItem* WipeAward_AwardElem_AwardItem::default_instance_ = NULL;

WipeAward_AwardElem_AwardItem* WipeAward_AwardElem_AwardItem::New() const {
  return new WipeAward_AwardElem_AwardItem;
}

void WipeAward_AwardElem_AwardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WipeAward_AwardElem_AwardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WipeAward_AwardElem_AwardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tempid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WipeAward_AwardElem_AwardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tempid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WipeAward_AwardElem_AwardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tempid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WipeAward_AwardElem_AwardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WipeAward_AwardElem_AwardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WipeAward_AwardElem_AwardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WipeAward_AwardElem_AwardItem::MergeFrom(const WipeAward_AwardElem_AwardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WipeAward_AwardElem_AwardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WipeAward_AwardElem_AwardItem::CopyFrom(const WipeAward_AwardElem_AwardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WipeAward_AwardElem_AwardItem::IsInitialized() const {

  return true;
}

void WipeAward_AwardElem_AwardItem::Swap(WipeAward_AwardElem_AwardItem* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WipeAward_AwardElem_AwardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WipeAward_AwardElem_AwardItem_descriptor_;
  metadata.reflection = WipeAward_AwardElem_AwardItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WipeAward_AwardElem::kWiperoundFieldNumber;
const int WipeAward_AwardElem::kSilverFieldNumber;
const int WipeAward_AwardElem::kExpFieldNumber;
const int WipeAward_AwardElem::kItemawardsFieldNumber;
#endif  // !_MSC_VER

WipeAward_AwardElem::WipeAward_AwardElem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WipeAward_AwardElem::InitAsDefaultInstance() {
}

WipeAward_AwardElem::WipeAward_AwardElem(const WipeAward_AwardElem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WipeAward_AwardElem::SharedCtor() {
  _cached_size_ = 0;
  wiperound_ = 0;
  silver_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WipeAward_AwardElem::~WipeAward_AwardElem() {
  SharedDtor();
}

void WipeAward_AwardElem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WipeAward_AwardElem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WipeAward_AwardElem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WipeAward_AwardElem_descriptor_;
}

const WipeAward_AwardElem& WipeAward_AwardElem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageWipeAward_2eproto();
  return *default_instance_;
}

WipeAward_AwardElem* WipeAward_AwardElem::default_instance_ = NULL;

WipeAward_AwardElem* WipeAward_AwardElem::New() const {
  return new WipeAward_AwardElem;
}

void WipeAward_AwardElem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wiperound_ = 0;
    silver_ = 0;
    exp_ = 0;
  }
  itemawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WipeAward_AwardElem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wiperound = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiperound_)));
          set_has_wiperound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver;
        break;
      }

      // optional int32 silver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemawards;
        break;
      }

      // repeated .Message.WipeAward.AwardElem.AwardItem itemawards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemawards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemawards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WipeAward_AwardElem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wiperound = 1;
  if (has_wiperound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wiperound(), output);
  }

  // optional int32 silver = 2;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->silver(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // repeated .Message.WipeAward.AwardElem.AwardItem itemawards = 4;
  for (int i = 0; i < this->itemawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemawards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WipeAward_AwardElem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wiperound = 1;
  if (has_wiperound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wiperound(), target);
  }

  // optional int32 silver = 2;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->silver(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // repeated .Message.WipeAward.AwardElem.AwardItem itemawards = 4;
  for (int i = 0; i < this->itemawards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemawards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WipeAward_AwardElem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wiperound = 1;
    if (has_wiperound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiperound());
    }

    // optional int32 silver = 2;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated .Message.WipeAward.AwardElem.AwardItem itemawards = 4;
  total_size += 1 * this->itemawards_size();
  for (int i = 0; i < this->itemawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemawards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WipeAward_AwardElem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WipeAward_AwardElem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WipeAward_AwardElem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WipeAward_AwardElem::MergeFrom(const WipeAward_AwardElem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemawards_.MergeFrom(from.itemawards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wiperound()) {
      set_wiperound(from.wiperound());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WipeAward_AwardElem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WipeAward_AwardElem::CopyFrom(const WipeAward_AwardElem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WipeAward_AwardElem::IsInitialized() const {

  return true;
}

void WipeAward_AwardElem::Swap(WipeAward_AwardElem* other) {
  if (other != this) {
    std::swap(wiperound_, other->wiperound_);
    std::swap(silver_, other->silver_);
    std::swap(exp_, other->exp_);
    itemawards_.Swap(&other->itemawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WipeAward_AwardElem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WipeAward_AwardElem_descriptor_;
  metadata.reflection = WipeAward_AwardElem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WipeAward::kWipecountFieldNumber;
const int WipeAward::kWipeawardsFieldNumber;
#endif  // !_MSC_VER

WipeAward::WipeAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WipeAward::InitAsDefaultInstance() {
}

WipeAward::WipeAward(const WipeAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WipeAward::SharedCtor() {
  _cached_size_ = 0;
  wipecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WipeAward::~WipeAward() {
  SharedDtor();
}

void WipeAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WipeAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WipeAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WipeAward_descriptor_;
}

const WipeAward& WipeAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageWipeAward_2eproto();
  return *default_instance_;
}

WipeAward* WipeAward::default_instance_ = NULL;

WipeAward* WipeAward::New() const {
  return new WipeAward;
}

void WipeAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wipecount_ = 0;
  }
  wipeawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WipeAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wipecount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wipecount_)));
          set_has_wipecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wipeawards;
        break;
      }

      // repeated .Message.WipeAward.AwardElem wipeawards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wipeawards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wipeawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wipeawards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WipeAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wipecount = 1;
  if (has_wipecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wipecount(), output);
  }

  // repeated .Message.WipeAward.AwardElem wipeawards = 2;
  for (int i = 0; i < this->wipeawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wipeawards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WipeAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wipecount = 1;
  if (has_wipecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wipecount(), target);
  }

  // repeated .Message.WipeAward.AwardElem wipeawards = 2;
  for (int i = 0; i < this->wipeawards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wipeawards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WipeAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wipecount = 1;
    if (has_wipecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wipecount());
    }

  }
  // repeated .Message.WipeAward.AwardElem wipeawards = 2;
  total_size += 1 * this->wipeawards_size();
  for (int i = 0; i < this->wipeawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wipeawards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WipeAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WipeAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WipeAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WipeAward::MergeFrom(const WipeAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  wipeawards_.MergeFrom(from.wipeawards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wipecount()) {
      set_wipecount(from.wipecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WipeAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WipeAward::CopyFrom(const WipeAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WipeAward::IsInitialized() const {

  return true;
}

void WipeAward::Swap(WipeAward* other) {
  if (other != this) {
    std::swap(wipecount_, other->wipecount_);
    wipeawards_.Swap(&other->wipeawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WipeAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WipeAward_descriptor_;
  metadata.reflection = WipeAward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
