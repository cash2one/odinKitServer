// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageArenaPlayerData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageArenaPlayerData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* ArenaPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPlayer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageArenaPlayerData_2eproto() {
  protobuf_AddDesc_MessageArenaPlayerData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageArenaPlayerData.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaPlayer_descriptor_ = file->message_type(0);
  static const int ArenaPlayer_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, isreward_),
  };
  ArenaPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPlayer_descriptor_,
      ArenaPlayer::default_instance_,
      ArenaPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPlayer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageArenaPlayerData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPlayer_descriptor_, &ArenaPlayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageArenaPlayerData_2eproto() {
  delete ArenaPlayer::default_instance_;
  delete ArenaPlayer_reflection_;
}

void protobuf_AddDesc_MessageArenaPlayerData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034MessageArenaPlayerData.proto\022\007Message\""
    "\245\001\n\013ArenaPlayer\022\013\n\003pid\030\001 \001(\003\022\014\n\004name\030\002 \001"
    "(\t\022\017\n\007fighter\030\003 \001(\005\022\r\n\005state\030\004 \001(\005\022\r\n\005st"
    "age\030\005 \001(\005\022\016\n\006tempid\030\006 \001(\005\022\r\n\005level\030\007 \001(\005"
    "\022\014\n\004rank\030\010 \001(\005\022\r\n\005score\030\t \001(\005\022\020\n\010isrewar"
    "d\030\n \001(\005", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageArenaPlayerData.proto", &protobuf_RegisterTypes);
  ArenaPlayer::default_instance_ = new ArenaPlayer();
  ArenaPlayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageArenaPlayerData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageArenaPlayerData_2eproto {
  StaticDescriptorInitializer_MessageArenaPlayerData_2eproto() {
    protobuf_AddDesc_MessageArenaPlayerData_2eproto();
  }
} static_descriptor_initializer_MessageArenaPlayerData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaPlayer::kPidFieldNumber;
const int ArenaPlayer::kNameFieldNumber;
const int ArenaPlayer::kFighterFieldNumber;
const int ArenaPlayer::kStateFieldNumber;
const int ArenaPlayer::kStageFieldNumber;
const int ArenaPlayer::kTempidFieldNumber;
const int ArenaPlayer::kLevelFieldNumber;
const int ArenaPlayer::kRankFieldNumber;
const int ArenaPlayer::kScoreFieldNumber;
const int ArenaPlayer::kIsrewardFieldNumber;
#endif  // !_MSC_VER

ArenaPlayer::ArenaPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPlayer::InitAsDefaultInstance() {
}

ArenaPlayer::ArenaPlayer(const ArenaPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPlayer::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fighter_ = 0;
  state_ = 0;
  stage_ = 0;
  tempid_ = 0;
  level_ = 0;
  rank_ = 0;
  score_ = 0;
  isreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPlayer::~ArenaPlayer() {
  SharedDtor();
}

void ArenaPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPlayer_descriptor_;
}

const ArenaPlayer& ArenaPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaPlayerData_2eproto();
  return *default_instance_;
}

ArenaPlayer* ArenaPlayer::default_instance_ = NULL;

ArenaPlayer* ArenaPlayer::New() const {
  return new ArenaPlayer;
}

void ArenaPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fighter_ = 0;
    state_ = 0;
    stage_ = 0;
    tempid_ = 0;
    level_ = 0;
    rank_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    score_ = 0;
    isreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fighter;
        break;
      }

      // optional int32 fighter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighter_)));
          set_has_fighter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stage;
        break;
      }

      // optional int32 stage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tempid;
        break;
      }

      // optional int32 tempid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional int32 rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_score;
        break;
      }

      // optional int32 score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isreward;
        break;
      }

      // optional int32 isreward = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isreward_)));
          set_has_isreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 fighter = 3;
  if (has_fighter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fighter(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 stage = 5;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stage(), output);
  }

  // optional int32 tempid = 6;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tempid(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 rank = 8;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rank(), output);
  }

  // optional int32 score = 9;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->score(), output);
  }

  // optional int32 isreward = 10;
  if (has_isreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 fighter = 3;
  if (has_fighter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fighter(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 stage = 5;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stage(), target);
  }

  // optional int32 tempid = 6;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tempid(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 rank = 8;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rank(), target);
  }

  // optional int32 score = 9;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->score(), target);
  }

  // optional int32 isreward = 10;
  if (has_isreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 fighter = 3;
    if (has_fighter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighter());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 stage = 5;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 tempid = 6;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tempid());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 rank = 8;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 isreward = 10;
    if (has_isreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaPlayer::MergeFrom(const ArenaPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fighter()) {
      set_fighter(from.fighter());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_isreward()) {
      set_isreward(from.isreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaPlayer::CopyFrom(const ArenaPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaPlayer::IsInitialized() const {

  return true;
}

void ArenaPlayer::Swap(ArenaPlayer* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(fighter_, other->fighter_);
    std::swap(state_, other->state_);
    std::swap(stage_, other->stage_);
    std::swap(tempid_, other->tempid_);
    std::swap(level_, other->level_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(isreward_, other->isreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPlayer_descriptor_;
  metadata.reflection = ArenaPlayer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
