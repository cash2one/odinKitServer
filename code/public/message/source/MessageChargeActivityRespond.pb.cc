// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageChargeActivityRespond.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageChargeActivityRespond.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* ChargeActivityRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeActivityRespond_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeActivityRespond_chargeact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeActivityRespond_chargeact_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeActivityRespond_acttime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeActivityRespond_acttime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageChargeActivityRespond_2eproto() {
  protobuf_AddDesc_MessageChargeActivityRespond_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageChargeActivityRespond.proto");
  GOOGLE_CHECK(file != NULL);
  ChargeActivityRespond_descriptor_ = file->message_type(0);
  static const int ChargeActivityRespond_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond, bhave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond, activites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond, acttimes_),
  };
  ChargeActivityRespond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeActivityRespond_descriptor_,
      ChargeActivityRespond::default_instance_,
      ChargeActivityRespond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeActivityRespond));
  ChargeActivityRespond_chargeact_descriptor_ = ChargeActivityRespond_descriptor_->nested_type(0);
  static const int ChargeActivityRespond_chargeact_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_chargeact, chargeidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_chargeact, chargetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_chargeact, chargeind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_chargeact, breach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_chargeact, bget_),
  };
  ChargeActivityRespond_chargeact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeActivityRespond_chargeact_descriptor_,
      ChargeActivityRespond_chargeact::default_instance_,
      ChargeActivityRespond_chargeact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_chargeact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_chargeact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeActivityRespond_chargeact));
  ChargeActivityRespond_acttime_descriptor_ = ChargeActivityRespond_descriptor_->nested_type(1);
  static const int ChargeActivityRespond_acttime_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_acttime, acttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_acttime, bshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_acttime, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_acttime, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_acttime, recycle_),
  };
  ChargeActivityRespond_acttime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeActivityRespond_acttime_descriptor_,
      ChargeActivityRespond_acttime::default_instance_,
      ChargeActivityRespond_acttime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_acttime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeActivityRespond_acttime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeActivityRespond_acttime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageChargeActivityRespond_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeActivityRespond_descriptor_, &ChargeActivityRespond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeActivityRespond_chargeact_descriptor_, &ChargeActivityRespond_chargeact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeActivityRespond_acttime_descriptor_, &ChargeActivityRespond_acttime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageChargeActivityRespond_2eproto() {
  delete ChargeActivityRespond::default_instance_;
  delete ChargeActivityRespond_reflection_;
  delete ChargeActivityRespond_chargeact::default_instance_;
  delete ChargeActivityRespond_chargeact_reflection_;
  delete ChargeActivityRespond_acttime::default_instance_;
  delete ChargeActivityRespond_acttime_reflection_;
}

void protobuf_AddDesc_MessageChargeActivityRespond_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"MessageChargeActivityRespond.proto\022\007Me"
    "ssage\"\363\002\n\025ChargeActivityRespond\022\017\n\007resty"
    "pe\030\001 \001(\005\022\r\n\005bhave\030\002 \001(\010\022;\n\tactivites\030\003 \003"
    "(\0132(.Message.ChargeActivityRespond.charg"
    "eact\0228\n\010acttimes\030\004 \003(\0132&.Message.ChargeA"
    "ctivityRespond.acttime\032c\n\tchargeact\022\021\n\tc"
    "hargeidx\030\001 \001(\005\022\022\n\nchargetype\030\002 \001(\005\022\021\n\tch"
    "argeind\030\003 \001(\005\022\016\n\006breach\030\004 \001(\010\022\014\n\004bget\030\005 "
    "\001(\010\032^\n\007acttime\022\017\n\007acttype\030\001 \001(\005\022\r\n\005bshow"
    "\030\002 \001(\010\022\021\n\tstarttime\030\003 \001(\003\022\017\n\007endtime\030\004 \001"
    "(\003\022\017\n\007recycle\030\005 \001(\005", 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageChargeActivityRespond.proto", &protobuf_RegisterTypes);
  ChargeActivityRespond::default_instance_ = new ChargeActivityRespond();
  ChargeActivityRespond_chargeact::default_instance_ = new ChargeActivityRespond_chargeact();
  ChargeActivityRespond_acttime::default_instance_ = new ChargeActivityRespond_acttime();
  ChargeActivityRespond::default_instance_->InitAsDefaultInstance();
  ChargeActivityRespond_chargeact::default_instance_->InitAsDefaultInstance();
  ChargeActivityRespond_acttime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageChargeActivityRespond_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageChargeActivityRespond_2eproto {
  StaticDescriptorInitializer_MessageChargeActivityRespond_2eproto() {
    protobuf_AddDesc_MessageChargeActivityRespond_2eproto();
  }
} static_descriptor_initializer_MessageChargeActivityRespond_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChargeActivityRespond_chargeact::kChargeidxFieldNumber;
const int ChargeActivityRespond_chargeact::kChargetypeFieldNumber;
const int ChargeActivityRespond_chargeact::kChargeindFieldNumber;
const int ChargeActivityRespond_chargeact::kBreachFieldNumber;
const int ChargeActivityRespond_chargeact::kBgetFieldNumber;
#endif  // !_MSC_VER

ChargeActivityRespond_chargeact::ChargeActivityRespond_chargeact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeActivityRespond_chargeact::InitAsDefaultInstance() {
}

ChargeActivityRespond_chargeact::ChargeActivityRespond_chargeact(const ChargeActivityRespond_chargeact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeActivityRespond_chargeact::SharedCtor() {
  _cached_size_ = 0;
  chargeidx_ = 0;
  chargetype_ = 0;
  chargeind_ = 0;
  breach_ = false;
  bget_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeActivityRespond_chargeact::~ChargeActivityRespond_chargeact() {
  SharedDtor();
}

void ChargeActivityRespond_chargeact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeActivityRespond_chargeact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeActivityRespond_chargeact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeActivityRespond_chargeact_descriptor_;
}

const ChargeActivityRespond_chargeact& ChargeActivityRespond_chargeact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChargeActivityRespond_2eproto();
  return *default_instance_;
}

ChargeActivityRespond_chargeact* ChargeActivityRespond_chargeact::default_instance_ = NULL;

ChargeActivityRespond_chargeact* ChargeActivityRespond_chargeact::New() const {
  return new ChargeActivityRespond_chargeact;
}

void ChargeActivityRespond_chargeact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chargeidx_ = 0;
    chargetype_ = 0;
    chargeind_ = 0;
    breach_ = false;
    bget_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeActivityRespond_chargeact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chargeidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargeidx_)));
          set_has_chargeidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chargetype;
        break;
      }

      // optional int32 chargetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chargetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargetype_)));
          set_has_chargetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chargeind;
        break;
      }

      // optional int32 chargeind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chargeind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargeind_)));
          set_has_chargeind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_breach;
        break;
      }

      // optional bool breach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breach_)));
          set_has_breach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bget;
        break;
      }

      // optional bool bget = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bget_)));
          set_has_bget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeActivityRespond_chargeact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chargeidx = 1;
  if (has_chargeidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chargeidx(), output);
  }

  // optional int32 chargetype = 2;
  if (has_chargetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chargetype(), output);
  }

  // optional int32 chargeind = 3;
  if (has_chargeind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chargeind(), output);
  }

  // optional bool breach = 4;
  if (has_breach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->breach(), output);
  }

  // optional bool bget = 5;
  if (has_bget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeActivityRespond_chargeact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chargeidx = 1;
  if (has_chargeidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chargeidx(), target);
  }

  // optional int32 chargetype = 2;
  if (has_chargetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chargetype(), target);
  }

  // optional int32 chargeind = 3;
  if (has_chargeind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chargeind(), target);
  }

  // optional bool breach = 4;
  if (has_breach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->breach(), target);
  }

  // optional bool bget = 5;
  if (has_bget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeActivityRespond_chargeact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chargeidx = 1;
    if (has_chargeidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargeidx());
    }

    // optional int32 chargetype = 2;
    if (has_chargetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargetype());
    }

    // optional int32 chargeind = 3;
    if (has_chargeind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargeind());
    }

    // optional bool breach = 4;
    if (has_breach()) {
      total_size += 1 + 1;
    }

    // optional bool bget = 5;
    if (has_bget()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeActivityRespond_chargeact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeActivityRespond_chargeact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeActivityRespond_chargeact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeActivityRespond_chargeact::MergeFrom(const ChargeActivityRespond_chargeact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chargeidx()) {
      set_chargeidx(from.chargeidx());
    }
    if (from.has_chargetype()) {
      set_chargetype(from.chargetype());
    }
    if (from.has_chargeind()) {
      set_chargeind(from.chargeind());
    }
    if (from.has_breach()) {
      set_breach(from.breach());
    }
    if (from.has_bget()) {
      set_bget(from.bget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeActivityRespond_chargeact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeActivityRespond_chargeact::CopyFrom(const ChargeActivityRespond_chargeact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeActivityRespond_chargeact::IsInitialized() const {

  return true;
}

void ChargeActivityRespond_chargeact::Swap(ChargeActivityRespond_chargeact* other) {
  if (other != this) {
    std::swap(chargeidx_, other->chargeidx_);
    std::swap(chargetype_, other->chargetype_);
    std::swap(chargeind_, other->chargeind_);
    std::swap(breach_, other->breach_);
    std::swap(bget_, other->bget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeActivityRespond_chargeact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeActivityRespond_chargeact_descriptor_;
  metadata.reflection = ChargeActivityRespond_chargeact_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChargeActivityRespond_acttime::kActtypeFieldNumber;
const int ChargeActivityRespond_acttime::kBshowFieldNumber;
const int ChargeActivityRespond_acttime::kStarttimeFieldNumber;
const int ChargeActivityRespond_acttime::kEndtimeFieldNumber;
const int ChargeActivityRespond_acttime::kRecycleFieldNumber;
#endif  // !_MSC_VER

ChargeActivityRespond_acttime::ChargeActivityRespond_acttime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeActivityRespond_acttime::InitAsDefaultInstance() {
}

ChargeActivityRespond_acttime::ChargeActivityRespond_acttime(const ChargeActivityRespond_acttime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeActivityRespond_acttime::SharedCtor() {
  _cached_size_ = 0;
  acttype_ = 0;
  bshow_ = false;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  recycle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeActivityRespond_acttime::~ChargeActivityRespond_acttime() {
  SharedDtor();
}

void ChargeActivityRespond_acttime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeActivityRespond_acttime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeActivityRespond_acttime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeActivityRespond_acttime_descriptor_;
}

const ChargeActivityRespond_acttime& ChargeActivityRespond_acttime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChargeActivityRespond_2eproto();
  return *default_instance_;
}

ChargeActivityRespond_acttime* ChargeActivityRespond_acttime::default_instance_ = NULL;

ChargeActivityRespond_acttime* ChargeActivityRespond_acttime::New() const {
  return new ChargeActivityRespond_acttime;
}

void ChargeActivityRespond_acttime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acttype_ = 0;
    bshow_ = false;
    starttime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    recycle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeActivityRespond_acttime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 acttype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bshow;
        break;
      }

      // optional bool bshow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshow_)));
          set_has_bshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional int64 starttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recycle;
        break;
      }

      // optional int32 recycle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recycle_)));
          set_has_recycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeActivityRespond_acttime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 acttype = 1;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->acttype(), output);
  }

  // optional bool bshow = 2;
  if (has_bshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bshow(), output);
  }

  // optional int64 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->starttime(), output);
  }

  // optional int64 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->endtime(), output);
  }

  // optional int32 recycle = 5;
  if (has_recycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recycle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeActivityRespond_acttime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 acttype = 1;
  if (has_acttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->acttype(), target);
  }

  // optional bool bshow = 2;
  if (has_bshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bshow(), target);
  }

  // optional int64 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->starttime(), target);
  }

  // optional int64 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->endtime(), target);
  }

  // optional int32 recycle = 5;
  if (has_recycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recycle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeActivityRespond_acttime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 acttype = 1;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acttype());
    }

    // optional bool bshow = 2;
    if (has_bshow()) {
      total_size += 1 + 1;
    }

    // optional int64 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 recycle = 5;
    if (has_recycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recycle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeActivityRespond_acttime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeActivityRespond_acttime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeActivityRespond_acttime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeActivityRespond_acttime::MergeFrom(const ChargeActivityRespond_acttime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
    if (from.has_bshow()) {
      set_bshow(from.bshow());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_recycle()) {
      set_recycle(from.recycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeActivityRespond_acttime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeActivityRespond_acttime::CopyFrom(const ChargeActivityRespond_acttime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeActivityRespond_acttime::IsInitialized() const {

  return true;
}

void ChargeActivityRespond_acttime::Swap(ChargeActivityRespond_acttime* other) {
  if (other != this) {
    std::swap(acttype_, other->acttype_);
    std::swap(bshow_, other->bshow_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(recycle_, other->recycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeActivityRespond_acttime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeActivityRespond_acttime_descriptor_;
  metadata.reflection = ChargeActivityRespond_acttime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChargeActivityRespond::kRestypeFieldNumber;
const int ChargeActivityRespond::kBhaveFieldNumber;
const int ChargeActivityRespond::kActivitesFieldNumber;
const int ChargeActivityRespond::kActtimesFieldNumber;
#endif  // !_MSC_VER

ChargeActivityRespond::ChargeActivityRespond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeActivityRespond::InitAsDefaultInstance() {
}

ChargeActivityRespond::ChargeActivityRespond(const ChargeActivityRespond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeActivityRespond::SharedCtor() {
  _cached_size_ = 0;
  restype_ = 0;
  bhave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeActivityRespond::~ChargeActivityRespond() {
  SharedDtor();
}

void ChargeActivityRespond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeActivityRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeActivityRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeActivityRespond_descriptor_;
}

const ChargeActivityRespond& ChargeActivityRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChargeActivityRespond_2eproto();
  return *default_instance_;
}

ChargeActivityRespond* ChargeActivityRespond::default_instance_ = NULL;

ChargeActivityRespond* ChargeActivityRespond::New() const {
  return new ChargeActivityRespond;
}

void ChargeActivityRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restype_ = 0;
    bhave_ = false;
  }
  activites_.Clear();
  acttimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeActivityRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 restype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bhave;
        break;
      }

      // optional bool bhave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bhave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhave_)));
          set_has_bhave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activites;
        break;
      }

      // repeated .Message.ChargeActivityRespond.chargeact activites = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activites()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activites;
        if (input->ExpectTag(34)) goto parse_acttimes;
        break;
      }

      // repeated .Message.ChargeActivityRespond.acttime acttimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acttimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acttimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acttimes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeActivityRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 restype = 1;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->restype(), output);
  }

  // optional bool bhave = 2;
  if (has_bhave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bhave(), output);
  }

  // repeated .Message.ChargeActivityRespond.chargeact activites = 3;
  for (int i = 0; i < this->activites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activites(i), output);
  }

  // repeated .Message.ChargeActivityRespond.acttime acttimes = 4;
  for (int i = 0; i < this->acttimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acttimes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeActivityRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 restype = 1;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->restype(), target);
  }

  // optional bool bhave = 2;
  if (has_bhave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bhave(), target);
  }

  // repeated .Message.ChargeActivityRespond.chargeact activites = 3;
  for (int i = 0; i < this->activites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activites(i), target);
  }

  // repeated .Message.ChargeActivityRespond.acttime acttimes = 4;
  for (int i = 0; i < this->acttimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->acttimes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeActivityRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 restype = 1;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restype());
    }

    // optional bool bhave = 2;
    if (has_bhave()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Message.ChargeActivityRespond.chargeact activites = 3;
  total_size += 1 * this->activites_size();
  for (int i = 0; i < this->activites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activites(i));
  }

  // repeated .Message.ChargeActivityRespond.acttime acttimes = 4;
  total_size += 1 * this->acttimes_size();
  for (int i = 0; i < this->acttimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acttimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeActivityRespond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeActivityRespond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeActivityRespond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeActivityRespond::MergeFrom(const ChargeActivityRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  activites_.MergeFrom(from.activites_);
  acttimes_.MergeFrom(from.acttimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_bhave()) {
      set_bhave(from.bhave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeActivityRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeActivityRespond::CopyFrom(const ChargeActivityRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeActivityRespond::IsInitialized() const {

  return true;
}

void ChargeActivityRespond::Swap(ChargeActivityRespond* other) {
  if (other != this) {
    std::swap(restype_, other->restype_);
    std::swap(bhave_, other->bhave_);
    activites_.Swap(&other->activites_);
    acttimes_.Swap(&other->acttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeActivityRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeActivityRespond_descriptor_;
  metadata.reflection = ChargeActivityRespond_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
