// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MesagePlayerCitySync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MesagePlayerCitySync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* PlayerCitySync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCitySync_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCitySync_CityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCitySync_CityInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MesagePlayerCitySync_2eproto() {
  protobuf_AddDesc_MesagePlayerCitySync_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MesagePlayerCitySync.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerCitySync_descriptor_ = file->message_type(0);
  static const int PlayerCitySync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync, info_),
  };
  PlayerCitySync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCitySync_descriptor_,
      PlayerCitySync::default_instance_,
      PlayerCitySync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCitySync));
  PlayerCitySync_CityInfo_descriptor_ = PlayerCitySync_descriptor_->nested_type(0);
  static const int PlayerCitySync_CityInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, chgcnt1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, chgcnt2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, chgcnt3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, setcnt1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, setcnt2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, setcnt3_),
  };
  PlayerCitySync_CityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCitySync_CityInfo_descriptor_,
      PlayerCitySync_CityInfo::default_instance_,
      PlayerCitySync_CityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCitySync_CityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCitySync_CityInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MesagePlayerCitySync_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCitySync_descriptor_, &PlayerCitySync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCitySync_CityInfo_descriptor_, &PlayerCitySync_CityInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MesagePlayerCitySync_2eproto() {
  delete PlayerCitySync::default_instance_;
  delete PlayerCitySync_reflection_;
  delete PlayerCitySync_CityInfo::default_instance_;
  delete PlayerCitySync_CityInfo_reflection_;
}

void protobuf_AddDesc_MesagePlayerCitySync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032MesagePlayerCitySync.proto\022\007Message\"\340\001"
    "\n\016PlayerCitySync\022\013\n\003pid\030\001 \001(\003\022.\n\004info\030\002 "
    "\003(\0132 .Message.PlayerCitySync.CityInfo\032\220\001"
    "\n\010CityInfo\022\016\n\006cityid\030\001 \001(\005\022\016\n\006record\030\002 \001"
    "(\005\022\017\n\007chgcnt1\030\003 \001(\005\022\017\n\007chgcnt2\030\004 \001(\005\022\017\n\007"
    "chgcnt3\030\005 \001(\005\022\017\n\007setcnt1\030\006 \001(\005\022\017\n\007setcnt"
    "2\030\007 \001(\005\022\017\n\007setcnt3\030\010 \001(\005", 264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MesagePlayerCitySync.proto", &protobuf_RegisterTypes);
  PlayerCitySync::default_instance_ = new PlayerCitySync();
  PlayerCitySync_CityInfo::default_instance_ = new PlayerCitySync_CityInfo();
  PlayerCitySync::default_instance_->InitAsDefaultInstance();
  PlayerCitySync_CityInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MesagePlayerCitySync_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MesagePlayerCitySync_2eproto {
  StaticDescriptorInitializer_MesagePlayerCitySync_2eproto() {
    protobuf_AddDesc_MesagePlayerCitySync_2eproto();
  }
} static_descriptor_initializer_MesagePlayerCitySync_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerCitySync_CityInfo::kCityidFieldNumber;
const int PlayerCitySync_CityInfo::kRecordFieldNumber;
const int PlayerCitySync_CityInfo::kChgcnt1FieldNumber;
const int PlayerCitySync_CityInfo::kChgcnt2FieldNumber;
const int PlayerCitySync_CityInfo::kChgcnt3FieldNumber;
const int PlayerCitySync_CityInfo::kSetcnt1FieldNumber;
const int PlayerCitySync_CityInfo::kSetcnt2FieldNumber;
const int PlayerCitySync_CityInfo::kSetcnt3FieldNumber;
#endif  // !_MSC_VER

PlayerCitySync_CityInfo::PlayerCitySync_CityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCitySync_CityInfo::InitAsDefaultInstance() {
}

PlayerCitySync_CityInfo::PlayerCitySync_CityInfo(const PlayerCitySync_CityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCitySync_CityInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0;
  record_ = 0;
  chgcnt1_ = 0;
  chgcnt2_ = 0;
  chgcnt3_ = 0;
  setcnt1_ = 0;
  setcnt2_ = 0;
  setcnt3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCitySync_CityInfo::~PlayerCitySync_CityInfo() {
  SharedDtor();
}

void PlayerCitySync_CityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCitySync_CityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCitySync_CityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCitySync_CityInfo_descriptor_;
}

const PlayerCitySync_CityInfo& PlayerCitySync_CityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MesagePlayerCitySync_2eproto();
  return *default_instance_;
}

PlayerCitySync_CityInfo* PlayerCitySync_CityInfo::default_instance_ = NULL;

PlayerCitySync_CityInfo* PlayerCitySync_CityInfo::New() const {
  return new PlayerCitySync_CityInfo;
}

void PlayerCitySync_CityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0;
    record_ = 0;
    chgcnt1_ = 0;
    chgcnt2_ = 0;
    chgcnt3_ = 0;
    setcnt1_ = 0;
    setcnt2_ = 0;
    setcnt3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCitySync_CityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_record;
        break;
      }

      // optional int32 record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_)));
          set_has_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chgcnt1;
        break;
      }

      // optional int32 chgcnt1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chgcnt1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chgcnt1_)));
          set_has_chgcnt1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chgcnt2;
        break;
      }

      // optional int32 chgcnt2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chgcnt2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chgcnt2_)));
          set_has_chgcnt2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chgcnt3;
        break;
      }

      // optional int32 chgcnt3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chgcnt3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chgcnt3_)));
          set_has_chgcnt3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_setcnt1;
        break;
      }

      // optional int32 setcnt1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setcnt1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setcnt1_)));
          set_has_setcnt1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_setcnt2;
        break;
      }

      // optional int32 setcnt2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setcnt2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setcnt2_)));
          set_has_setcnt2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_setcnt3;
        break;
      }

      // optional int32 setcnt3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setcnt3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setcnt3_)));
          set_has_setcnt3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCitySync_CityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cityid = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }

  // optional int32 record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->record(), output);
  }

  // optional int32 chgcnt1 = 3;
  if (has_chgcnt1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chgcnt1(), output);
  }

  // optional int32 chgcnt2 = 4;
  if (has_chgcnt2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chgcnt2(), output);
  }

  // optional int32 chgcnt3 = 5;
  if (has_chgcnt3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chgcnt3(), output);
  }

  // optional int32 setcnt1 = 6;
  if (has_setcnt1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->setcnt1(), output);
  }

  // optional int32 setcnt2 = 7;
  if (has_setcnt2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->setcnt2(), output);
  }

  // optional int32 setcnt3 = 8;
  if (has_setcnt3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->setcnt3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCitySync_CityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cityid = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }

  // optional int32 record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->record(), target);
  }

  // optional int32 chgcnt1 = 3;
  if (has_chgcnt1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chgcnt1(), target);
  }

  // optional int32 chgcnt2 = 4;
  if (has_chgcnt2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chgcnt2(), target);
  }

  // optional int32 chgcnt3 = 5;
  if (has_chgcnt3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chgcnt3(), target);
  }

  // optional int32 setcnt1 = 6;
  if (has_setcnt1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->setcnt1(), target);
  }

  // optional int32 setcnt2 = 7;
  if (has_setcnt2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->setcnt2(), target);
  }

  // optional int32 setcnt3 = 8;
  if (has_setcnt3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->setcnt3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCitySync_CityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cityid = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

    // optional int32 record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record());
    }

    // optional int32 chgcnt1 = 3;
    if (has_chgcnt1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chgcnt1());
    }

    // optional int32 chgcnt2 = 4;
    if (has_chgcnt2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chgcnt2());
    }

    // optional int32 chgcnt3 = 5;
    if (has_chgcnt3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chgcnt3());
    }

    // optional int32 setcnt1 = 6;
    if (has_setcnt1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setcnt1());
    }

    // optional int32 setcnt2 = 7;
    if (has_setcnt2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setcnt2());
    }

    // optional int32 setcnt3 = 8;
    if (has_setcnt3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setcnt3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCitySync_CityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCitySync_CityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCitySync_CityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCitySync_CityInfo::MergeFrom(const PlayerCitySync_CityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_chgcnt1()) {
      set_chgcnt1(from.chgcnt1());
    }
    if (from.has_chgcnt2()) {
      set_chgcnt2(from.chgcnt2());
    }
    if (from.has_chgcnt3()) {
      set_chgcnt3(from.chgcnt3());
    }
    if (from.has_setcnt1()) {
      set_setcnt1(from.setcnt1());
    }
    if (from.has_setcnt2()) {
      set_setcnt2(from.setcnt2());
    }
    if (from.has_setcnt3()) {
      set_setcnt3(from.setcnt3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCitySync_CityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCitySync_CityInfo::CopyFrom(const PlayerCitySync_CityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCitySync_CityInfo::IsInitialized() const {

  return true;
}

void PlayerCitySync_CityInfo::Swap(PlayerCitySync_CityInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(record_, other->record_);
    std::swap(chgcnt1_, other->chgcnt1_);
    std::swap(chgcnt2_, other->chgcnt2_);
    std::swap(chgcnt3_, other->chgcnt3_);
    std::swap(setcnt1_, other->setcnt1_);
    std::swap(setcnt2_, other->setcnt2_);
    std::swap(setcnt3_, other->setcnt3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCitySync_CityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCitySync_CityInfo_descriptor_;
  metadata.reflection = PlayerCitySync_CityInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerCitySync::kPidFieldNumber;
const int PlayerCitySync::kInfoFieldNumber;
#endif  // !_MSC_VER

PlayerCitySync::PlayerCitySync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCitySync::InitAsDefaultInstance() {
}

PlayerCitySync::PlayerCitySync(const PlayerCitySync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCitySync::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCitySync::~PlayerCitySync() {
  SharedDtor();
}

void PlayerCitySync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCitySync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCitySync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCitySync_descriptor_;
}

const PlayerCitySync& PlayerCitySync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MesagePlayerCitySync_2eproto();
  return *default_instance_;
}

PlayerCitySync* PlayerCitySync::default_instance_ = NULL;

PlayerCitySync* PlayerCitySync::New() const {
  return new PlayerCitySync;
}

void PlayerCitySync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCitySync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .Message.PlayerCitySync.CityInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCitySync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // repeated .Message.PlayerCitySync.CityInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCitySync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // repeated .Message.PlayerCitySync.CityInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCitySync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  // repeated .Message.PlayerCitySync.CityInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCitySync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCitySync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCitySync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCitySync::MergeFrom(const PlayerCitySync& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCitySync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCitySync::CopyFrom(const PlayerCitySync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCitySync::IsInitialized() const {

  return true;
}

void PlayerCitySync::Swap(PlayerCitySync* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCitySync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCitySync_descriptor_;
  metadata.reflection = PlayerCitySync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
