// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCombatReport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageCombatReport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* CombatReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatReport_Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatReport_Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatReport_Action_CheckAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatReport_Action_CheckAttr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageCombatReport_2eproto() {
  protobuf_AddDesc_MessageCombatReport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageCombatReport.proto");
  GOOGLE_CHECK(file != NULL);
  CombatReport_descriptor_ = file->message_type(0);
  static const int CombatReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport, action_),
  };
  CombatReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatReport_descriptor_,
      CombatReport::default_instance_,
      CombatReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatReport));
  CombatReport_Action_descriptor_ = CombatReport_descriptor_->nested_type(0);
  static const int CombatReport_Action_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, attackerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, defenderindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, combo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, checkattr_),
  };
  CombatReport_Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatReport_Action_descriptor_,
      CombatReport_Action::default_instance_,
      CombatReport_Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatReport_Action));
  CombatReport_Action_CheckAttr_descriptor_ = CombatReport_Action_descriptor_->nested_type(0);
  static const int CombatReport_Action_CheckAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action_CheckAttr, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action_CheckAttr, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action_CheckAttr, value_),
  };
  CombatReport_Action_CheckAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatReport_Action_CheckAttr_descriptor_,
      CombatReport_Action_CheckAttr::default_instance_,
      CombatReport_Action_CheckAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action_CheckAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReport_Action_CheckAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatReport_Action_CheckAttr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageCombatReport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatReport_descriptor_, &CombatReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatReport_Action_descriptor_, &CombatReport_Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatReport_Action_CheckAttr_descriptor_, &CombatReport_Action_CheckAttr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageCombatReport_2eproto() {
  delete CombatReport::default_instance_;
  delete CombatReport_reflection_;
  delete CombatReport_Action::default_instance_;
  delete CombatReport_Action_reflection_;
  delete CombatReport_Action_CheckAttr::default_instance_;
  delete CombatReport_Action_CheckAttr_reflection_;
}

void protobuf_AddDesc_MessageCombatReport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031MessageCombatReport.proto\022\007Message\"\321\002\n"
    "\014CombatReport\022,\n\006action\030\001 \003(\0132\034.Message."
    "CombatReport.Action\032\222\002\n\006Action\022\r\n\005round\030"
    "\001 \001(\005\022\025\n\rattackerindex\030\002 \001(\005\022\r\n\005skill\030\003 "
    "\001(\005\022\025\n\rdefenderindex\030\004 \003(\005\022\016\n\006damage\030\005 \003"
    "(\005\022\014\n\004flag\030\006 \003(\005\022\017\n\007counter\030\007 \003(\005\022\014\n\004buf"
    "f\030\010 \003(\005\022\r\n\005combo\030\t \001(\005\0229\n\tcheckattr\030\n \003("
    "\0132&.Message.CombatReport.Action.CheckAtt"
    "r\0325\n\tCheckAttr\022\013\n\003idx\030\001 \001(\005\022\014\n\004attr\030\002 \001("
    "\005\022\r\n\005value\030\003 \001(\005", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageCombatReport.proto", &protobuf_RegisterTypes);
  CombatReport::default_instance_ = new CombatReport();
  CombatReport_Action::default_instance_ = new CombatReport_Action();
  CombatReport_Action_CheckAttr::default_instance_ = new CombatReport_Action_CheckAttr();
  CombatReport::default_instance_->InitAsDefaultInstance();
  CombatReport_Action::default_instance_->InitAsDefaultInstance();
  CombatReport_Action_CheckAttr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageCombatReport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageCombatReport_2eproto {
  StaticDescriptorInitializer_MessageCombatReport_2eproto() {
    protobuf_AddDesc_MessageCombatReport_2eproto();
  }
} static_descriptor_initializer_MessageCombatReport_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CombatReport_Action_CheckAttr::kIdxFieldNumber;
const int CombatReport_Action_CheckAttr::kAttrFieldNumber;
const int CombatReport_Action_CheckAttr::kValueFieldNumber;
#endif  // !_MSC_VER

CombatReport_Action_CheckAttr::CombatReport_Action_CheckAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatReport_Action_CheckAttr::InitAsDefaultInstance() {
}

CombatReport_Action_CheckAttr::CombatReport_Action_CheckAttr(const CombatReport_Action_CheckAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatReport_Action_CheckAttr::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  attr_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatReport_Action_CheckAttr::~CombatReport_Action_CheckAttr() {
  SharedDtor();
}

void CombatReport_Action_CheckAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatReport_Action_CheckAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatReport_Action_CheckAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatReport_Action_CheckAttr_descriptor_;
}

const CombatReport_Action_CheckAttr& CombatReport_Action_CheckAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageCombatReport_2eproto();
  return *default_instance_;
}

CombatReport_Action_CheckAttr* CombatReport_Action_CheckAttr::default_instance_ = NULL;

CombatReport_Action_CheckAttr* CombatReport_Action_CheckAttr::New() const {
  return new CombatReport_Action_CheckAttr;
}

void CombatReport_Action_CheckAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    attr_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatReport_Action_CheckAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr;
        break;
      }

      // optional int32 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_)));
          set_has_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatReport_Action_CheckAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatReport_Action_CheckAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // optional int32 attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attr(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatReport_Action_CheckAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatReport_Action_CheckAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatReport_Action_CheckAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatReport_Action_CheckAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatReport_Action_CheckAttr::MergeFrom(const CombatReport_Action_CheckAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatReport_Action_CheckAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatReport_Action_CheckAttr::CopyFrom(const CombatReport_Action_CheckAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatReport_Action_CheckAttr::IsInitialized() const {

  return true;
}

void CombatReport_Action_CheckAttr::Swap(CombatReport_Action_CheckAttr* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(attr_, other->attr_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatReport_Action_CheckAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatReport_Action_CheckAttr_descriptor_;
  metadata.reflection = CombatReport_Action_CheckAttr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CombatReport_Action::kRoundFieldNumber;
const int CombatReport_Action::kAttackerindexFieldNumber;
const int CombatReport_Action::kSkillFieldNumber;
const int CombatReport_Action::kDefenderindexFieldNumber;
const int CombatReport_Action::kDamageFieldNumber;
const int CombatReport_Action::kFlagFieldNumber;
const int CombatReport_Action::kCounterFieldNumber;
const int CombatReport_Action::kBuffFieldNumber;
const int CombatReport_Action::kComboFieldNumber;
const int CombatReport_Action::kCheckattrFieldNumber;
#endif  // !_MSC_VER

CombatReport_Action::CombatReport_Action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatReport_Action::InitAsDefaultInstance() {
}

CombatReport_Action::CombatReport_Action(const CombatReport_Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatReport_Action::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  attackerindex_ = 0;
  skill_ = 0;
  combo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatReport_Action::~CombatReport_Action() {
  SharedDtor();
}

void CombatReport_Action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatReport_Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatReport_Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatReport_Action_descriptor_;
}

const CombatReport_Action& CombatReport_Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageCombatReport_2eproto();
  return *default_instance_;
}

CombatReport_Action* CombatReport_Action::default_instance_ = NULL;

CombatReport_Action* CombatReport_Action::New() const {
  return new CombatReport_Action;
}

void CombatReport_Action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0;
    attackerindex_ = 0;
    skill_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    combo_ = 0;
  }
  defenderindex_.Clear();
  damage_.Clear();
  flag_.Clear();
  counter_.Clear();
  buff_.Clear();
  checkattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatReport_Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attackerindex;
        break;
      }

      // optional int32 attackerindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackerindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackerindex_)));
          set_has_attackerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill;
        break;
      }

      // optional int32 skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defenderindex;
        break;
      }

      // repeated int32 defenderindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenderindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_defenderindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_defenderindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defenderindex;
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // repeated int32 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_damage())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_damage())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        if (input->ExpectTag(48)) goto parse_flag;
        break;
      }

      // repeated int32 flag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_flag())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flag())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_flag;
        if (input->ExpectTag(56)) goto parse_counter;
        break;
      }

      // repeated int32 counter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_counter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_counter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_counter;
        if (input->ExpectTag(64)) goto parse_buff;
        break;
      }

      // repeated int32 buff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_buff())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buff())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buff;
        if (input->ExpectTag(72)) goto parse_combo;
        break;
      }

      // optional int32 combo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_)));
          set_has_combo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_checkattr;
        break;
      }

      // repeated .Message.CombatReport.Action.CheckAttr checkattr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_checkattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_checkattr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatReport_Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // optional int32 attackerindex = 2;
  if (has_attackerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attackerindex(), output);
  }

  // optional int32 skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill(), output);
  }

  // repeated int32 defenderindex = 4;
  for (int i = 0; i < this->defenderindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->defenderindex(i), output);
  }

  // repeated int32 damage = 5;
  for (int i = 0; i < this->damage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->damage(i), output);
  }

  // repeated int32 flag = 6;
  for (int i = 0; i < this->flag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->flag(i), output);
  }

  // repeated int32 counter = 7;
  for (int i = 0; i < this->counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->counter(i), output);
  }

  // repeated int32 buff = 8;
  for (int i = 0; i < this->buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->buff(i), output);
  }

  // optional int32 combo = 9;
  if (has_combo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->combo(), output);
  }

  // repeated .Message.CombatReport.Action.CheckAttr checkattr = 10;
  for (int i = 0; i < this->checkattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->checkattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatReport_Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // optional int32 attackerindex = 2;
  if (has_attackerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attackerindex(), target);
  }

  // optional int32 skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill(), target);
  }

  // repeated int32 defenderindex = 4;
  for (int i = 0; i < this->defenderindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->defenderindex(i), target);
  }

  // repeated int32 damage = 5;
  for (int i = 0; i < this->damage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->damage(i), target);
  }

  // repeated int32 flag = 6;
  for (int i = 0; i < this->flag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->flag(i), target);
  }

  // repeated int32 counter = 7;
  for (int i = 0; i < this->counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->counter(i), target);
  }

  // repeated int32 buff = 8;
  for (int i = 0; i < this->buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->buff(i), target);
  }

  // optional int32 combo = 9;
  if (has_combo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->combo(), target);
  }

  // repeated .Message.CombatReport.Action.CheckAttr checkattr = 10;
  for (int i = 0; i < this->checkattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->checkattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatReport_Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 attackerindex = 2;
    if (has_attackerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackerindex());
    }

    // optional int32 skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 combo = 9;
    if (has_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo());
    }

  }
  // repeated int32 defenderindex = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->defenderindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->defenderindex(i));
    }
    total_size += 1 * this->defenderindex_size() + data_size;
  }

  // repeated int32 damage = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->damage_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->damage(i));
    }
    total_size += 1 * this->damage_size() + data_size;
  }

  // repeated int32 flag = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->flag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->flag(i));
    }
    total_size += 1 * this->flag_size() + data_size;
  }

  // repeated int32 counter = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->counter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->counter(i));
    }
    total_size += 1 * this->counter_size() + data_size;
  }

  // repeated int32 buff = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->buff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buff(i));
    }
    total_size += 1 * this->buff_size() + data_size;
  }

  // repeated .Message.CombatReport.Action.CheckAttr checkattr = 10;
  total_size += 1 * this->checkattr_size();
  for (int i = 0; i < this->checkattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->checkattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatReport_Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatReport_Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatReport_Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatReport_Action::MergeFrom(const CombatReport_Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  defenderindex_.MergeFrom(from.defenderindex_);
  damage_.MergeFrom(from.damage_);
  flag_.MergeFrom(from.flag_);
  counter_.MergeFrom(from.counter_);
  buff_.MergeFrom(from.buff_);
  checkattr_.MergeFrom(from.checkattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_attackerindex()) {
      set_attackerindex(from.attackerindex());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combo()) {
      set_combo(from.combo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatReport_Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatReport_Action::CopyFrom(const CombatReport_Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatReport_Action::IsInitialized() const {

  return true;
}

void CombatReport_Action::Swap(CombatReport_Action* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(attackerindex_, other->attackerindex_);
    std::swap(skill_, other->skill_);
    defenderindex_.Swap(&other->defenderindex_);
    damage_.Swap(&other->damage_);
    flag_.Swap(&other->flag_);
    counter_.Swap(&other->counter_);
    buff_.Swap(&other->buff_);
    std::swap(combo_, other->combo_);
    checkattr_.Swap(&other->checkattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatReport_Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatReport_Action_descriptor_;
  metadata.reflection = CombatReport_Action_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CombatReport::kActionFieldNumber;
#endif  // !_MSC_VER

CombatReport::CombatReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatReport::InitAsDefaultInstance() {
}

CombatReport::CombatReport(const CombatReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatReport::~CombatReport() {
  SharedDtor();
}

void CombatReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatReport_descriptor_;
}

const CombatReport& CombatReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageCombatReport_2eproto();
  return *default_instance_;
}

CombatReport* CombatReport::default_instance_ = NULL;

CombatReport* CombatReport::New() const {
  return new CombatReport;
}

void CombatReport::Clear() {
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.CombatReport.Action action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_action;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.CombatReport.Action action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->action(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.CombatReport.Action action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->action(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatReport::ByteSize() const {
  int total_size = 0;

  // repeated .Message.CombatReport.Action action = 1;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatReport::MergeFrom(const CombatReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatReport::CopyFrom(const CombatReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatReport::IsInitialized() const {

  return true;
}

void CombatReport::Swap(CombatReport* other) {
  if (other != this) {
    action_.Swap(&other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatReport_descriptor_;
  metadata.reflection = CombatReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
