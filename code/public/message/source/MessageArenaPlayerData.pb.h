// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageArenaPlayerData.proto

#ifndef PROTOBUF_MessageArenaPlayerData_2eproto__INCLUDED
#define PROTOBUF_MessageArenaPlayerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageArenaPlayerData_2eproto();
void protobuf_AssignDesc_MessageArenaPlayerData_2eproto();
void protobuf_ShutdownFile_MessageArenaPlayerData_2eproto();

class ArenaPlayer;

// ===================================================================

class ArenaPlayer : public ::google::protobuf::Message {
 public:
  ArenaPlayer();
  virtual ~ArenaPlayer();

  ArenaPlayer(const ArenaPlayer& from);

  inline ArenaPlayer& operator=(const ArenaPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaPlayer& default_instance();

  void Swap(ArenaPlayer* other);

  // implements Message ----------------------------------------------

  ArenaPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaPlayer& from);
  void MergeFrom(const ArenaPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 fighter = 3;
  inline bool has_fighter() const;
  inline void clear_fighter();
  static const int kFighterFieldNumber = 3;
  inline ::google::protobuf::int32 fighter() const;
  inline void set_fighter(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 stage = 5;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 5;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // optional int32 tempid = 6;
  inline bool has_tempid() const;
  inline void clear_tempid();
  static const int kTempidFieldNumber = 6;
  inline ::google::protobuf::int32 tempid() const;
  inline void set_tempid(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 rank = 8;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 8;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 score = 9;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 9;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 isreward = 10;
  inline bool has_isreward() const;
  inline void clear_isreward();
  static const int kIsrewardFieldNumber = 10;
  inline ::google::protobuf::int32 isreward() const;
  inline void set_isreward(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.ArenaPlayer)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fighter();
  inline void clear_has_fighter();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_tempid();
  inline void clear_has_tempid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_isreward();
  inline void clear_has_isreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;
  ::std::string* name_;
  ::google::protobuf::int32 fighter_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 tempid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 isreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_MessageArenaPlayerData_2eproto();
  friend void protobuf_AssignDesc_MessageArenaPlayerData_2eproto();
  friend void protobuf_ShutdownFile_MessageArenaPlayerData_2eproto();

  void InitAsDefaultInstance();
  static ArenaPlayer* default_instance_;
};
// ===================================================================


// ===================================================================

// ArenaPlayer

// optional int64 pid = 1;
inline bool ArenaPlayer::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaPlayer::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaPlayer::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaPlayer::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 ArenaPlayer::pid() const {
  return pid_;
}
inline void ArenaPlayer::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional string name = 2;
inline bool ArenaPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaPlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ArenaPlayer::name() const {
  return *name_;
}
inline void ArenaPlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaPlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaPlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ArenaPlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaPlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fighter = 3;
inline bool ArenaPlayer::has_fighter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaPlayer::set_has_fighter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaPlayer::clear_has_fighter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaPlayer::clear_fighter() {
  fighter_ = 0;
  clear_has_fighter();
}
inline ::google::protobuf::int32 ArenaPlayer::fighter() const {
  return fighter_;
}
inline void ArenaPlayer::set_fighter(::google::protobuf::int32 value) {
  set_has_fighter();
  fighter_ = value;
}

// optional int32 state = 4;
inline bool ArenaPlayer::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaPlayer::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaPlayer::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaPlayer::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ArenaPlayer::state() const {
  return state_;
}
inline void ArenaPlayer::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 stage = 5;
inline bool ArenaPlayer::has_stage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaPlayer::set_has_stage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaPlayer::clear_has_stage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaPlayer::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 ArenaPlayer::stage() const {
  return stage_;
}
inline void ArenaPlayer::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// optional int32 tempid = 6;
inline bool ArenaPlayer::has_tempid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaPlayer::set_has_tempid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaPlayer::clear_has_tempid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaPlayer::clear_tempid() {
  tempid_ = 0;
  clear_has_tempid();
}
inline ::google::protobuf::int32 ArenaPlayer::tempid() const {
  return tempid_;
}
inline void ArenaPlayer::set_tempid(::google::protobuf::int32 value) {
  set_has_tempid();
  tempid_ = value;
}

// optional int32 level = 7;
inline bool ArenaPlayer::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaPlayer::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaPlayer::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ArenaPlayer::level() const {
  return level_;
}
inline void ArenaPlayer::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 rank = 8;
inline bool ArenaPlayer::has_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArenaPlayer::set_has_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArenaPlayer::clear_has_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArenaPlayer::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ArenaPlayer::rank() const {
  return rank_;
}
inline void ArenaPlayer::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 score = 9;
inline bool ArenaPlayer::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArenaPlayer::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArenaPlayer::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArenaPlayer::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ArenaPlayer::score() const {
  return score_;
}
inline void ArenaPlayer::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 isreward = 10;
inline bool ArenaPlayer::has_isreward() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArenaPlayer::set_has_isreward() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArenaPlayer::clear_has_isreward() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArenaPlayer::clear_isreward() {
  isreward_ = 0;
  clear_has_isreward();
}
inline ::google::protobuf::int32 ArenaPlayer::isreward() const {
  return isreward_;
}
inline void ArenaPlayer::set_isreward(::google::protobuf::int32 value) {
  set_has_isreward();
  isreward_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageArenaPlayerData_2eproto__INCLUDED
