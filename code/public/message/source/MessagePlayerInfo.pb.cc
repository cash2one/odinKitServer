// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePlayerInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessagePlayerInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessagePlayerInfo_2eproto() {
  protobuf_AddDesc_MessagePlayerInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessagePlayerInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, template__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, goldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, silvercoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, trainstrength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, trainintellect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, traintechnique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, trainagility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, stuntskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, knightstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, knightstateexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, worshipcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, freecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, stategreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, stateblue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, statepurple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, stateorange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bagmaxcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, qualitypro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, debutinfo_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessagePlayerInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessagePlayerInfo_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
}

void protobuf_AddDesc_MessagePlayerInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027MessagePlayerInfo.proto\022\007Message\"\317\004\n\nP"
    "layerInfo\022\020\n\010playerid\030\001 \001(\003\022\016\n\006userid\030\002 "
    "\001(\003\022\014\n\004name\030\003 \001(\t\022\020\n\010template\030\004 \001(\005\022\r\n\005l"
    "evel\030\005 \001(\005\022\020\n\010goldcoin\030\006 \001(\005\022\022\n\nsilverco"
    "in\030\007 \001(\005\022\016\n\006credit\030\010 \001(\005\022\013\n\003exp\030\t \001(\003\022\021\n"
    "\tlogintime\030\n \001(\003\022\022\n\nlogouttime\030\013 \001(\003\022\017\n\007"
    "stamina\030\014 \001(\005\022\025\n\rtrainstrength\030\r \001(\005\022\026\n\016"
    "trainintellect\030\016 \001(\005\022\026\n\016traintechnique\030\017"
    " \001(\005\022\024\n\014trainagility\030\020 \001(\005\022\022\n\nstuntskill"
    "\030\021 \001(\005\022\023\n\013knightstate\030\022 \001(\005\022\026\n\016knightsta"
    "teexp\030\023 \001(\005\022\r\n\005merit\030\024 \001(\005\022\024\n\014worshipcou"
    "nt\030\025 \001(\005\022\021\n\tfreecount\030\026 \001(\005\022\022\n\nstategree"
    "n\030\027 \001(\005\022\021\n\tstateblue\030\030 \001(\005\022\023\n\013statepurpl"
    "e\030\031 \001(\005\022\023\n\013stateorange\030\032 \001(\005\022\026\n\016bagmaxca"
    "pacity\030\033 \001(\005\022\017\n\007quality\030\034 \001(\005\022\022\n\nquality"
    "pro\030\035 \001(\005\022\021\n\tdebutinfo\030\036 \003(\003", 628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessagePlayerInfo.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessagePlayerInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessagePlayerInfo_2eproto {
  StaticDescriptorInitializer_MessagePlayerInfo_2eproto() {
    protobuf_AddDesc_MessagePlayerInfo_2eproto();
  }
} static_descriptor_initializer_MessagePlayerInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kPlayeridFieldNumber;
const int PlayerInfo::kUseridFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kTemplateFieldNumber;
const int PlayerInfo::kLevelFieldNumber;
const int PlayerInfo::kGoldcoinFieldNumber;
const int PlayerInfo::kSilvercoinFieldNumber;
const int PlayerInfo::kCreditFieldNumber;
const int PlayerInfo::kExpFieldNumber;
const int PlayerInfo::kLogintimeFieldNumber;
const int PlayerInfo::kLogouttimeFieldNumber;
const int PlayerInfo::kStaminaFieldNumber;
const int PlayerInfo::kTrainstrengthFieldNumber;
const int PlayerInfo::kTrainintellectFieldNumber;
const int PlayerInfo::kTraintechniqueFieldNumber;
const int PlayerInfo::kTrainagilityFieldNumber;
const int PlayerInfo::kStuntskillFieldNumber;
const int PlayerInfo::kKnightstateFieldNumber;
const int PlayerInfo::kKnightstateexpFieldNumber;
const int PlayerInfo::kMeritFieldNumber;
const int PlayerInfo::kWorshipcountFieldNumber;
const int PlayerInfo::kFreecountFieldNumber;
const int PlayerInfo::kStategreenFieldNumber;
const int PlayerInfo::kStateblueFieldNumber;
const int PlayerInfo::kStatepurpleFieldNumber;
const int PlayerInfo::kStateorangeFieldNumber;
const int PlayerInfo::kBagmaxcapacityFieldNumber;
const int PlayerInfo::kQualityFieldNumber;
const int PlayerInfo::kQualityproFieldNumber;
const int PlayerInfo::kDebutinfoFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  userid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  template__ = 0;
  level_ = 0;
  goldcoin_ = 0;
  silvercoin_ = 0;
  credit_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  logintime_ = GOOGLE_LONGLONG(0);
  logouttime_ = GOOGLE_LONGLONG(0);
  stamina_ = 0;
  trainstrength_ = 0;
  trainintellect_ = 0;
  traintechnique_ = 0;
  trainagility_ = 0;
  stuntskill_ = 0;
  knightstate_ = 0;
  knightstateexp_ = 0;
  merit_ = 0;
  worshipcount_ = 0;
  freecount_ = 0;
  stategreen_ = 0;
  stateblue_ = 0;
  statepurple_ = 0;
  stateorange_ = 0;
  bagmaxcapacity_ = 0;
  quality_ = 0;
  qualitypro_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePlayerInfo_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    userid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    template__ = 0;
    level_ = 0;
    goldcoin_ = 0;
    silvercoin_ = 0;
    credit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = GOOGLE_LONGLONG(0);
    logintime_ = GOOGLE_LONGLONG(0);
    logouttime_ = GOOGLE_LONGLONG(0);
    stamina_ = 0;
    trainstrength_ = 0;
    trainintellect_ = 0;
    traintechnique_ = 0;
    trainagility_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    stuntskill_ = 0;
    knightstate_ = 0;
    knightstateexp_ = 0;
    merit_ = 0;
    worshipcount_ = 0;
    freecount_ = 0;
    stategreen_ = 0;
    stateblue_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    statepurple_ = 0;
    stateorange_ = 0;
    bagmaxcapacity_ = 0;
    quality_ = 0;
    qualitypro_ = 0;
  }
  debutinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_template;
        break;
      }

      // optional int32 template = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template__)));
          set_has_template_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_goldcoin;
        break;
      }

      // optional int32 goldcoin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldcoin_)));
          set_has_goldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_silvercoin;
        break;
      }

      // optional int32 silvercoin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silvercoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silvercoin_)));
          set_has_silvercoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_credit;
        break;
      }

      // optional int32 credit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional int64 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_logintime;
        break;
      }

      // optional int64 logintime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_logouttime;
        break;
      }

      // optional int64 logouttime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logouttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logouttime_)));
          set_has_logouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_trainstrength;
        break;
      }

      // optional int32 trainstrength = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainstrength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trainstrength_)));
          set_has_trainstrength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_trainintellect;
        break;
      }

      // optional int32 trainintellect = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainintellect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trainintellect_)));
          set_has_trainintellect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_traintechnique;
        break;
      }

      // optional int32 traintechnique = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traintechnique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traintechnique_)));
          set_has_traintechnique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_trainagility;
        break;
      }

      // optional int32 trainagility = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainagility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trainagility_)));
          set_has_trainagility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_stuntskill;
        break;
      }

      // optional int32 stuntskill = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stuntskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stuntskill_)));
          set_has_stuntskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_knightstate;
        break;
      }

      // optional int32 knightstate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knightstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knightstate_)));
          set_has_knightstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_knightstateexp;
        break;
      }

      // optional int32 knightstateexp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knightstateexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knightstateexp_)));
          set_has_knightstateexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_merit;
        break;
      }

      // optional int32 merit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_worshipcount;
        break;
      }

      // optional int32 worshipcount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worshipcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worshipcount_)));
          set_has_worshipcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_freecount;
        break;
      }

      // optional int32 freecount = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freecount_)));
          set_has_freecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_stategreen;
        break;
      }

      // optional int32 stategreen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stategreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stategreen_)));
          set_has_stategreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_stateblue;
        break;
      }

      // optional int32 stateblue = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateblue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateblue_)));
          set_has_stateblue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_statepurple;
        break;
      }

      // optional int32 statepurple = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statepurple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statepurple_)));
          set_has_statepurple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_stateorange;
        break;
      }

      // optional int32 stateorange = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateorange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateorange_)));
          set_has_stateorange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bagmaxcapacity;
        break;
      }

      // optional int32 bagmaxcapacity = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagmaxcapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagmaxcapacity_)));
          set_has_bagmaxcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_quality;
        break;
      }

      // optional int32 quality = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_qualitypro;
        break;
      }

      // optional int32 qualitypro = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qualitypro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qualitypro_)));
          set_has_qualitypro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_debutinfo;
        break;
      }

      // repeated int64 debutinfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debutinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 240, input, this->mutable_debutinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_debutinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_debutinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 template = 4;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->template_(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 goldcoin = 6;
  if (has_goldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goldcoin(), output);
  }

  // optional int32 silvercoin = 7;
  if (has_silvercoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->silvercoin(), output);
  }

  // optional int32 credit = 8;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->credit(), output);
  }

  // optional int64 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->exp(), output);
  }

  // optional int64 logintime = 10;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->logintime(), output);
  }

  // optional int64 logouttime = 11;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->logouttime(), output);
  }

  // optional int32 stamina = 12;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stamina(), output);
  }

  // optional int32 trainstrength = 13;
  if (has_trainstrength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->trainstrength(), output);
  }

  // optional int32 trainintellect = 14;
  if (has_trainintellect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->trainintellect(), output);
  }

  // optional int32 traintechnique = 15;
  if (has_traintechnique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->traintechnique(), output);
  }

  // optional int32 trainagility = 16;
  if (has_trainagility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->trainagility(), output);
  }

  // optional int32 stuntskill = 17;
  if (has_stuntskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->stuntskill(), output);
  }

  // optional int32 knightstate = 18;
  if (has_knightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->knightstate(), output);
  }

  // optional int32 knightstateexp = 19;
  if (has_knightstateexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->knightstateexp(), output);
  }

  // optional int32 merit = 20;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->merit(), output);
  }

  // optional int32 worshipcount = 21;
  if (has_worshipcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->worshipcount(), output);
  }

  // optional int32 freecount = 22;
  if (has_freecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->freecount(), output);
  }

  // optional int32 stategreen = 23;
  if (has_stategreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->stategreen(), output);
  }

  // optional int32 stateblue = 24;
  if (has_stateblue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->stateblue(), output);
  }

  // optional int32 statepurple = 25;
  if (has_statepurple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->statepurple(), output);
  }

  // optional int32 stateorange = 26;
  if (has_stateorange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->stateorange(), output);
  }

  // optional int32 bagmaxcapacity = 27;
  if (has_bagmaxcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->bagmaxcapacity(), output);
  }

  // optional int32 quality = 28;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->quality(), output);
  }

  // optional int32 qualitypro = 29;
  if (has_qualitypro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->qualitypro(), output);
  }

  // repeated int64 debutinfo = 30;
  for (int i = 0; i < this->debutinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      30, this->debutinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 template = 4;
  if (has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->template_(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 goldcoin = 6;
  if (has_goldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goldcoin(), target);
  }

  // optional int32 silvercoin = 7;
  if (has_silvercoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->silvercoin(), target);
  }

  // optional int32 credit = 8;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->credit(), target);
  }

  // optional int64 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->exp(), target);
  }

  // optional int64 logintime = 10;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->logintime(), target);
  }

  // optional int64 logouttime = 11;
  if (has_logouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->logouttime(), target);
  }

  // optional int32 stamina = 12;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stamina(), target);
  }

  // optional int32 trainstrength = 13;
  if (has_trainstrength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->trainstrength(), target);
  }

  // optional int32 trainintellect = 14;
  if (has_trainintellect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->trainintellect(), target);
  }

  // optional int32 traintechnique = 15;
  if (has_traintechnique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->traintechnique(), target);
  }

  // optional int32 trainagility = 16;
  if (has_trainagility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->trainagility(), target);
  }

  // optional int32 stuntskill = 17;
  if (has_stuntskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->stuntskill(), target);
  }

  // optional int32 knightstate = 18;
  if (has_knightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->knightstate(), target);
  }

  // optional int32 knightstateexp = 19;
  if (has_knightstateexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->knightstateexp(), target);
  }

  // optional int32 merit = 20;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->merit(), target);
  }

  // optional int32 worshipcount = 21;
  if (has_worshipcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->worshipcount(), target);
  }

  // optional int32 freecount = 22;
  if (has_freecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->freecount(), target);
  }

  // optional int32 stategreen = 23;
  if (has_stategreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->stategreen(), target);
  }

  // optional int32 stateblue = 24;
  if (has_stateblue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->stateblue(), target);
  }

  // optional int32 statepurple = 25;
  if (has_statepurple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->statepurple(), target);
  }

  // optional int32 stateorange = 26;
  if (has_stateorange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->stateorange(), target);
  }

  // optional int32 bagmaxcapacity = 27;
  if (has_bagmaxcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->bagmaxcapacity(), target);
  }

  // optional int32 quality = 28;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->quality(), target);
  }

  // optional int32 qualitypro = 29;
  if (has_qualitypro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->qualitypro(), target);
  }

  // repeated int64 debutinfo = 30;
  for (int i = 0; i < this->debutinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(30, this->debutinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 template = 4;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 goldcoin = 6;
    if (has_goldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldcoin());
    }

    // optional int32 silvercoin = 7;
    if (has_silvercoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silvercoin());
    }

    // optional int32 credit = 8;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int64 logintime = 10;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // optional int64 logouttime = 11;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logouttime());
    }

    // optional int32 stamina = 12;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // optional int32 trainstrength = 13;
    if (has_trainstrength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trainstrength());
    }

    // optional int32 trainintellect = 14;
    if (has_trainintellect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trainintellect());
    }

    // optional int32 traintechnique = 15;
    if (has_traintechnique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traintechnique());
    }

    // optional int32 trainagility = 16;
    if (has_trainagility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trainagility());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 stuntskill = 17;
    if (has_stuntskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stuntskill());
    }

    // optional int32 knightstate = 18;
    if (has_knightstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knightstate());
    }

    // optional int32 knightstateexp = 19;
    if (has_knightstateexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knightstateexp());
    }

    // optional int32 merit = 20;
    if (has_merit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

    // optional int32 worshipcount = 21;
    if (has_worshipcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worshipcount());
    }

    // optional int32 freecount = 22;
    if (has_freecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freecount());
    }

    // optional int32 stategreen = 23;
    if (has_stategreen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stategreen());
    }

    // optional int32 stateblue = 24;
    if (has_stateblue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateblue());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 statepurple = 25;
    if (has_statepurple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statepurple());
    }

    // optional int32 stateorange = 26;
    if (has_stateorange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateorange());
    }

    // optional int32 bagmaxcapacity = 27;
    if (has_bagmaxcapacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagmaxcapacity());
    }

    // optional int32 quality = 28;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 qualitypro = 29;
    if (has_qualitypro()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qualitypro());
    }

  }
  // repeated int64 debutinfo = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->debutinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->debutinfo(i));
    }
    total_size += 2 * this->debutinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  debutinfo_.MergeFrom(from.debutinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_template_()) {
      set_template_(from.template_());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_goldcoin()) {
      set_goldcoin(from.goldcoin());
    }
    if (from.has_silvercoin()) {
      set_silvercoin(from.silvercoin());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_trainstrength()) {
      set_trainstrength(from.trainstrength());
    }
    if (from.has_trainintellect()) {
      set_trainintellect(from.trainintellect());
    }
    if (from.has_traintechnique()) {
      set_traintechnique(from.traintechnique());
    }
    if (from.has_trainagility()) {
      set_trainagility(from.trainagility());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stuntskill()) {
      set_stuntskill(from.stuntskill());
    }
    if (from.has_knightstate()) {
      set_knightstate(from.knightstate());
    }
    if (from.has_knightstateexp()) {
      set_knightstateexp(from.knightstateexp());
    }
    if (from.has_merit()) {
      set_merit(from.merit());
    }
    if (from.has_worshipcount()) {
      set_worshipcount(from.worshipcount());
    }
    if (from.has_freecount()) {
      set_freecount(from.freecount());
    }
    if (from.has_stategreen()) {
      set_stategreen(from.stategreen());
    }
    if (from.has_stateblue()) {
      set_stateblue(from.stateblue());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_statepurple()) {
      set_statepurple(from.statepurple());
    }
    if (from.has_stateorange()) {
      set_stateorange(from.stateorange());
    }
    if (from.has_bagmaxcapacity()) {
      set_bagmaxcapacity(from.bagmaxcapacity());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_qualitypro()) {
      set_qualitypro(from.qualitypro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(template__, other->template__);
    std::swap(level_, other->level_);
    std::swap(goldcoin_, other->goldcoin_);
    std::swap(silvercoin_, other->silvercoin_);
    std::swap(credit_, other->credit_);
    std::swap(exp_, other->exp_);
    std::swap(logintime_, other->logintime_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(stamina_, other->stamina_);
    std::swap(trainstrength_, other->trainstrength_);
    std::swap(trainintellect_, other->trainintellect_);
    std::swap(traintechnique_, other->traintechnique_);
    std::swap(trainagility_, other->trainagility_);
    std::swap(stuntskill_, other->stuntskill_);
    std::swap(knightstate_, other->knightstate_);
    std::swap(knightstateexp_, other->knightstateexp_);
    std::swap(merit_, other->merit_);
    std::swap(worshipcount_, other->worshipcount_);
    std::swap(freecount_, other->freecount_);
    std::swap(stategreen_, other->stategreen_);
    std::swap(stateblue_, other->stateblue_);
    std::swap(statepurple_, other->statepurple_);
    std::swap(stateorange_, other->stateorange_);
    std::swap(bagmaxcapacity_, other->bagmaxcapacity_);
    std::swap(quality_, other->quality_);
    std::swap(qualitypro_, other->qualitypro_);
    debutinfo_.Swap(&other->debutinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
