// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageRegistServer.proto

#ifndef PROTOBUF_MessageRegistServer_2eproto__INCLUDED
#define PROTOBUF_MessageRegistServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageRegistServer_2eproto();
void protobuf_AssignDesc_MessageRegistServer_2eproto();
void protobuf_ShutdownFile_MessageRegistServer_2eproto();

class RegistServer;

// ===================================================================

class RegistServer : public ::google::protobuf::Message {
 public:
  RegistServer();
  virtual ~RegistServer();

  RegistServer(const RegistServer& from);

  inline RegistServer& operator=(const RegistServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistServer& default_instance();

  void Swap(RegistServer* other);

  // implements Message ----------------------------------------------

  RegistServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistServer& from);
  void MergeFrom(const RegistServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 extport = 5;
  inline bool has_extport() const;
  inline void clear_extport();
  static const int kExtportFieldNumber = 5;
  inline ::google::protobuf::int32 extport() const;
  inline void set_extport(::google::protobuf::int32 value);

  // optional string extip = 6;
  inline bool has_extip() const;
  inline void clear_extip();
  static const int kExtipFieldNumber = 6;
  inline const ::std::string& extip() const;
  inline void set_extip(const ::std::string& value);
  inline void set_extip(const char* value);
  inline void set_extip(const char* value, size_t size);
  inline ::std::string* mutable_extip();
  inline ::std::string* release_extip();
  inline void set_allocated_extip(::std::string* extip);

  // optional int32 world = 7;
  inline bool has_world() const;
  inline void clear_world();
  static const int kWorldFieldNumber = 7;
  inline ::google::protobuf::int32 world() const;
  inline void set_world(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.RegistServer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_extport();
  inline void clear_has_extport();
  inline void set_has_extip();
  inline void clear_has_extip();
  inline void set_has_world();
  inline void clear_has_world();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 extport_;
  ::std::string* extip_;
  ::google::protobuf::int32 world_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MessageRegistServer_2eproto();
  friend void protobuf_AssignDesc_MessageRegistServer_2eproto();
  friend void protobuf_ShutdownFile_MessageRegistServer_2eproto();

  void InitAsDefaultInstance();
  static RegistServer* default_instance_;
};
// ===================================================================


// ===================================================================

// RegistServer

// optional int32 id = 1;
inline bool RegistServer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistServer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistServer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RegistServer::id() const {
  return id_;
}
inline void RegistServer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool RegistServer::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistServer::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistServer::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistServer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RegistServer::type() const {
  return type_;
}
inline void RegistServer::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 port = 3;
inline bool RegistServer::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegistServer::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegistServer::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegistServer::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 RegistServer::port() const {
  return port_;
}
inline void RegistServer::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional string ip = 4;
inline bool RegistServer::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegistServer::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegistServer::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegistServer::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RegistServer::ip() const {
  return *ip_;
}
inline void RegistServer::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void RegistServer::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void RegistServer::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegistServer::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* RegistServer::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegistServer::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 extport = 5;
inline bool RegistServer::has_extport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegistServer::set_has_extport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegistServer::clear_has_extport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegistServer::clear_extport() {
  extport_ = 0;
  clear_has_extport();
}
inline ::google::protobuf::int32 RegistServer::extport() const {
  return extport_;
}
inline void RegistServer::set_extport(::google::protobuf::int32 value) {
  set_has_extport();
  extport_ = value;
}

// optional string extip = 6;
inline bool RegistServer::has_extip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegistServer::set_has_extip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegistServer::clear_has_extip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegistServer::clear_extip() {
  if (extip_ != &::google::protobuf::internal::kEmptyString) {
    extip_->clear();
  }
  clear_has_extip();
}
inline const ::std::string& RegistServer::extip() const {
  return *extip_;
}
inline void RegistServer::set_extip(const ::std::string& value) {
  set_has_extip();
  if (extip_ == &::google::protobuf::internal::kEmptyString) {
    extip_ = new ::std::string;
  }
  extip_->assign(value);
}
inline void RegistServer::set_extip(const char* value) {
  set_has_extip();
  if (extip_ == &::google::protobuf::internal::kEmptyString) {
    extip_ = new ::std::string;
  }
  extip_->assign(value);
}
inline void RegistServer::set_extip(const char* value, size_t size) {
  set_has_extip();
  if (extip_ == &::google::protobuf::internal::kEmptyString) {
    extip_ = new ::std::string;
  }
  extip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegistServer::mutable_extip() {
  set_has_extip();
  if (extip_ == &::google::protobuf::internal::kEmptyString) {
    extip_ = new ::std::string;
  }
  return extip_;
}
inline ::std::string* RegistServer::release_extip() {
  clear_has_extip();
  if (extip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extip_;
    extip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegistServer::set_allocated_extip(::std::string* extip) {
  if (extip_ != &::google::protobuf::internal::kEmptyString) {
    delete extip_;
  }
  if (extip) {
    set_has_extip();
    extip_ = extip;
  } else {
    clear_has_extip();
    extip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 world = 7;
inline bool RegistServer::has_world() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegistServer::set_has_world() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegistServer::clear_has_world() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegistServer::clear_world() {
  world_ = 0;
  clear_has_world();
}
inline ::google::protobuf::int32 RegistServer::world() const {
  return world_;
}
inline void RegistServer::set_world(::google::protobuf::int32 value) {
  set_has_world();
  world_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageRegistServer_2eproto__INCLUDED
