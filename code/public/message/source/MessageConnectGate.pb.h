// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageConnectGate.proto

#ifndef PROTOBUF_MessageConnectGate_2eproto__INCLUDED
#define PROTOBUF_MessageConnectGate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageConnectGate_2eproto();
void protobuf_AssignDesc_MessageConnectGate_2eproto();
void protobuf_ShutdownFile_MessageConnectGate_2eproto();

class ConnectGate;

// ===================================================================

class ConnectGate : public ::google::protobuf::Message {
 public:
  ConnectGate();
  virtual ~ConnectGate();

  ConnectGate(const ConnectGate& from);

  inline ConnectGate& operator=(const ConnectGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectGate& default_instance();

  void Swap(ConnectGate* other);

  // implements Message ----------------------------------------------

  ConnectGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectGate& from);
  void MergeFrom(const ConnectGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int64 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 server = 5;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 5;
  inline ::google::protobuf::int32 server() const;
  inline void set_server(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.ConnectGate)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_server();
  inline void clear_has_server();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 key_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 server_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MessageConnectGate_2eproto();
  friend void protobuf_AssignDesc_MessageConnectGate_2eproto();
  friend void protobuf_ShutdownFile_MessageConnectGate_2eproto();

  void InitAsDefaultInstance();
  static ConnectGate* default_instance_;
};
// ===================================================================


// ===================================================================

// ConnectGate

// optional int64 uid = 1;
inline bool ConnectGate::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectGate::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectGate::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectGate::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 ConnectGate::uid() const {
  return uid_;
}
inline void ConnectGate::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 key = 2;
inline bool ConnectGate::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectGate::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectGate::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectGate::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 ConnectGate::key() const {
  return key_;
}
inline void ConnectGate::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// optional string ip = 3;
inline bool ConnectGate::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectGate::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectGate::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectGate::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ConnectGate::ip() const {
  return *ip_;
}
inline void ConnectGate::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ConnectGate::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ConnectGate::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectGate::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ConnectGate::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConnectGate::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool ConnectGate::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectGate::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectGate::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectGate::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ConnectGate::port() const {
  return port_;
}
inline void ConnectGate::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 server = 5;
inline bool ConnectGate::has_server() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectGate::set_has_server() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectGate::clear_has_server() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectGate::clear_server() {
  server_ = 0;
  clear_has_server();
}
inline ::google::protobuf::int32 ConnectGate::server() const {
  return server_;
}
inline void ConnectGate::set_server(::google::protobuf::int32 value) {
  set_has_server();
  server_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageConnectGate_2eproto__INCLUDED
