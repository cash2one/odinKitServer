// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageArenaSyncData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageArenaSyncData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* ArenaValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaSyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaWaitingAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaWaitingAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaWaitingDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaWaitingDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaWaitingDelAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaWaitingDelAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaCurrentAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaCurrentAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaCurrentDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaCurrentDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaCurrentUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaCurrentUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaCurrentDelAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaCurrentDelAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaModuleRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaModuleRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaModuleSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaModuleSyncData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageArenaSyncData_2eproto() {
  protobuf_AddDesc_MessageArenaSyncData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageArenaSyncData.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaValue_descriptor_ = file->message_type(0);
  static const int ArenaValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaValue, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaValue, value_),
  };
  ArenaValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaValue_descriptor_,
      ArenaValue::default_instance_,
      ArenaValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaValue));
  ArenaSaveData_descriptor_ = file->message_type(1);
  static const int ArenaSaveData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSaveData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSaveData, value_),
  };
  ArenaSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaSaveData_descriptor_,
      ArenaSaveData::default_instance_,
      ArenaSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaSaveData));
  ArenaSyncData_descriptor_ = file->message_type(2);
  static const int ArenaSyncData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSyncData, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSyncData, waiting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSyncData, current_),
  };
  ArenaSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaSyncData_descriptor_,
      ArenaSyncData::default_instance_,
      ArenaSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaSyncData));
  ArenaWaitingAdd_descriptor_ = file->message_type(3);
  static const int ArenaWaitingAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingAdd, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingAdd, stage_),
  };
  ArenaWaitingAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaWaitingAdd_descriptor_,
      ArenaWaitingAdd::default_instance_,
      ArenaWaitingAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaWaitingAdd));
  ArenaWaitingDel_descriptor_ = file->message_type(4);
  static const int ArenaWaitingDel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingDel, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingDel, stage_),
  };
  ArenaWaitingDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaWaitingDel_descriptor_,
      ArenaWaitingDel::default_instance_,
      ArenaWaitingDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaWaitingDel));
  ArenaWaitingDelAll_descriptor_ = file->message_type(5);
  static const int ArenaWaitingDelAll_offsets_[1] = {
  };
  ArenaWaitingDelAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaWaitingDelAll_descriptor_,
      ArenaWaitingDelAll::default_instance_,
      ArenaWaitingDelAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingDelAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaWaitingDelAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaWaitingDelAll));
  ArenaCurrentAdd_descriptor_ = file->message_type(6);
  static const int ArenaCurrentAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentAdd, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentAdd, stage_),
  };
  ArenaCurrentAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaCurrentAdd_descriptor_,
      ArenaCurrentAdd::default_instance_,
      ArenaCurrentAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaCurrentAdd));
  ArenaCurrentDel_descriptor_ = file->message_type(7);
  static const int ArenaCurrentDel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentDel, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentDel, stage_),
  };
  ArenaCurrentDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaCurrentDel_descriptor_,
      ArenaCurrentDel::default_instance_,
      ArenaCurrentDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaCurrentDel));
  ArenaCurrentUpdate_descriptor_ = file->message_type(8);
  static const int ArenaCurrentUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentUpdate, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentUpdate, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentUpdate, player_),
  };
  ArenaCurrentUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaCurrentUpdate_descriptor_,
      ArenaCurrentUpdate::default_instance_,
      ArenaCurrentUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaCurrentUpdate));
  ArenaCurrentDelAll_descriptor_ = file->message_type(9);
  static const int ArenaCurrentDelAll_offsets_[1] = {
  };
  ArenaCurrentDelAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaCurrentDelAll_descriptor_,
      ArenaCurrentDelAll::default_instance_,
      ArenaCurrentDelAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentDelAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaCurrentDelAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaCurrentDelAll));
  ArenaModuleRefresh_descriptor_ = file->message_type(10);
  static const int ArenaModuleRefresh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaModuleRefresh, type_),
  };
  ArenaModuleRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaModuleRefresh_descriptor_,
      ArenaModuleRefresh::default_instance_,
      ArenaModuleRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaModuleRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaModuleRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaModuleRefresh));
  ArenaModuleSyncData_descriptor_ = file->message_type(11);
  static const int ArenaModuleSyncData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaModuleSyncData, player_),
  };
  ArenaModuleSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaModuleSyncData_descriptor_,
      ArenaModuleSyncData::default_instance_,
      ArenaModuleSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaModuleSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaModuleSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaModuleSyncData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageArenaSyncData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaValue_descriptor_, &ArenaValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaSaveData_descriptor_, &ArenaSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaSyncData_descriptor_, &ArenaSyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaWaitingAdd_descriptor_, &ArenaWaitingAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaWaitingDel_descriptor_, &ArenaWaitingDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaWaitingDelAll_descriptor_, &ArenaWaitingDelAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaCurrentAdd_descriptor_, &ArenaCurrentAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaCurrentDel_descriptor_, &ArenaCurrentDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaCurrentUpdate_descriptor_, &ArenaCurrentUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaCurrentDelAll_descriptor_, &ArenaCurrentDelAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaModuleRefresh_descriptor_, &ArenaModuleRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaModuleSyncData_descriptor_, &ArenaModuleSyncData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageArenaSyncData_2eproto() {
  delete ArenaValue::default_instance_;
  delete ArenaValue_reflection_;
  delete ArenaSaveData::default_instance_;
  delete ArenaSaveData_reflection_;
  delete ArenaSyncData::default_instance_;
  delete ArenaSyncData_reflection_;
  delete ArenaWaitingAdd::default_instance_;
  delete ArenaWaitingAdd_reflection_;
  delete ArenaWaitingDel::default_instance_;
  delete ArenaWaitingDel_reflection_;
  delete ArenaWaitingDelAll::default_instance_;
  delete ArenaWaitingDelAll_reflection_;
  delete ArenaCurrentAdd::default_instance_;
  delete ArenaCurrentAdd_reflection_;
  delete ArenaCurrentDel::default_instance_;
  delete ArenaCurrentDel_reflection_;
  delete ArenaCurrentUpdate::default_instance_;
  delete ArenaCurrentUpdate_reflection_;
  delete ArenaCurrentDelAll::default_instance_;
  delete ArenaCurrentDelAll_reflection_;
  delete ArenaModuleRefresh::default_instance_;
  delete ArenaModuleRefresh_reflection_;
  delete ArenaModuleSyncData::default_instance_;
  delete ArenaModuleSyncData_reflection_;
}

void protobuf_AddDesc_MessageArenaSyncData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Message::protobuf_AddDesc_MessageArenaPlayerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032MessageArenaSyncData.proto\022\007Message\032\034M"
    "essageArenaPlayerData.proto\"*\n\nArenaValu"
    "e\022\r\n\005index\030\001 \001(\005\022\r\n\005value\030\002 \001(\003\"-\n\rArena"
    "SaveData\022\r\n\005index\030\001 \001(\005\022\r\n\005value\030\002 \001(\003\"\202"
    "\001\n\rArenaSyncData\022#\n\006values\030\001 \003(\0132\023.Messa"
    "ge.ArenaValue\022%\n\007waiting\030\002 \003(\0132\024.Message"
    ".ArenaPlayer\022%\n\007current\030\003 \003(\0132\024.Message."
    "ArenaPlayer\"G\n\017ArenaWaitingAdd\022%\n\007player"
    "s\030\001 \003(\0132\024.Message.ArenaPlayer\022\r\n\005stage\030\002"
    " \001(\005\"-\n\017ArenaWaitingDel\022\013\n\003pid\030\001 \001(\003\022\r\n\005"
    "stage\030\002 \001(\005\"\024\n\022ArenaWaitingDelAll\"G\n\017Are"
    "naCurrentAdd\022%\n\007players\030\001 \003(\0132\024.Message."
    "ArenaPlayer\022\r\n\005stage\030\002 \001(\005\"-\n\017ArenaCurre"
    "ntDel\022\013\n\003pid\030\001 \001(\003\022\r\n\005stage\030\002 \001(\005\"V\n\022Are"
    "naCurrentUpdate\022\r\n\005stage\030\001 \001(\005\022\013\n\003pid\030\002 "
    "\001(\003\022$\n\006player\030\003 \001(\0132\024.Message.ArenaPlaye"
    "r\"\024\n\022ArenaCurrentDelAll\"\"\n\022ArenaModuleRe"
    "fresh\022\014\n\004type\030\001 \001(\005\";\n\023ArenaModuleSyncDa"
    "ta\022$\n\006player\030\001 \001(\0132\024.Message.ArenaPlayer", 760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageArenaSyncData.proto", &protobuf_RegisterTypes);
  ArenaValue::default_instance_ = new ArenaValue();
  ArenaSaveData::default_instance_ = new ArenaSaveData();
  ArenaSyncData::default_instance_ = new ArenaSyncData();
  ArenaWaitingAdd::default_instance_ = new ArenaWaitingAdd();
  ArenaWaitingDel::default_instance_ = new ArenaWaitingDel();
  ArenaWaitingDelAll::default_instance_ = new ArenaWaitingDelAll();
  ArenaCurrentAdd::default_instance_ = new ArenaCurrentAdd();
  ArenaCurrentDel::default_instance_ = new ArenaCurrentDel();
  ArenaCurrentUpdate::default_instance_ = new ArenaCurrentUpdate();
  ArenaCurrentDelAll::default_instance_ = new ArenaCurrentDelAll();
  ArenaModuleRefresh::default_instance_ = new ArenaModuleRefresh();
  ArenaModuleSyncData::default_instance_ = new ArenaModuleSyncData();
  ArenaValue::default_instance_->InitAsDefaultInstance();
  ArenaSaveData::default_instance_->InitAsDefaultInstance();
  ArenaSyncData::default_instance_->InitAsDefaultInstance();
  ArenaWaitingAdd::default_instance_->InitAsDefaultInstance();
  ArenaWaitingDel::default_instance_->InitAsDefaultInstance();
  ArenaWaitingDelAll::default_instance_->InitAsDefaultInstance();
  ArenaCurrentAdd::default_instance_->InitAsDefaultInstance();
  ArenaCurrentDel::default_instance_->InitAsDefaultInstance();
  ArenaCurrentUpdate::default_instance_->InitAsDefaultInstance();
  ArenaCurrentDelAll::default_instance_->InitAsDefaultInstance();
  ArenaModuleRefresh::default_instance_->InitAsDefaultInstance();
  ArenaModuleSyncData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageArenaSyncData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageArenaSyncData_2eproto {
  StaticDescriptorInitializer_MessageArenaSyncData_2eproto() {
    protobuf_AddDesc_MessageArenaSyncData_2eproto();
  }
} static_descriptor_initializer_MessageArenaSyncData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaValue::kIndexFieldNumber;
const int ArenaValue::kValueFieldNumber;
#endif  // !_MSC_VER

ArenaValue::ArenaValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaValue::InitAsDefaultInstance() {
}

ArenaValue::ArenaValue(const ArenaValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaValue::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaValue::~ArenaValue() {
  SharedDtor();
}

void ArenaValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaValue_descriptor_;
}

const ArenaValue& ArenaValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaValue* ArenaValue::default_instance_ = NULL;

ArenaValue* ArenaValue::New() const {
  return new ArenaValue;
}

void ArenaValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaValue::MergeFrom(const ArenaValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaValue::CopyFrom(const ArenaValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaValue::IsInitialized() const {

  return true;
}

void ArenaValue::Swap(ArenaValue* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaValue_descriptor_;
  metadata.reflection = ArenaValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaSaveData::kIndexFieldNumber;
const int ArenaSaveData::kValueFieldNumber;
#endif  // !_MSC_VER

ArenaSaveData::ArenaSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaSaveData::InitAsDefaultInstance() {
}

ArenaSaveData::ArenaSaveData(const ArenaSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaSaveData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaSaveData::~ArenaSaveData() {
  SharedDtor();
}

void ArenaSaveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaSaveData_descriptor_;
}

const ArenaSaveData& ArenaSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaSaveData* ArenaSaveData::default_instance_ = NULL;

ArenaSaveData* ArenaSaveData::New() const {
  return new ArenaSaveData;
}

void ArenaSaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaSaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaSaveData::MergeFrom(const ArenaSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaSaveData::CopyFrom(const ArenaSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaSaveData::IsInitialized() const {

  return true;
}

void ArenaSaveData::Swap(ArenaSaveData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaSaveData_descriptor_;
  metadata.reflection = ArenaSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaSyncData::kValuesFieldNumber;
const int ArenaSyncData::kWaitingFieldNumber;
const int ArenaSyncData::kCurrentFieldNumber;
#endif  // !_MSC_VER

ArenaSyncData::ArenaSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaSyncData::InitAsDefaultInstance() {
}

ArenaSyncData::ArenaSyncData(const ArenaSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaSyncData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaSyncData::~ArenaSyncData() {
  SharedDtor();
}

void ArenaSyncData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaSyncData_descriptor_;
}

const ArenaSyncData& ArenaSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaSyncData* ArenaSyncData::default_instance_ = NULL;

ArenaSyncData* ArenaSyncData::New() const {
  return new ArenaSyncData;
}

void ArenaSyncData::Clear() {
  values_.Clear();
  waiting_.Clear();
  current_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.ArenaValue values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectTag(18)) goto parse_waiting;
        break;
      }

      // repeated .Message.ArenaPlayer waiting = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waiting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waiting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_waiting;
        if (input->ExpectTag(26)) goto parse_current;
        break;
      }

      // repeated .Message.ArenaPlayer current = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_current()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_current;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.ArenaValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  // repeated .Message.ArenaPlayer waiting = 2;
  for (int i = 0; i < this->waiting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waiting(i), output);
  }

  // repeated .Message.ArenaPlayer current = 3;
  for (int i = 0; i < this->current_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->current(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.ArenaValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }

  // repeated .Message.ArenaPlayer waiting = 2;
  for (int i = 0; i < this->waiting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->waiting(i), target);
  }

  // repeated .Message.ArenaPlayer current = 3;
  for (int i = 0; i < this->current_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->current(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaSyncData::ByteSize() const {
  int total_size = 0;

  // repeated .Message.ArenaValue values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  // repeated .Message.ArenaPlayer waiting = 2;
  total_size += 1 * this->waiting_size();
  for (int i = 0; i < this->waiting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waiting(i));
  }

  // repeated .Message.ArenaPlayer current = 3;
  total_size += 1 * this->current_size();
  for (int i = 0; i < this->current_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->current(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaSyncData::MergeFrom(const ArenaSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  waiting_.MergeFrom(from.waiting_);
  current_.MergeFrom(from.current_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaSyncData::CopyFrom(const ArenaSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaSyncData::IsInitialized() const {

  return true;
}

void ArenaSyncData::Swap(ArenaSyncData* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    waiting_.Swap(&other->waiting_);
    current_.Swap(&other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaSyncData_descriptor_;
  metadata.reflection = ArenaSyncData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaWaitingAdd::kPlayersFieldNumber;
const int ArenaWaitingAdd::kStageFieldNumber;
#endif  // !_MSC_VER

ArenaWaitingAdd::ArenaWaitingAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaWaitingAdd::InitAsDefaultInstance() {
}

ArenaWaitingAdd::ArenaWaitingAdd(const ArenaWaitingAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaWaitingAdd::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaWaitingAdd::~ArenaWaitingAdd() {
  SharedDtor();
}

void ArenaWaitingAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaWaitingAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaWaitingAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaWaitingAdd_descriptor_;
}

const ArenaWaitingAdd& ArenaWaitingAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaWaitingAdd* ArenaWaitingAdd::default_instance_ = NULL;

ArenaWaitingAdd* ArenaWaitingAdd::New() const {
  return new ArenaWaitingAdd;
}

void ArenaWaitingAdd::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    stage_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaWaitingAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.ArenaPlayer players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaWaitingAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.ArenaPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaWaitingAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.ArenaPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaWaitingAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

  }
  // repeated .Message.ArenaPlayer players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaWaitingAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaWaitingAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaWaitingAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaWaitingAdd::MergeFrom(const ArenaWaitingAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaWaitingAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaWaitingAdd::CopyFrom(const ArenaWaitingAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaWaitingAdd::IsInitialized() const {

  return true;
}

void ArenaWaitingAdd::Swap(ArenaWaitingAdd* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaWaitingAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaWaitingAdd_descriptor_;
  metadata.reflection = ArenaWaitingAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaWaitingDel::kPidFieldNumber;
const int ArenaWaitingDel::kStageFieldNumber;
#endif  // !_MSC_VER

ArenaWaitingDel::ArenaWaitingDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaWaitingDel::InitAsDefaultInstance() {
}

ArenaWaitingDel::ArenaWaitingDel(const ArenaWaitingDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaWaitingDel::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaWaitingDel::~ArenaWaitingDel() {
  SharedDtor();
}

void ArenaWaitingDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaWaitingDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaWaitingDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaWaitingDel_descriptor_;
}

const ArenaWaitingDel& ArenaWaitingDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaWaitingDel* ArenaWaitingDel::default_instance_ = NULL;

ArenaWaitingDel* ArenaWaitingDel::New() const {
  return new ArenaWaitingDel;
}

void ArenaWaitingDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    stage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaWaitingDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaWaitingDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaWaitingDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaWaitingDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaWaitingDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaWaitingDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaWaitingDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaWaitingDel::MergeFrom(const ArenaWaitingDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaWaitingDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaWaitingDel::CopyFrom(const ArenaWaitingDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaWaitingDel::IsInitialized() const {

  return true;
}

void ArenaWaitingDel::Swap(ArenaWaitingDel* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaWaitingDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaWaitingDel_descriptor_;
  metadata.reflection = ArenaWaitingDel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaWaitingDelAll::ArenaWaitingDelAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaWaitingDelAll::InitAsDefaultInstance() {
}

ArenaWaitingDelAll::ArenaWaitingDelAll(const ArenaWaitingDelAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaWaitingDelAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaWaitingDelAll::~ArenaWaitingDelAll() {
  SharedDtor();
}

void ArenaWaitingDelAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaWaitingDelAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaWaitingDelAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaWaitingDelAll_descriptor_;
}

const ArenaWaitingDelAll& ArenaWaitingDelAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaWaitingDelAll* ArenaWaitingDelAll::default_instance_ = NULL;

ArenaWaitingDelAll* ArenaWaitingDelAll::New() const {
  return new ArenaWaitingDelAll;
}

void ArenaWaitingDelAll::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaWaitingDelAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ArenaWaitingDelAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaWaitingDelAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaWaitingDelAll::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaWaitingDelAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaWaitingDelAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaWaitingDelAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaWaitingDelAll::MergeFrom(const ArenaWaitingDelAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaWaitingDelAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaWaitingDelAll::CopyFrom(const ArenaWaitingDelAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaWaitingDelAll::IsInitialized() const {

  return true;
}

void ArenaWaitingDelAll::Swap(ArenaWaitingDelAll* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaWaitingDelAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaWaitingDelAll_descriptor_;
  metadata.reflection = ArenaWaitingDelAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaCurrentAdd::kPlayersFieldNumber;
const int ArenaCurrentAdd::kStageFieldNumber;
#endif  // !_MSC_VER

ArenaCurrentAdd::ArenaCurrentAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaCurrentAdd::InitAsDefaultInstance() {
}

ArenaCurrentAdd::ArenaCurrentAdd(const ArenaCurrentAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaCurrentAdd::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaCurrentAdd::~ArenaCurrentAdd() {
  SharedDtor();
}

void ArenaCurrentAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaCurrentAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaCurrentAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaCurrentAdd_descriptor_;
}

const ArenaCurrentAdd& ArenaCurrentAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaCurrentAdd* ArenaCurrentAdd::default_instance_ = NULL;

ArenaCurrentAdd* ArenaCurrentAdd::New() const {
  return new ArenaCurrentAdd;
}

void ArenaCurrentAdd::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    stage_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaCurrentAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.ArenaPlayer players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaCurrentAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.ArenaPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaCurrentAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.ArenaPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaCurrentAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

  }
  // repeated .Message.ArenaPlayer players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaCurrentAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaCurrentAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaCurrentAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaCurrentAdd::MergeFrom(const ArenaCurrentAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaCurrentAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaCurrentAdd::CopyFrom(const ArenaCurrentAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaCurrentAdd::IsInitialized() const {

  return true;
}

void ArenaCurrentAdd::Swap(ArenaCurrentAdd* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaCurrentAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaCurrentAdd_descriptor_;
  metadata.reflection = ArenaCurrentAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaCurrentDel::kPidFieldNumber;
const int ArenaCurrentDel::kStageFieldNumber;
#endif  // !_MSC_VER

ArenaCurrentDel::ArenaCurrentDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaCurrentDel::InitAsDefaultInstance() {
}

ArenaCurrentDel::ArenaCurrentDel(const ArenaCurrentDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaCurrentDel::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaCurrentDel::~ArenaCurrentDel() {
  SharedDtor();
}

void ArenaCurrentDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaCurrentDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaCurrentDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaCurrentDel_descriptor_;
}

const ArenaCurrentDel& ArenaCurrentDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaCurrentDel* ArenaCurrentDel::default_instance_ = NULL;

ArenaCurrentDel* ArenaCurrentDel::New() const {
  return new ArenaCurrentDel;
}

void ArenaCurrentDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    stage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaCurrentDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaCurrentDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaCurrentDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaCurrentDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaCurrentDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaCurrentDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaCurrentDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaCurrentDel::MergeFrom(const ArenaCurrentDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaCurrentDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaCurrentDel::CopyFrom(const ArenaCurrentDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaCurrentDel::IsInitialized() const {

  return true;
}

void ArenaCurrentDel::Swap(ArenaCurrentDel* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaCurrentDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaCurrentDel_descriptor_;
  metadata.reflection = ArenaCurrentDel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaCurrentUpdate::kStageFieldNumber;
const int ArenaCurrentUpdate::kPidFieldNumber;
const int ArenaCurrentUpdate::kPlayerFieldNumber;
#endif  // !_MSC_VER

ArenaCurrentUpdate::ArenaCurrentUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaCurrentUpdate::InitAsDefaultInstance() {
  player_ = const_cast< ::Message::ArenaPlayer*>(&::Message::ArenaPlayer::default_instance());
}

ArenaCurrentUpdate::ArenaCurrentUpdate(const ArenaCurrentUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaCurrentUpdate::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaCurrentUpdate::~ArenaCurrentUpdate() {
  SharedDtor();
}

void ArenaCurrentUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void ArenaCurrentUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaCurrentUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaCurrentUpdate_descriptor_;
}

const ArenaCurrentUpdate& ArenaCurrentUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaCurrentUpdate* ArenaCurrentUpdate::default_instance_ = NULL;

ArenaCurrentUpdate* ArenaCurrentUpdate::New() const {
  return new ArenaCurrentUpdate;
}

void ArenaCurrentUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    pid_ = GOOGLE_LONGLONG(0);
    if (has_player()) {
      if (player_ != NULL) player_->::Message::ArenaPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaCurrentUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player;
        break;
      }

      // optional .Message.ArenaPlayer player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaCurrentUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // optional .Message.ArenaPlayer player = 3;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaCurrentUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  // optional .Message.ArenaPlayer player = 3;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaCurrentUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional .Message.ArenaPlayer player = 3;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaCurrentUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaCurrentUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaCurrentUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaCurrentUpdate::MergeFrom(const ArenaCurrentUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_player()) {
      mutable_player()->::Message::ArenaPlayer::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaCurrentUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaCurrentUpdate::CopyFrom(const ArenaCurrentUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaCurrentUpdate::IsInitialized() const {

  return true;
}

void ArenaCurrentUpdate::Swap(ArenaCurrentUpdate* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(pid_, other->pid_);
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaCurrentUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaCurrentUpdate_descriptor_;
  metadata.reflection = ArenaCurrentUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaCurrentDelAll::ArenaCurrentDelAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaCurrentDelAll::InitAsDefaultInstance() {
}

ArenaCurrentDelAll::ArenaCurrentDelAll(const ArenaCurrentDelAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaCurrentDelAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaCurrentDelAll::~ArenaCurrentDelAll() {
  SharedDtor();
}

void ArenaCurrentDelAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaCurrentDelAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaCurrentDelAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaCurrentDelAll_descriptor_;
}

const ArenaCurrentDelAll& ArenaCurrentDelAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaCurrentDelAll* ArenaCurrentDelAll::default_instance_ = NULL;

ArenaCurrentDelAll* ArenaCurrentDelAll::New() const {
  return new ArenaCurrentDelAll;
}

void ArenaCurrentDelAll::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaCurrentDelAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ArenaCurrentDelAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaCurrentDelAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaCurrentDelAll::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaCurrentDelAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaCurrentDelAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaCurrentDelAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaCurrentDelAll::MergeFrom(const ArenaCurrentDelAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaCurrentDelAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaCurrentDelAll::CopyFrom(const ArenaCurrentDelAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaCurrentDelAll::IsInitialized() const {

  return true;
}

void ArenaCurrentDelAll::Swap(ArenaCurrentDelAll* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaCurrentDelAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaCurrentDelAll_descriptor_;
  metadata.reflection = ArenaCurrentDelAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaModuleRefresh::kTypeFieldNumber;
#endif  // !_MSC_VER

ArenaModuleRefresh::ArenaModuleRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaModuleRefresh::InitAsDefaultInstance() {
}

ArenaModuleRefresh::ArenaModuleRefresh(const ArenaModuleRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaModuleRefresh::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaModuleRefresh::~ArenaModuleRefresh() {
  SharedDtor();
}

void ArenaModuleRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaModuleRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaModuleRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaModuleRefresh_descriptor_;
}

const ArenaModuleRefresh& ArenaModuleRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaModuleRefresh* ArenaModuleRefresh::default_instance_ = NULL;

ArenaModuleRefresh* ArenaModuleRefresh::New() const {
  return new ArenaModuleRefresh;
}

void ArenaModuleRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaModuleRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaModuleRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaModuleRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaModuleRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaModuleRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaModuleRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaModuleRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaModuleRefresh::MergeFrom(const ArenaModuleRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaModuleRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaModuleRefresh::CopyFrom(const ArenaModuleRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaModuleRefresh::IsInitialized() const {

  return true;
}

void ArenaModuleRefresh::Swap(ArenaModuleRefresh* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaModuleRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaModuleRefresh_descriptor_;
  metadata.reflection = ArenaModuleRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaModuleSyncData::kPlayerFieldNumber;
#endif  // !_MSC_VER

ArenaModuleSyncData::ArenaModuleSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaModuleSyncData::InitAsDefaultInstance() {
  player_ = const_cast< ::Message::ArenaPlayer*>(&::Message::ArenaPlayer::default_instance());
}

ArenaModuleSyncData::ArenaModuleSyncData(const ArenaModuleSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaModuleSyncData::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaModuleSyncData::~ArenaModuleSyncData() {
  SharedDtor();
}

void ArenaModuleSyncData::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void ArenaModuleSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaModuleSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaModuleSyncData_descriptor_;
}

const ArenaModuleSyncData& ArenaModuleSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaSyncData_2eproto();
  return *default_instance_;
}

ArenaModuleSyncData* ArenaModuleSyncData::default_instance_ = NULL;

ArenaModuleSyncData* ArenaModuleSyncData::New() const {
  return new ArenaModuleSyncData;
}

void ArenaModuleSyncData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::Message::ArenaPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaModuleSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Message.ArenaPlayer player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaModuleSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Message.ArenaPlayer player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaModuleSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Message.ArenaPlayer player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaModuleSyncData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Message.ArenaPlayer player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaModuleSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaModuleSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaModuleSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaModuleSyncData::MergeFrom(const ArenaModuleSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::Message::ArenaPlayer::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaModuleSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaModuleSyncData::CopyFrom(const ArenaModuleSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaModuleSyncData::IsInitialized() const {

  return true;
}

void ArenaModuleSyncData::Swap(ArenaModuleSyncData* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaModuleSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaModuleSyncData_descriptor_;
  metadata.reflection = ArenaModuleSyncData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
