// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageGameobj.proto

#ifndef PROTOBUF_MessageGameobj_2eproto__INCLUDED
#define PROTOBUF_MessageGameobj_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageGameobj_2eproto();
void protobuf_AssignDesc_MessageGameobj_2eproto();
void protobuf_ShutdownFile_MessageGameobj_2eproto();

class SyncObjField;
class ReqPlayerData;

// ===================================================================

class SyncObjField : public ::google::protobuf::Message {
 public:
  SyncObjField();
  virtual ~SyncObjField();

  SyncObjField(const SyncObjField& from);

  inline SyncObjField& operator=(const SyncObjField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncObjField& default_instance();

  void Swap(SyncObjField* other);

  // implements Message ----------------------------------------------

  SyncObjField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncObjField& from);
  void MergeFrom(const SyncObjField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int64 mapkey = 4;
  inline bool has_mapkey() const;
  inline void clear_mapkey();
  static const int kMapkeyFieldNumber = 4;
  inline ::google::protobuf::int64 mapkey() const;
  inline void set_mapkey(::google::protobuf::int64 value);

  // optional string jsonstr = 5;
  inline bool has_jsonstr() const;
  inline void clear_jsonstr();
  static const int kJsonstrFieldNumber = 5;
  inline const ::std::string& jsonstr() const;
  inline void set_jsonstr(const ::std::string& value);
  inline void set_jsonstr(const char* value);
  inline void set_jsonstr(const char* value, size_t size);
  inline ::std::string* mutable_jsonstr();
  inline ::std::string* release_jsonstr();
  inline void set_allocated_jsonstr(::std::string* jsonstr);

  // @@protoc_insertion_point(class_scope:Message.SyncObjField)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_mapkey();
  inline void clear_has_mapkey();
  inline void set_has_jsonstr();
  inline void clear_has_jsonstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* type_;
  ::std::string* key_;
  ::google::protobuf::int64 mapkey_;
  ::std::string* jsonstr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MessageGameobj_2eproto();
  friend void protobuf_AssignDesc_MessageGameobj_2eproto();
  friend void protobuf_ShutdownFile_MessageGameobj_2eproto();

  void InitAsDefaultInstance();
  static SyncObjField* default_instance_;
};
// -------------------------------------------------------------------

class ReqPlayerData : public ::google::protobuf::Message {
 public:
  ReqPlayerData();
  virtual ~ReqPlayerData();

  ReqPlayerData(const ReqPlayerData& from);

  inline ReqPlayerData& operator=(const ReqPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPlayerData& default_instance();

  void Swap(ReqPlayerData* other);

  // implements Message ----------------------------------------------

  ReqPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPlayerData& from);
  void MergeFrom(const ReqPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:Message.ReqPlayerData)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;
  ::std::string* type_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessageGameobj_2eproto();
  friend void protobuf_AssignDesc_MessageGameobj_2eproto();
  friend void protobuf_ShutdownFile_MessageGameobj_2eproto();

  void InitAsDefaultInstance();
  static ReqPlayerData* default_instance_;
};
// ===================================================================


// ===================================================================

// SyncObjField

// optional int64 id = 1;
inline bool SyncObjField::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncObjField::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncObjField::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncObjField::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 SyncObjField::id() const {
  return id_;
}
inline void SyncObjField::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string type = 2;
inline bool SyncObjField::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncObjField::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncObjField::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncObjField::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& SyncObjField::type() const {
  return *type_;
}
inline void SyncObjField::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SyncObjField::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SyncObjField::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncObjField::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* SyncObjField::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncObjField::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string key = 3;
inline bool SyncObjField::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncObjField::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncObjField::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncObjField::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SyncObjField::key() const {
  return *key_;
}
inline void SyncObjField::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SyncObjField::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SyncObjField::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncObjField::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SyncObjField::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncObjField::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 mapkey = 4;
inline bool SyncObjField::has_mapkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncObjField::set_has_mapkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncObjField::clear_has_mapkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncObjField::clear_mapkey() {
  mapkey_ = GOOGLE_LONGLONG(0);
  clear_has_mapkey();
}
inline ::google::protobuf::int64 SyncObjField::mapkey() const {
  return mapkey_;
}
inline void SyncObjField::set_mapkey(::google::protobuf::int64 value) {
  set_has_mapkey();
  mapkey_ = value;
}

// optional string jsonstr = 5;
inline bool SyncObjField::has_jsonstr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncObjField::set_has_jsonstr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncObjField::clear_has_jsonstr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncObjField::clear_jsonstr() {
  if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
    jsonstr_->clear();
  }
  clear_has_jsonstr();
}
inline const ::std::string& SyncObjField::jsonstr() const {
  return *jsonstr_;
}
inline void SyncObjField::set_jsonstr(const ::std::string& value) {
  set_has_jsonstr();
  if (jsonstr_ == &::google::protobuf::internal::kEmptyString) {
    jsonstr_ = new ::std::string;
  }
  jsonstr_->assign(value);
}
inline void SyncObjField::set_jsonstr(const char* value) {
  set_has_jsonstr();
  if (jsonstr_ == &::google::protobuf::internal::kEmptyString) {
    jsonstr_ = new ::std::string;
  }
  jsonstr_->assign(value);
}
inline void SyncObjField::set_jsonstr(const char* value, size_t size) {
  set_has_jsonstr();
  if (jsonstr_ == &::google::protobuf::internal::kEmptyString) {
    jsonstr_ = new ::std::string;
  }
  jsonstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncObjField::mutable_jsonstr() {
  set_has_jsonstr();
  if (jsonstr_ == &::google::protobuf::internal::kEmptyString) {
    jsonstr_ = new ::std::string;
  }
  return jsonstr_;
}
inline ::std::string* SyncObjField::release_jsonstr() {
  clear_has_jsonstr();
  if (jsonstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jsonstr_;
    jsonstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncObjField::set_allocated_jsonstr(::std::string* jsonstr) {
  if (jsonstr_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonstr_;
  }
  if (jsonstr) {
    set_has_jsonstr();
    jsonstr_ = jsonstr;
  } else {
    clear_has_jsonstr();
    jsonstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqPlayerData

// optional int64 pid = 1;
inline bool ReqPlayerData::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPlayerData::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPlayerData::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPlayerData::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 ReqPlayerData::pid() const {
  return pid_;
}
inline void ReqPlayerData::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional string type = 2;
inline bool ReqPlayerData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPlayerData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPlayerData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPlayerData::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ReqPlayerData::type() const {
  return *type_;
}
inline void ReqPlayerData::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ReqPlayerData::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ReqPlayerData::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqPlayerData::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* ReqPlayerData::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqPlayerData::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string key = 3;
inline bool ReqPlayerData::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqPlayerData::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqPlayerData::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqPlayerData::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ReqPlayerData::key() const {
  return *key_;
}
inline void ReqPlayerData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ReqPlayerData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ReqPlayerData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqPlayerData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ReqPlayerData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqPlayerData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageGameobj_2eproto__INCLUDED
