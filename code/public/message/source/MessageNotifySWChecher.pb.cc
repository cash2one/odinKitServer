// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageNotifySWChecher.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageNotifySWChecher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* NotifySWChecker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySWChecker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageNotifySWChecher_2eproto() {
  protobuf_AddDesc_MessageNotifySWChecher_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageNotifySWChecher.proto");
  GOOGLE_CHECK(file != NULL);
  NotifySWChecker_descriptor_ = file->message_type(0);
  static const int NotifySWChecker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySWChecker, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySWChecker, accesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySWChecker, paysrvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySWChecker, srvport_),
  };
  NotifySWChecker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySWChecker_descriptor_,
      NotifySWChecker::default_instance_,
      NotifySWChecker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySWChecker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySWChecker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySWChecker));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageNotifySWChecher_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySWChecker_descriptor_, &NotifySWChecker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageNotifySWChecher_2eproto() {
  delete NotifySWChecker::default_instance_;
  delete NotifySWChecker_reflection_;
}

void protobuf_AddDesc_MessageNotifySWChecher_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034MessageNotifySWChecher.proto\022\007Message\""
    "W\n\017NotifySWChecker\022\014\n\004guid\030\001 \001(\t\022\023\n\013acce"
    "ssToken\030\002 \001(\t\022\020\n\010paysrvip\030\003 \001(\t\022\017\n\007srvpo"
    "rt\030\004 \001(\005", 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageNotifySWChecher.proto", &protobuf_RegisterTypes);
  NotifySWChecker::default_instance_ = new NotifySWChecker();
  NotifySWChecker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageNotifySWChecher_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageNotifySWChecher_2eproto {
  StaticDescriptorInitializer_MessageNotifySWChecher_2eproto() {
    protobuf_AddDesc_MessageNotifySWChecher_2eproto();
  }
} static_descriptor_initializer_MessageNotifySWChecher_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifySWChecker::kGuidFieldNumber;
const int NotifySWChecker::kAccessTokenFieldNumber;
const int NotifySWChecker::kPaysrvipFieldNumber;
const int NotifySWChecker::kSrvportFieldNumber;
#endif  // !_MSC_VER

NotifySWChecker::NotifySWChecker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySWChecker::InitAsDefaultInstance() {
}

NotifySWChecker::NotifySWChecker(const NotifySWChecker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySWChecker::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paysrvip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srvport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySWChecker::~NotifySWChecker() {
  SharedDtor();
}

void NotifySWChecker::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    delete accesstoken_;
  }
  if (paysrvip_ != &::google::protobuf::internal::kEmptyString) {
    delete paysrvip_;
  }
  if (this != default_instance_) {
  }
}

void NotifySWChecker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySWChecker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySWChecker_descriptor_;
}

const NotifySWChecker& NotifySWChecker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageNotifySWChecher_2eproto();
  return *default_instance_;
}

NotifySWChecker* NotifySWChecker::default_instance_ = NULL;

NotifySWChecker* NotifySWChecker::New() const {
  return new NotifySWChecker;
}

void NotifySWChecker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
        accesstoken_->clear();
      }
    }
    if (has_paysrvip()) {
      if (paysrvip_ != &::google::protobuf::internal::kEmptyString) {
        paysrvip_->clear();
      }
    }
    srvport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySWChecker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accessToken;
        break;
      }

      // optional string accessToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paysrvip;
        break;
      }

      // optional string paysrvip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paysrvip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paysrvip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paysrvip().data(), this->paysrvip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_srvport;
        break;
      }

      // optional int32 srvport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srvport_)));
          set_has_srvport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySWChecker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guid(), output);
  }

  // optional string accessToken = 2;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accesstoken(), output);
  }

  // optional string paysrvip = 3;
  if (has_paysrvip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paysrvip().data(), this->paysrvip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->paysrvip(), output);
  }

  // optional int32 srvport = 4;
  if (has_srvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->srvport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySWChecker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional string accessToken = 2;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accesstoken(), target);
  }

  // optional string paysrvip = 3;
  if (has_paysrvip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paysrvip().data(), this->paysrvip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->paysrvip(), target);
  }

  // optional int32 srvport = 4;
  if (has_srvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->srvport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySWChecker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string accessToken = 2;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // optional string paysrvip = 3;
    if (has_paysrvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paysrvip());
    }

    // optional int32 srvport = 4;
    if (has_srvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srvport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySWChecker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySWChecker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySWChecker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySWChecker::MergeFrom(const NotifySWChecker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
    if (from.has_paysrvip()) {
      set_paysrvip(from.paysrvip());
    }
    if (from.has_srvport()) {
      set_srvport(from.srvport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySWChecker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySWChecker::CopyFrom(const NotifySWChecker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySWChecker::IsInitialized() const {

  return true;
}

void NotifySWChecker::Swap(NotifySWChecker* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(paysrvip_, other->paysrvip_);
    std::swap(srvport_, other->srvport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySWChecker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySWChecker_descriptor_;
  metadata.reflection = NotifySWChecker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
