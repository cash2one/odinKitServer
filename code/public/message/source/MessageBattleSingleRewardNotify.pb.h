// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBattleSingleRewardNotify.proto

#ifndef PROTOBUF_MessageBattleSingleRewardNotify_2eproto__INCLUDED
#define PROTOBUF_MessageBattleSingleRewardNotify_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageBattleSingleRewardNotify_2eproto();
void protobuf_AssignDesc_MessageBattleSingleRewardNotify_2eproto();
void protobuf_ShutdownFile_MessageBattleSingleRewardNotify_2eproto();

class BattleSingleRewardNotify;

// ===================================================================

class BattleSingleRewardNotify : public ::google::protobuf::Message {
 public:
  BattleSingleRewardNotify();
  virtual ~BattleSingleRewardNotify();

  BattleSingleRewardNotify(const BattleSingleRewardNotify& from);

  inline BattleSingleRewardNotify& operator=(const BattleSingleRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleSingleRewardNotify& default_instance();

  void Swap(BattleSingleRewardNotify* other);

  // implements Message ----------------------------------------------

  BattleSingleRewardNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleSingleRewardNotify& from);
  void MergeFrom(const BattleSingleRewardNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rewardexp = 1;
  inline bool has_rewardexp() const;
  inline void clear_rewardexp();
  static const int kRewardexpFieldNumber = 1;
  inline ::google::protobuf::int32 rewardexp() const;
  inline void set_rewardexp(::google::protobuf::int32 value);

  // optional int32 rewardstateexp = 2;
  inline bool has_rewardstateexp() const;
  inline void clear_rewardstateexp();
  static const int kRewardstateexpFieldNumber = 2;
  inline ::google::protobuf::int32 rewardstateexp() const;
  inline void set_rewardstateexp(::google::protobuf::int32 value);

  // optional int32 rewardsilver = 3;
  inline bool has_rewardsilver() const;
  inline void clear_rewardsilver();
  static const int kRewardsilverFieldNumber = 3;
  inline ::google::protobuf::int32 rewardsilver() const;
  inline void set_rewardsilver(::google::protobuf::int32 value);

  // optional int32 rewardmerit = 4;
  inline bool has_rewardmerit() const;
  inline void clear_rewardmerit();
  static const int kRewardmeritFieldNumber = 4;
  inline ::google::protobuf::int32 rewardmerit() const;
  inline void set_rewardmerit(::google::protobuf::int32 value);

  // optional int32 quatily = 5;
  inline bool has_quatily() const;
  inline void clear_quatily();
  static const int kQuatilyFieldNumber = 5;
  inline ::google::protobuf::int32 quatily() const;
  inline void set_quatily(::google::protobuf::int32 value);

  // optional int32 times = 6;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 6;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional int32 cost = 7;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 7;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional int32 rate = 8;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 8;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // optional bool success = 9;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 9;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Message.BattleSingleRewardNotify)
 private:
  inline void set_has_rewardexp();
  inline void clear_has_rewardexp();
  inline void set_has_rewardstateexp();
  inline void clear_has_rewardstateexp();
  inline void set_has_rewardsilver();
  inline void clear_has_rewardsilver();
  inline void set_has_rewardmerit();
  inline void clear_has_rewardmerit();
  inline void set_has_quatily();
  inline void clear_has_quatily();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rewardexp_;
  ::google::protobuf::int32 rewardstateexp_;
  ::google::protobuf::int32 rewardsilver_;
  ::google::protobuf::int32 rewardmerit_;
  ::google::protobuf::int32 quatily_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 rate_;
  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_MessageBattleSingleRewardNotify_2eproto();
  friend void protobuf_AssignDesc_MessageBattleSingleRewardNotify_2eproto();
  friend void protobuf_ShutdownFile_MessageBattleSingleRewardNotify_2eproto();

  void InitAsDefaultInstance();
  static BattleSingleRewardNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// BattleSingleRewardNotify

// optional int32 rewardexp = 1;
inline bool BattleSingleRewardNotify::has_rewardexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleSingleRewardNotify::set_has_rewardexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleSingleRewardNotify::clear_has_rewardexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleSingleRewardNotify::clear_rewardexp() {
  rewardexp_ = 0;
  clear_has_rewardexp();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::rewardexp() const {
  return rewardexp_;
}
inline void BattleSingleRewardNotify::set_rewardexp(::google::protobuf::int32 value) {
  set_has_rewardexp();
  rewardexp_ = value;
}

// optional int32 rewardstateexp = 2;
inline bool BattleSingleRewardNotify::has_rewardstateexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleSingleRewardNotify::set_has_rewardstateexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleSingleRewardNotify::clear_has_rewardstateexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleSingleRewardNotify::clear_rewardstateexp() {
  rewardstateexp_ = 0;
  clear_has_rewardstateexp();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::rewardstateexp() const {
  return rewardstateexp_;
}
inline void BattleSingleRewardNotify::set_rewardstateexp(::google::protobuf::int32 value) {
  set_has_rewardstateexp();
  rewardstateexp_ = value;
}

// optional int32 rewardsilver = 3;
inline bool BattleSingleRewardNotify::has_rewardsilver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleSingleRewardNotify::set_has_rewardsilver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleSingleRewardNotify::clear_has_rewardsilver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleSingleRewardNotify::clear_rewardsilver() {
  rewardsilver_ = 0;
  clear_has_rewardsilver();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::rewardsilver() const {
  return rewardsilver_;
}
inline void BattleSingleRewardNotify::set_rewardsilver(::google::protobuf::int32 value) {
  set_has_rewardsilver();
  rewardsilver_ = value;
}

// optional int32 rewardmerit = 4;
inline bool BattleSingleRewardNotify::has_rewardmerit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleSingleRewardNotify::set_has_rewardmerit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleSingleRewardNotify::clear_has_rewardmerit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleSingleRewardNotify::clear_rewardmerit() {
  rewardmerit_ = 0;
  clear_has_rewardmerit();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::rewardmerit() const {
  return rewardmerit_;
}
inline void BattleSingleRewardNotify::set_rewardmerit(::google::protobuf::int32 value) {
  set_has_rewardmerit();
  rewardmerit_ = value;
}

// optional int32 quatily = 5;
inline bool BattleSingleRewardNotify::has_quatily() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleSingleRewardNotify::set_has_quatily() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleSingleRewardNotify::clear_has_quatily() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleSingleRewardNotify::clear_quatily() {
  quatily_ = 0;
  clear_has_quatily();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::quatily() const {
  return quatily_;
}
inline void BattleSingleRewardNotify::set_quatily(::google::protobuf::int32 value) {
  set_has_quatily();
  quatily_ = value;
}

// optional int32 times = 6;
inline bool BattleSingleRewardNotify::has_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleSingleRewardNotify::set_has_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleSingleRewardNotify::clear_has_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleSingleRewardNotify::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::times() const {
  return times_;
}
inline void BattleSingleRewardNotify::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 cost = 7;
inline bool BattleSingleRewardNotify::has_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleSingleRewardNotify::set_has_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleSingleRewardNotify::clear_has_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleSingleRewardNotify::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::cost() const {
  return cost_;
}
inline void BattleSingleRewardNotify::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional int32 rate = 8;
inline bool BattleSingleRewardNotify::has_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleSingleRewardNotify::set_has_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleSingleRewardNotify::clear_has_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleSingleRewardNotify::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 BattleSingleRewardNotify::rate() const {
  return rate_;
}
inline void BattleSingleRewardNotify::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// optional bool success = 9;
inline bool BattleSingleRewardNotify::has_success() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleSingleRewardNotify::set_has_success() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleSingleRewardNotify::clear_has_success() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleSingleRewardNotify::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool BattleSingleRewardNotify::success() const {
  return success_;
}
inline void BattleSingleRewardNotify::set_success(bool value) {
  set_has_success();
  success_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageBattleSingleRewardNotify_2eproto__INCLUDED
