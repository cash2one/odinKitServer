// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBattleWpinfoResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageBattleWpinfoResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* BattleWpinfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleWpinfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleWpinfoResponse_Waypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleWpinfoResponse_Waypoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageBattleWpinfoResponse_2eproto() {
  protobuf_AddDesc_MessageBattleWpinfoResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageBattleWpinfoResponse.proto");
  GOOGLE_CHECK(file != NULL);
  BattleWpinfoResponse_descriptor_ = file->message_type(0);
  static const int BattleWpinfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse, wp_),
  };
  BattleWpinfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleWpinfoResponse_descriptor_,
      BattleWpinfoResponse::default_instance_,
      BattleWpinfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleWpinfoResponse));
  BattleWpinfoResponse_Waypoint_descriptor_ = BattleWpinfoResponse_descriptor_->nested_type(0);
  static const int BattleWpinfoResponse_Waypoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse_Waypoint, wpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse_Waypoint, wpcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse_Waypoint, armora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse_Waypoint, armorb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse_Waypoint, armormax_),
  };
  BattleWpinfoResponse_Waypoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleWpinfoResponse_Waypoint_descriptor_,
      BattleWpinfoResponse_Waypoint::default_instance_,
      BattleWpinfoResponse_Waypoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse_Waypoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleWpinfoResponse_Waypoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleWpinfoResponse_Waypoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageBattleWpinfoResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleWpinfoResponse_descriptor_, &BattleWpinfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleWpinfoResponse_Waypoint_descriptor_, &BattleWpinfoResponse_Waypoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageBattleWpinfoResponse_2eproto() {
  delete BattleWpinfoResponse::default_instance_;
  delete BattleWpinfoResponse_reflection_;
  delete BattleWpinfoResponse_Waypoint::default_instance_;
  delete BattleWpinfoResponse_Waypoint_reflection_;
}

void protobuf_AddDesc_MessageBattleWpinfoResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!MessageBattleWpinfoResponse.proto\022\007Mes"
    "sage\"\246\001\n\024BattleWpinfoResponse\0222\n\002wp\030\001 \003("
    "\0132&.Message.BattleWpinfoResponse.Waypoin"
    "t\032Z\n\010Waypoint\022\014\n\004wpid\030\001 \001(\005\022\016\n\006wpcamp\030\002 "
    "\001(\005\022\016\n\006armora\030\003 \001(\005\022\016\n\006armorb\030\004 \001(\005\022\020\n\010a"
    "rmormax\030\005 \001(\005", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageBattleWpinfoResponse.proto", &protobuf_RegisterTypes);
  BattleWpinfoResponse::default_instance_ = new BattleWpinfoResponse();
  BattleWpinfoResponse_Waypoint::default_instance_ = new BattleWpinfoResponse_Waypoint();
  BattleWpinfoResponse::default_instance_->InitAsDefaultInstance();
  BattleWpinfoResponse_Waypoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageBattleWpinfoResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageBattleWpinfoResponse_2eproto {
  StaticDescriptorInitializer_MessageBattleWpinfoResponse_2eproto() {
    protobuf_AddDesc_MessageBattleWpinfoResponse_2eproto();
  }
} static_descriptor_initializer_MessageBattleWpinfoResponse_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BattleWpinfoResponse_Waypoint::kWpidFieldNumber;
const int BattleWpinfoResponse_Waypoint::kWpcampFieldNumber;
const int BattleWpinfoResponse_Waypoint::kArmoraFieldNumber;
const int BattleWpinfoResponse_Waypoint::kArmorbFieldNumber;
const int BattleWpinfoResponse_Waypoint::kArmormaxFieldNumber;
#endif  // !_MSC_VER

BattleWpinfoResponse_Waypoint::BattleWpinfoResponse_Waypoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleWpinfoResponse_Waypoint::InitAsDefaultInstance() {
}

BattleWpinfoResponse_Waypoint::BattleWpinfoResponse_Waypoint(const BattleWpinfoResponse_Waypoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleWpinfoResponse_Waypoint::SharedCtor() {
  _cached_size_ = 0;
  wpid_ = 0;
  wpcamp_ = 0;
  armora_ = 0;
  armorb_ = 0;
  armormax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleWpinfoResponse_Waypoint::~BattleWpinfoResponse_Waypoint() {
  SharedDtor();
}

void BattleWpinfoResponse_Waypoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleWpinfoResponse_Waypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleWpinfoResponse_Waypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleWpinfoResponse_Waypoint_descriptor_;
}

const BattleWpinfoResponse_Waypoint& BattleWpinfoResponse_Waypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageBattleWpinfoResponse_2eproto();
  return *default_instance_;
}

BattleWpinfoResponse_Waypoint* BattleWpinfoResponse_Waypoint::default_instance_ = NULL;

BattleWpinfoResponse_Waypoint* BattleWpinfoResponse_Waypoint::New() const {
  return new BattleWpinfoResponse_Waypoint;
}

void BattleWpinfoResponse_Waypoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wpid_ = 0;
    wpcamp_ = 0;
    armora_ = 0;
    armorb_ = 0;
    armormax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleWpinfoResponse_Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpid_)));
          set_has_wpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wpcamp;
        break;
      }

      // optional int32 wpcamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wpcamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpcamp_)));
          set_has_wpcamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_armora;
        break;
      }

      // optional int32 armora = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armora:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armora_)));
          set_has_armora();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_armorb;
        break;
      }

      // optional int32 armorb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armorb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armorb_)));
          set_has_armorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_armormax;
        break;
      }

      // optional int32 armormax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armormax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armormax_)));
          set_has_armormax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleWpinfoResponse_Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wpid = 1;
  if (has_wpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wpid(), output);
  }

  // optional int32 wpcamp = 2;
  if (has_wpcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wpcamp(), output);
  }

  // optional int32 armora = 3;
  if (has_armora()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->armora(), output);
  }

  // optional int32 armorb = 4;
  if (has_armorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->armorb(), output);
  }

  // optional int32 armormax = 5;
  if (has_armormax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->armormax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleWpinfoResponse_Waypoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wpid = 1;
  if (has_wpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wpid(), target);
  }

  // optional int32 wpcamp = 2;
  if (has_wpcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wpcamp(), target);
  }

  // optional int32 armora = 3;
  if (has_armora()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->armora(), target);
  }

  // optional int32 armorb = 4;
  if (has_armorb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->armorb(), target);
  }

  // optional int32 armormax = 5;
  if (has_armormax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->armormax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleWpinfoResponse_Waypoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wpid = 1;
    if (has_wpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpid());
    }

    // optional int32 wpcamp = 2;
    if (has_wpcamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpcamp());
    }

    // optional int32 armora = 3;
    if (has_armora()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armora());
    }

    // optional int32 armorb = 4;
    if (has_armorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armorb());
    }

    // optional int32 armormax = 5;
    if (has_armormax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armormax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleWpinfoResponse_Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleWpinfoResponse_Waypoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleWpinfoResponse_Waypoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleWpinfoResponse_Waypoint::MergeFrom(const BattleWpinfoResponse_Waypoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wpid()) {
      set_wpid(from.wpid());
    }
    if (from.has_wpcamp()) {
      set_wpcamp(from.wpcamp());
    }
    if (from.has_armora()) {
      set_armora(from.armora());
    }
    if (from.has_armorb()) {
      set_armorb(from.armorb());
    }
    if (from.has_armormax()) {
      set_armormax(from.armormax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleWpinfoResponse_Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleWpinfoResponse_Waypoint::CopyFrom(const BattleWpinfoResponse_Waypoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleWpinfoResponse_Waypoint::IsInitialized() const {

  return true;
}

void BattleWpinfoResponse_Waypoint::Swap(BattleWpinfoResponse_Waypoint* other) {
  if (other != this) {
    std::swap(wpid_, other->wpid_);
    std::swap(wpcamp_, other->wpcamp_);
    std::swap(armora_, other->armora_);
    std::swap(armorb_, other->armorb_);
    std::swap(armormax_, other->armormax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleWpinfoResponse_Waypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleWpinfoResponse_Waypoint_descriptor_;
  metadata.reflection = BattleWpinfoResponse_Waypoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleWpinfoResponse::kWpFieldNumber;
#endif  // !_MSC_VER

BattleWpinfoResponse::BattleWpinfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleWpinfoResponse::InitAsDefaultInstance() {
}

BattleWpinfoResponse::BattleWpinfoResponse(const BattleWpinfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleWpinfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleWpinfoResponse::~BattleWpinfoResponse() {
  SharedDtor();
}

void BattleWpinfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleWpinfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleWpinfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleWpinfoResponse_descriptor_;
}

const BattleWpinfoResponse& BattleWpinfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageBattleWpinfoResponse_2eproto();
  return *default_instance_;
}

BattleWpinfoResponse* BattleWpinfoResponse::default_instance_ = NULL;

BattleWpinfoResponse* BattleWpinfoResponse::New() const {
  return new BattleWpinfoResponse;
}

void BattleWpinfoResponse::Clear() {
  wp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleWpinfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.BattleWpinfoResponse.Waypoint wp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleWpinfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Message.BattleWpinfoResponse.Waypoint wp = 1;
  for (int i = 0; i < this->wp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleWpinfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Message.BattleWpinfoResponse.Waypoint wp = 1;
  for (int i = 0; i < this->wp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleWpinfoResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Message.BattleWpinfoResponse.Waypoint wp = 1;
  total_size += 1 * this->wp_size();
  for (int i = 0; i < this->wp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleWpinfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleWpinfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleWpinfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleWpinfoResponse::MergeFrom(const BattleWpinfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  wp_.MergeFrom(from.wp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleWpinfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleWpinfoResponse::CopyFrom(const BattleWpinfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleWpinfoResponse::IsInitialized() const {

  return true;
}

void BattleWpinfoResponse::Swap(BattleWpinfoResponse* other) {
  if (other != this) {
    wp_.Swap(&other->wp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleWpinfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleWpinfoResponse_descriptor_;
  metadata.reflection = BattleWpinfoResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
