// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageRewardNotify.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageRewardNotify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* RewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageRewardNotify_2eproto() {
  protobuf_AddDesc_MessageRewardNotify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageRewardNotify.proto");
  GOOGLE_CHECK(file != NULL);
  RewardNotify_descriptor_ = file->message_type(0);
  static const int RewardNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, knight_),
  };
  RewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardNotify_descriptor_,
      RewardNotify::default_instance_,
      RewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageRewardNotify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardNotify_descriptor_, &RewardNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageRewardNotify_2eproto() {
  delete RewardNotify::default_instance_;
  delete RewardNotify_reflection_;
}

void protobuf_AddDesc_MessageRewardNotify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031MessageRewardNotify.proto\022\007Message\"\222\001\n"
    "\014RewardNotify\022\016\n\006reward\030\001 \001(\005\022\014\n\004item\030\002 "
    "\001(\005\022\013\n\003exp\030\003 \001(\005\022\016\n\006sliver\030\004 \001(\005\022\014\n\004gold"
    "\030\005 \001(\005\022\016\n\006credit\030\006 \001(\005\022\n\n\002ap\030\007 \001(\005\022\r\n\005me"
    "rit\030\010 \001(\005\022\016\n\006knight\030\t \001(\005", 185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageRewardNotify.proto", &protobuf_RegisterTypes);
  RewardNotify::default_instance_ = new RewardNotify();
  RewardNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageRewardNotify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageRewardNotify_2eproto {
  StaticDescriptorInitializer_MessageRewardNotify_2eproto() {
    protobuf_AddDesc_MessageRewardNotify_2eproto();
  }
} static_descriptor_initializer_MessageRewardNotify_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RewardNotify::kRewardFieldNumber;
const int RewardNotify::kItemFieldNumber;
const int RewardNotify::kExpFieldNumber;
const int RewardNotify::kSliverFieldNumber;
const int RewardNotify::kGoldFieldNumber;
const int RewardNotify::kCreditFieldNumber;
const int RewardNotify::kApFieldNumber;
const int RewardNotify::kMeritFieldNumber;
const int RewardNotify::kKnightFieldNumber;
#endif  // !_MSC_VER

RewardNotify::RewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardNotify::InitAsDefaultInstance() {
}

RewardNotify::RewardNotify(const RewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardNotify::SharedCtor() {
  _cached_size_ = 0;
  reward_ = 0;
  item_ = 0;
  exp_ = 0;
  sliver_ = 0;
  gold_ = 0;
  credit_ = 0;
  ap_ = 0;
  merit_ = 0;
  knight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardNotify::~RewardNotify() {
  SharedDtor();
}

void RewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardNotify_descriptor_;
}

const RewardNotify& RewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageRewardNotify_2eproto();
  return *default_instance_;
}

RewardNotify* RewardNotify::default_instance_ = NULL;

RewardNotify* RewardNotify::New() const {
  return new RewardNotify;
}

void RewardNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_ = 0;
    item_ = 0;
    exp_ = 0;
    sliver_ = 0;
    gold_ = 0;
    credit_ = 0;
    ap_ = 0;
    merit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    knight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional int32 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sliver;
        break;
      }

      // optional int32 sliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // optional int32 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_credit;
        break;
      }

      // optional int32 credit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ap;
        break;
      }

      // optional int32 ap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ap_)));
          set_has_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_merit;
        break;
      }

      // optional int32 merit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_knight;
        break;
      }

      // optional int32 knight = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knight_)));
          set_has_knight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward(), output);
  }

  // optional int32 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 sliver = 4;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sliver(), output);
  }

  // optional int32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // optional int32 credit = 6;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->credit(), output);
  }

  // optional int32 ap = 7;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ap(), output);
  }

  // optional int32 merit = 8;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->merit(), output);
  }

  // optional int32 knight = 9;
  if (has_knight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->knight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward(), target);
  }

  // optional int32 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 sliver = 4;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sliver(), target);
  }

  // optional int32 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold(), target);
  }

  // optional int32 credit = 6;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->credit(), target);
  }

  // optional int32 ap = 7;
  if (has_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ap(), target);
  }

  // optional int32 merit = 8;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->merit(), target);
  }

  // optional int32 knight = 9;
  if (has_knight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->knight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 sliver = 4;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sliver());
    }

    // optional int32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 credit = 6;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional int32 ap = 7;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ap());
    }

    // optional int32 merit = 8;
    if (has_merit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 knight = 9;
    if (has_knight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardNotify::MergeFrom(const RewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_ap()) {
      set_ap(from.ap());
    }
    if (from.has_merit()) {
      set_merit(from.merit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_knight()) {
      set_knight(from.knight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardNotify::CopyFrom(const RewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardNotify::IsInitialized() const {

  return true;
}

void RewardNotify::Swap(RewardNotify* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(item_, other->item_);
    std::swap(exp_, other->exp_);
    std::swap(sliver_, other->sliver_);
    std::swap(gold_, other->gold_);
    std::swap(credit_, other->credit_);
    std::swap(ap_, other->ap_);
    std::swap(merit_, other->merit_);
    std::swap(knight_, other->knight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardNotify_descriptor_;
  metadata.reflection = RewardNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
