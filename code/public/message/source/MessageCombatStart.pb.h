// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCombatStart.proto

#ifndef PROTOBUF_MessageCombatStart_2eproto__INCLUDED
#define PROTOBUF_MessageCombatStart_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageCombatStart_2eproto();
void protobuf_AssignDesc_MessageCombatStart_2eproto();
void protobuf_ShutdownFile_MessageCombatStart_2eproto();

class CombatStart;
class CombatStart_Fighter;

// ===================================================================

class CombatStart_Fighter : public ::google::protobuf::Message {
 public:
  CombatStart_Fighter();
  virtual ~CombatStart_Fighter();

  CombatStart_Fighter(const CombatStart_Fighter& from);

  inline CombatStart_Fighter& operator=(const CombatStart_Fighter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CombatStart_Fighter& default_instance();

  void Swap(CombatStart_Fighter* other);

  // implements Message ----------------------------------------------

  CombatStart_Fighter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CombatStart_Fighter& from);
  void MergeFrom(const CombatStart_Fighter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 stunt = 7;
  inline bool has_stunt() const;
  inline void clear_stunt();
  static const int kStuntFieldNumber = 7;
  inline ::google::protobuf::int32 stunt() const;
  inline void set_stunt(::google::protobuf::int32 value);

  // optional int32 hotohori = 8;
  inline bool has_hotohori() const;
  inline void clear_hotohori();
  static const int kHotohoriFieldNumber = 8;
  inline ::google::protobuf::int32 hotohori() const;
  inline void set_hotohori(::google::protobuf::int32 value);

  // optional int32 hpmax = 9;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 9;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 quality = 10;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 10;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.CombatStart.Fighter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_stunt();
  inline void clear_has_stunt();
  inline void set_has_hotohori();
  inline void clear_has_hotohori();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 stunt_;
  ::google::protobuf::int32 hotohori_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_MessageCombatStart_2eproto();
  friend void protobuf_AssignDesc_MessageCombatStart_2eproto();
  friend void protobuf_ShutdownFile_MessageCombatStart_2eproto();

  void InitAsDefaultInstance();
  static CombatStart_Fighter* default_instance_;
};
// -------------------------------------------------------------------

class CombatStart : public ::google::protobuf::Message {
 public:
  CombatStart();
  virtual ~CombatStart();

  CombatStart(const CombatStart& from);

  inline CombatStart& operator=(const CombatStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CombatStart& default_instance();

  void Swap(CombatStart* other);

  // implements Message ----------------------------------------------

  CombatStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CombatStart& from);
  void MergeFrom(const CombatStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CombatStart_Fighter Fighter;

  // accessors -------------------------------------------------------

  // repeated .Message.CombatStart.Fighter fighter = 1;
  inline int fighter_size() const;
  inline void clear_fighter();
  static const int kFighterFieldNumber = 1;
  inline const ::Message::CombatStart_Fighter& fighter(int index) const;
  inline ::Message::CombatStart_Fighter* mutable_fighter(int index);
  inline ::Message::CombatStart_Fighter* add_fighter();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::CombatStart_Fighter >&
      fighter() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::CombatStart_Fighter >*
      mutable_fighter();

  // optional int32 ermyformatlevel = 2;
  inline bool has_ermyformatlevel() const;
  inline void clear_ermyformatlevel();
  static const int kErmyformatlevelFieldNumber = 2;
  inline ::google::protobuf::int32 ermyformatlevel() const;
  inline void set_ermyformatlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.CombatStart)
 private:
  inline void set_has_ermyformatlevel();
  inline void clear_has_ermyformatlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Message::CombatStart_Fighter > fighter_;
  ::google::protobuf::int32 ermyformatlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessageCombatStart_2eproto();
  friend void protobuf_AssignDesc_MessageCombatStart_2eproto();
  friend void protobuf_ShutdownFile_MessageCombatStart_2eproto();

  void InitAsDefaultInstance();
  static CombatStart* default_instance_;
};
// ===================================================================


// ===================================================================

// CombatStart_Fighter

// optional int32 type = 1;
inline bool CombatStart_Fighter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CombatStart_Fighter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CombatStart_Fighter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CombatStart_Fighter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CombatStart_Fighter::type() const {
  return type_;
}
inline void CombatStart_Fighter::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool CombatStart_Fighter::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CombatStart_Fighter::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CombatStart_Fighter::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CombatStart_Fighter::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CombatStart_Fighter::id() const {
  return id_;
}
inline void CombatStart_Fighter::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 3;
inline bool CombatStart_Fighter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CombatStart_Fighter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CombatStart_Fighter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CombatStart_Fighter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CombatStart_Fighter::name() const {
  return *name_;
}
inline void CombatStart_Fighter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CombatStart_Fighter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CombatStart_Fighter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CombatStart_Fighter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CombatStart_Fighter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CombatStart_Fighter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 hp = 4;
inline bool CombatStart_Fighter::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CombatStart_Fighter::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CombatStart_Fighter::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CombatStart_Fighter::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 CombatStart_Fighter::hp() const {
  return hp_;
}
inline void CombatStart_Fighter::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 level = 5;
inline bool CombatStart_Fighter::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CombatStart_Fighter::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CombatStart_Fighter::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CombatStart_Fighter::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CombatStart_Fighter::level() const {
  return level_;
}
inline void CombatStart_Fighter::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 pos = 6;
inline bool CombatStart_Fighter::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CombatStart_Fighter::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CombatStart_Fighter::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CombatStart_Fighter::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 CombatStart_Fighter::pos() const {
  return pos_;
}
inline void CombatStart_Fighter::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 stunt = 7;
inline bool CombatStart_Fighter::has_stunt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CombatStart_Fighter::set_has_stunt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CombatStart_Fighter::clear_has_stunt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CombatStart_Fighter::clear_stunt() {
  stunt_ = 0;
  clear_has_stunt();
}
inline ::google::protobuf::int32 CombatStart_Fighter::stunt() const {
  return stunt_;
}
inline void CombatStart_Fighter::set_stunt(::google::protobuf::int32 value) {
  set_has_stunt();
  stunt_ = value;
}

// optional int32 hotohori = 8;
inline bool CombatStart_Fighter::has_hotohori() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CombatStart_Fighter::set_has_hotohori() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CombatStart_Fighter::clear_has_hotohori() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CombatStart_Fighter::clear_hotohori() {
  hotohori_ = 0;
  clear_has_hotohori();
}
inline ::google::protobuf::int32 CombatStart_Fighter::hotohori() const {
  return hotohori_;
}
inline void CombatStart_Fighter::set_hotohori(::google::protobuf::int32 value) {
  set_has_hotohori();
  hotohori_ = value;
}

// optional int32 hpmax = 9;
inline bool CombatStart_Fighter::has_hpmax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CombatStart_Fighter::set_has_hpmax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CombatStart_Fighter::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CombatStart_Fighter::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 CombatStart_Fighter::hpmax() const {
  return hpmax_;
}
inline void CombatStart_Fighter::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// optional int32 quality = 10;
inline bool CombatStart_Fighter::has_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CombatStart_Fighter::set_has_quality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CombatStart_Fighter::clear_has_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CombatStart_Fighter::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 CombatStart_Fighter::quality() const {
  return quality_;
}
inline void CombatStart_Fighter::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// CombatStart

// repeated .Message.CombatStart.Fighter fighter = 1;
inline int CombatStart::fighter_size() const {
  return fighter_.size();
}
inline void CombatStart::clear_fighter() {
  fighter_.Clear();
}
inline const ::Message::CombatStart_Fighter& CombatStart::fighter(int index) const {
  return fighter_.Get(index);
}
inline ::Message::CombatStart_Fighter* CombatStart::mutable_fighter(int index) {
  return fighter_.Mutable(index);
}
inline ::Message::CombatStart_Fighter* CombatStart::add_fighter() {
  return fighter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::CombatStart_Fighter >&
CombatStart::fighter() const {
  return fighter_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::CombatStart_Fighter >*
CombatStart::mutable_fighter() {
  return &fighter_;
}

// optional int32 ermyformatlevel = 2;
inline bool CombatStart::has_ermyformatlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CombatStart::set_has_ermyformatlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CombatStart::clear_has_ermyformatlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CombatStart::clear_ermyformatlevel() {
  ermyformatlevel_ = 0;
  clear_has_ermyformatlevel();
}
inline ::google::protobuf::int32 CombatStart::ermyformatlevel() const {
  return ermyformatlevel_;
}
inline void CombatStart::set_ermyformatlevel(::google::protobuf::int32 value) {
  set_has_ermyformatlevel();
  ermyformatlevel_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageCombatStart_2eproto__INCLUDED
