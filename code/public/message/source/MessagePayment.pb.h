// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePayment.proto

#ifndef PROTOBUF_MessagePayment_2eproto__INCLUDED
#define PROTOBUF_MessagePayment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessagePayment_2eproto();
void protobuf_AssignDesc_MessagePayment_2eproto();
void protobuf_ShutdownFile_MessagePayment_2eproto();

class PaymentVerifyRequest;
class PaymentVerifyResponse;
class PaymentSaveTransactionRequest;
class PaymentSaveTransactionResponse;

// ===================================================================

class PaymentVerifyRequest : public ::google::protobuf::Message {
 public:
  PaymentVerifyRequest();
  virtual ~PaymentVerifyRequest();

  PaymentVerifyRequest(const PaymentVerifyRequest& from);

  inline PaymentVerifyRequest& operator=(const PaymentVerifyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaymentVerifyRequest& default_instance();

  void Swap(PaymentVerifyRequest* other);

  // implements Message ----------------------------------------------

  PaymentVerifyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaymentVerifyRequest& from);
  void MergeFrom(const PaymentVerifyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string receiptData = 1;
  inline bool has_receiptdata() const;
  inline void clear_receiptdata();
  static const int kReceiptDataFieldNumber = 1;
  inline const ::std::string& receiptdata() const;
  inline void set_receiptdata(const ::std::string& value);
  inline void set_receiptdata(const char* value);
  inline void set_receiptdata(const char* value, size_t size);
  inline ::std::string* mutable_receiptdata();
  inline ::std::string* release_receiptdata();
  inline void set_allocated_receiptdata(::std::string* receiptdata);

  // required int64 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Message.PaymentVerifyRequest)
 private:
  inline void set_has_receiptdata();
  inline void clear_has_receiptdata();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* receiptdata_;
  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePayment_2eproto();
  friend void protobuf_AssignDesc_MessagePayment_2eproto();
  friend void protobuf_ShutdownFile_MessagePayment_2eproto();

  void InitAsDefaultInstance();
  static PaymentVerifyRequest* default_instance_;
};
// -------------------------------------------------------------------

class PaymentVerifyResponse : public ::google::protobuf::Message {
 public:
  PaymentVerifyResponse();
  virtual ~PaymentVerifyResponse();

  PaymentVerifyResponse(const PaymentVerifyResponse& from);

  inline PaymentVerifyResponse& operator=(const PaymentVerifyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaymentVerifyResponse& default_instance();

  void Swap(PaymentVerifyResponse* other);

  // implements Message ----------------------------------------------

  PaymentVerifyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaymentVerifyResponse& from);
  void MergeFrom(const PaymentVerifyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);

  // optional string product_id = 3;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const char* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // optional string transaction_id = 4;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 4;
  inline const ::std::string& transaction_id() const;
  inline void set_transaction_id(const ::std::string& value);
  inline void set_transaction_id(const char* value);
  inline void set_transaction_id(const char* value, size_t size);
  inline ::std::string* mutable_transaction_id();
  inline ::std::string* release_transaction_id();
  inline void set_allocated_transaction_id(::std::string* transaction_id);

  // @@protoc_insertion_point(class_scope:Message.PaymentVerifyResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_product_id();
  inline void clear_has_product_id();
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_id_;
  ::std::string* product_id_;
  ::std::string* transaction_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePayment_2eproto();
  friend void protobuf_AssignDesc_MessagePayment_2eproto();
  friend void protobuf_ShutdownFile_MessagePayment_2eproto();

  void InitAsDefaultInstance();
  static PaymentVerifyResponse* default_instance_;
};
// -------------------------------------------------------------------

class PaymentSaveTransactionRequest : public ::google::protobuf::Message {
 public:
  PaymentSaveTransactionRequest();
  virtual ~PaymentSaveTransactionRequest();

  PaymentSaveTransactionRequest(const PaymentSaveTransactionRequest& from);

  inline PaymentSaveTransactionRequest& operator=(const PaymentSaveTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaymentSaveTransactionRequest& default_instance();

  void Swap(PaymentSaveTransactionRequest* other);

  // implements Message ----------------------------------------------

  PaymentSaveTransactionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaymentSaveTransactionRequest& from);
  void MergeFrom(const PaymentSaveTransactionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string transaction_id = 1;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  inline const ::std::string& transaction_id() const;
  inline void set_transaction_id(const ::std::string& value);
  inline void set_transaction_id(const char* value);
  inline void set_transaction_id(const char* value, size_t size);
  inline ::std::string* mutable_transaction_id();
  inline ::std::string* release_transaction_id();
  inline void set_allocated_transaction_id(::std::string* transaction_id);

  // required string product_id = 2;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 2;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const char* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // required int64 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Message.PaymentSaveTransactionRequest)
 private:
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  inline void set_has_product_id();
  inline void clear_has_product_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* transaction_id_;
  ::std::string* product_id_;
  ::google::protobuf::int64 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePayment_2eproto();
  friend void protobuf_AssignDesc_MessagePayment_2eproto();
  friend void protobuf_ShutdownFile_MessagePayment_2eproto();

  void InitAsDefaultInstance();
  static PaymentSaveTransactionRequest* default_instance_;
};
// -------------------------------------------------------------------

class PaymentSaveTransactionResponse : public ::google::protobuf::Message {
 public:
  PaymentSaveTransactionResponse();
  virtual ~PaymentSaveTransactionResponse();

  PaymentSaveTransactionResponse(const PaymentSaveTransactionResponse& from);

  inline PaymentSaveTransactionResponse& operator=(const PaymentSaveTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaymentSaveTransactionResponse& default_instance();

  void Swap(PaymentSaveTransactionResponse* other);

  // implements Message ----------------------------------------------

  PaymentSaveTransactionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaymentSaveTransactionResponse& from);
  void MergeFrom(const PaymentSaveTransactionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);

  // optional string product_id = 3;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const char* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // @@protoc_insertion_point(class_scope:Message.PaymentSaveTransactionResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_product_id();
  inline void clear_has_product_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_id_;
  ::std::string* product_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePayment_2eproto();
  friend void protobuf_AssignDesc_MessagePayment_2eproto();
  friend void protobuf_ShutdownFile_MessagePayment_2eproto();

  void InitAsDefaultInstance();
  static PaymentSaveTransactionResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// PaymentVerifyRequest

// required string receiptData = 1;
inline bool PaymentVerifyRequest::has_receiptdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaymentVerifyRequest::set_has_receiptdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaymentVerifyRequest::clear_has_receiptdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaymentVerifyRequest::clear_receiptdata() {
  if (receiptdata_ != &::google::protobuf::internal::kEmptyString) {
    receiptdata_->clear();
  }
  clear_has_receiptdata();
}
inline const ::std::string& PaymentVerifyRequest::receiptdata() const {
  return *receiptdata_;
}
inline void PaymentVerifyRequest::set_receiptdata(const ::std::string& value) {
  set_has_receiptdata();
  if (receiptdata_ == &::google::protobuf::internal::kEmptyString) {
    receiptdata_ = new ::std::string;
  }
  receiptdata_->assign(value);
}
inline void PaymentVerifyRequest::set_receiptdata(const char* value) {
  set_has_receiptdata();
  if (receiptdata_ == &::google::protobuf::internal::kEmptyString) {
    receiptdata_ = new ::std::string;
  }
  receiptdata_->assign(value);
}
inline void PaymentVerifyRequest::set_receiptdata(const char* value, size_t size) {
  set_has_receiptdata();
  if (receiptdata_ == &::google::protobuf::internal::kEmptyString) {
    receiptdata_ = new ::std::string;
  }
  receiptdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaymentVerifyRequest::mutable_receiptdata() {
  set_has_receiptdata();
  if (receiptdata_ == &::google::protobuf::internal::kEmptyString) {
    receiptdata_ = new ::std::string;
  }
  return receiptdata_;
}
inline ::std::string* PaymentVerifyRequest::release_receiptdata() {
  clear_has_receiptdata();
  if (receiptdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiptdata_;
    receiptdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaymentVerifyRequest::set_allocated_receiptdata(::std::string* receiptdata) {
  if (receiptdata_ != &::google::protobuf::internal::kEmptyString) {
    delete receiptdata_;
  }
  if (receiptdata) {
    set_has_receiptdata();
    receiptdata_ = receiptdata;
  } else {
    clear_has_receiptdata();
    receiptdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 playerid = 2;
inline bool PaymentVerifyRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaymentVerifyRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaymentVerifyRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaymentVerifyRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 PaymentVerifyRequest::playerid() const {
  return playerid_;
}
inline void PaymentVerifyRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// PaymentVerifyResponse

// required int32 result = 1;
inline bool PaymentVerifyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaymentVerifyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaymentVerifyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaymentVerifyResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PaymentVerifyResponse::result() const {
  return result_;
}
inline void PaymentVerifyResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 player_id = 2;
inline bool PaymentVerifyResponse::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaymentVerifyResponse::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaymentVerifyResponse::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaymentVerifyResponse::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 PaymentVerifyResponse::player_id() const {
  return player_id_;
}
inline void PaymentVerifyResponse::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string product_id = 3;
inline bool PaymentVerifyResponse::has_product_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaymentVerifyResponse::set_has_product_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PaymentVerifyResponse::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PaymentVerifyResponse::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
}
inline const ::std::string& PaymentVerifyResponse::product_id() const {
  return *product_id_;
}
inline void PaymentVerifyResponse::set_product_id(const ::std::string& value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void PaymentVerifyResponse::set_product_id(const char* value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void PaymentVerifyResponse::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaymentVerifyResponse::mutable_product_id() {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* PaymentVerifyResponse::release_product_id() {
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaymentVerifyResponse::set_allocated_product_id(::std::string* product_id) {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string transaction_id = 4;
inline bool PaymentVerifyResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PaymentVerifyResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PaymentVerifyResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PaymentVerifyResponse::clear_transaction_id() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    transaction_id_->clear();
  }
  clear_has_transaction_id();
}
inline const ::std::string& PaymentVerifyResponse::transaction_id() const {
  return *transaction_id_;
}
inline void PaymentVerifyResponse::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void PaymentVerifyResponse::set_transaction_id(const char* value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void PaymentVerifyResponse::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaymentVerifyResponse::mutable_transaction_id() {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  return transaction_id_;
}
inline ::std::string* PaymentVerifyResponse::release_transaction_id() {
  clear_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transaction_id_;
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaymentVerifyResponse::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (transaction_id) {
    set_has_transaction_id();
    transaction_id_ = transaction_id;
  } else {
    clear_has_transaction_id();
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PaymentSaveTransactionRequest

// required string transaction_id = 1;
inline bool PaymentSaveTransactionRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaymentSaveTransactionRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaymentSaveTransactionRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaymentSaveTransactionRequest::clear_transaction_id() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    transaction_id_->clear();
  }
  clear_has_transaction_id();
}
inline const ::std::string& PaymentSaveTransactionRequest::transaction_id() const {
  return *transaction_id_;
}
inline void PaymentSaveTransactionRequest::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void PaymentSaveTransactionRequest::set_transaction_id(const char* value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void PaymentSaveTransactionRequest::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaymentSaveTransactionRequest::mutable_transaction_id() {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  return transaction_id_;
}
inline ::std::string* PaymentSaveTransactionRequest::release_transaction_id() {
  clear_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transaction_id_;
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaymentSaveTransactionRequest::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (transaction_id) {
    set_has_transaction_id();
    transaction_id_ = transaction_id;
  } else {
    clear_has_transaction_id();
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string product_id = 2;
inline bool PaymentSaveTransactionRequest::has_product_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaymentSaveTransactionRequest::set_has_product_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaymentSaveTransactionRequest::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaymentSaveTransactionRequest::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
}
inline const ::std::string& PaymentSaveTransactionRequest::product_id() const {
  return *product_id_;
}
inline void PaymentSaveTransactionRequest::set_product_id(const ::std::string& value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void PaymentSaveTransactionRequest::set_product_id(const char* value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void PaymentSaveTransactionRequest::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaymentSaveTransactionRequest::mutable_product_id() {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* PaymentSaveTransactionRequest::release_product_id() {
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaymentSaveTransactionRequest::set_allocated_product_id(::std::string* product_id) {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 player_id = 3;
inline bool PaymentSaveTransactionRequest::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaymentSaveTransactionRequest::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PaymentSaveTransactionRequest::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PaymentSaveTransactionRequest::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 PaymentSaveTransactionRequest::player_id() const {
  return player_id_;
}
inline void PaymentSaveTransactionRequest::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// PaymentSaveTransactionResponse

// required int32 result = 1;
inline bool PaymentSaveTransactionResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaymentSaveTransactionResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaymentSaveTransactionResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaymentSaveTransactionResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PaymentSaveTransactionResponse::result() const {
  return result_;
}
inline void PaymentSaveTransactionResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 player_id = 2;
inline bool PaymentSaveTransactionResponse::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaymentSaveTransactionResponse::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaymentSaveTransactionResponse::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaymentSaveTransactionResponse::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 PaymentSaveTransactionResponse::player_id() const {
  return player_id_;
}
inline void PaymentSaveTransactionResponse::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string product_id = 3;
inline bool PaymentSaveTransactionResponse::has_product_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaymentSaveTransactionResponse::set_has_product_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PaymentSaveTransactionResponse::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PaymentSaveTransactionResponse::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
}
inline const ::std::string& PaymentSaveTransactionResponse::product_id() const {
  return *product_id_;
}
inline void PaymentSaveTransactionResponse::set_product_id(const ::std::string& value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void PaymentSaveTransactionResponse::set_product_id(const char* value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void PaymentSaveTransactionResponse::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaymentSaveTransactionResponse::mutable_product_id() {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* PaymentSaveTransactionResponse::release_product_id() {
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaymentSaveTransactionResponse::set_allocated_product_id(::std::string* product_id) {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessagePayment_2eproto__INCLUDED
