// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageUserCheck.proto

#ifndef PROTOBUF_MessageUserCheck_2eproto__INCLUDED
#define PROTOBUF_MessageUserCheck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageUserCheck_2eproto();
void protobuf_AssignDesc_MessageUserCheck_2eproto();
void protobuf_ShutdownFile_MessageUserCheck_2eproto();

class UserCheck;

// ===================================================================

class UserCheck : public ::google::protobuf::Message {
 public:
  UserCheck();
  virtual ~UserCheck();

  UserCheck(const UserCheck& from);

  inline UserCheck& operator=(const UserCheck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCheck& default_instance();

  void Swap(UserCheck* other);

  // implements Message ----------------------------------------------

  UserCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserCheck& from);
  void MergeFrom(const UserCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline ::google::protobuf::int32 server() const;
  inline void set_server(::google::protobuf::int32 value);

  // optional string userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string ticket = 3;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 3;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const char* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // optional int32 client = 4;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 4;
  inline ::google::protobuf::int32 client() const;
  inline void set_client(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.UserCheck)
 private:
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_client();
  inline void clear_has_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userid_;
  ::google::protobuf::int32 server_;
  ::google::protobuf::int32 client_;
  ::std::string* ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MessageUserCheck_2eproto();
  friend void protobuf_AssignDesc_MessageUserCheck_2eproto();
  friend void protobuf_ShutdownFile_MessageUserCheck_2eproto();

  void InitAsDefaultInstance();
  static UserCheck* default_instance_;
};
// ===================================================================


// ===================================================================

// UserCheck

// optional int32 server = 1;
inline bool UserCheck::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCheck::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCheck::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCheck::clear_server() {
  server_ = 0;
  clear_has_server();
}
inline ::google::protobuf::int32 UserCheck::server() const {
  return server_;
}
inline void UserCheck::set_server(::google::protobuf::int32 value) {
  set_has_server();
  server_ = value;
}

// optional string userid = 2;
inline bool UserCheck::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCheck::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCheck::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCheck::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& UserCheck::userid() const {
  return *userid_;
}
inline void UserCheck::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void UserCheck::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void UserCheck::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserCheck::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* UserCheck::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserCheck::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ticket = 3;
inline bool UserCheck::has_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserCheck::set_has_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserCheck::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserCheck::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& UserCheck::ticket() const {
  return *ticket_;
}
inline void UserCheck::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void UserCheck::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void UserCheck::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserCheck::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* UserCheck::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserCheck::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 client = 4;
inline bool UserCheck::has_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserCheck::set_has_client() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserCheck::clear_has_client() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserCheck::clear_client() {
  client_ = 0;
  clear_has_client();
}
inline ::google::protobuf::int32 UserCheck::client() const {
  return client_;
}
inline void UserCheck::set_client(::google::protobuf::int32 value) {
  set_has_client();
  client_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageUserCheck_2eproto__INCLUDED
