// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageArenaChangeOpp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageArenaChangeOpp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* ArenaChangeOppRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChangeOppRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaChangeOppResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChangeOppResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageArenaChangeOpp_2eproto() {
  protobuf_AddDesc_MessageArenaChangeOpp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageArenaChangeOpp.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaChangeOppRequest_descriptor_ = file->message_type(0);
  static const int ArenaChangeOppRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppRequest, pid_),
  };
  ArenaChangeOppRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChangeOppRequest_descriptor_,
      ArenaChangeOppRequest::default_instance_,
      ArenaChangeOppRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChangeOppRequest));
  ArenaChangeOppResponse_descriptor_ = file->message_type(1);
  static const int ArenaChangeOppResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppResponse, old_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppResponse, new_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppResponse, result_),
  };
  ArenaChangeOppResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChangeOppResponse_descriptor_,
      ArenaChangeOppResponse::default_instance_,
      ArenaChangeOppResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChangeOppResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChangeOppResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageArenaChangeOpp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChangeOppRequest_descriptor_, &ArenaChangeOppRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChangeOppResponse_descriptor_, &ArenaChangeOppResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageArenaChangeOpp_2eproto() {
  delete ArenaChangeOppRequest::default_instance_;
  delete ArenaChangeOppRequest_reflection_;
  delete ArenaChangeOppResponse::default_instance_;
  delete ArenaChangeOppResponse_reflection_;
}

void protobuf_AddDesc_MessageArenaChangeOpp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Message::protobuf_AddDesc_MessageArenaPlayerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033MessageArenaChangeOpp.proto\022\007Message\032\034"
    "MessageArenaPlayerData.proto\"$\n\025ArenaCha"
    "ngeOppRequest\022\013\n\003pid\030\001 \001(\003\"c\n\026ArenaChang"
    "eOppResponse\022\017\n\007old_pid\030\001 \001(\003\022(\n\nnew_pla"
    "yer\030\002 \001(\0132\024.Message.ArenaPlayer\022\016\n\006resul"
    "t\030\003 \001(\005", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageArenaChangeOpp.proto", &protobuf_RegisterTypes);
  ArenaChangeOppRequest::default_instance_ = new ArenaChangeOppRequest();
  ArenaChangeOppResponse::default_instance_ = new ArenaChangeOppResponse();
  ArenaChangeOppRequest::default_instance_->InitAsDefaultInstance();
  ArenaChangeOppResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageArenaChangeOpp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageArenaChangeOpp_2eproto {
  StaticDescriptorInitializer_MessageArenaChangeOpp_2eproto() {
    protobuf_AddDesc_MessageArenaChangeOpp_2eproto();
  }
} static_descriptor_initializer_MessageArenaChangeOpp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaChangeOppRequest::kPidFieldNumber;
#endif  // !_MSC_VER

ArenaChangeOppRequest::ArenaChangeOppRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChangeOppRequest::InitAsDefaultInstance() {
}

ArenaChangeOppRequest::ArenaChangeOppRequest(const ArenaChangeOppRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChangeOppRequest::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChangeOppRequest::~ArenaChangeOppRequest() {
  SharedDtor();
}

void ArenaChangeOppRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaChangeOppRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChangeOppRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChangeOppRequest_descriptor_;
}

const ArenaChangeOppRequest& ArenaChangeOppRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaChangeOpp_2eproto();
  return *default_instance_;
}

ArenaChangeOppRequest* ArenaChangeOppRequest::default_instance_ = NULL;

ArenaChangeOppRequest* ArenaChangeOppRequest::New() const {
  return new ArenaChangeOppRequest;
}

void ArenaChangeOppRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChangeOppRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChangeOppRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChangeOppRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChangeOppRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChangeOppRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChangeOppRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChangeOppRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChangeOppRequest::MergeFrom(const ArenaChangeOppRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChangeOppRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChangeOppRequest::CopyFrom(const ArenaChangeOppRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChangeOppRequest::IsInitialized() const {

  return true;
}

void ArenaChangeOppRequest::Swap(ArenaChangeOppRequest* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChangeOppRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChangeOppRequest_descriptor_;
  metadata.reflection = ArenaChangeOppRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaChangeOppResponse::kOldPidFieldNumber;
const int ArenaChangeOppResponse::kNewPlayerFieldNumber;
const int ArenaChangeOppResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ArenaChangeOppResponse::ArenaChangeOppResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChangeOppResponse::InitAsDefaultInstance() {
  new_player_ = const_cast< ::Message::ArenaPlayer*>(&::Message::ArenaPlayer::default_instance());
}

ArenaChangeOppResponse::ArenaChangeOppResponse(const ArenaChangeOppResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChangeOppResponse::SharedCtor() {
  _cached_size_ = 0;
  old_pid_ = GOOGLE_LONGLONG(0);
  new_player_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChangeOppResponse::~ArenaChangeOppResponse() {
  SharedDtor();
}

void ArenaChangeOppResponse::SharedDtor() {
  if (this != default_instance_) {
    delete new_player_;
  }
}

void ArenaChangeOppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChangeOppResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChangeOppResponse_descriptor_;
}

const ArenaChangeOppResponse& ArenaChangeOppResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaChangeOpp_2eproto();
  return *default_instance_;
}

ArenaChangeOppResponse* ArenaChangeOppResponse::default_instance_ = NULL;

ArenaChangeOppResponse* ArenaChangeOppResponse::New() const {
  return new ArenaChangeOppResponse;
}

void ArenaChangeOppResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_pid_ = GOOGLE_LONGLONG(0);
    if (has_new_player()) {
      if (new_player_ != NULL) new_player_->::Message::ArenaPlayer::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChangeOppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 old_pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &old_pid_)));
          set_has_old_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_player;
        break;
      }

      // optional .Message.ArenaPlayer new_player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChangeOppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 old_pid = 1;
  if (has_old_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->old_pid(), output);
  }

  // optional .Message.ArenaPlayer new_player = 2;
  if (has_new_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_player(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChangeOppResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 old_pid = 1;
  if (has_old_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->old_pid(), target);
  }

  // optional .Message.ArenaPlayer new_player = 2;
  if (has_new_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_player(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChangeOppResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 old_pid = 1;
    if (has_old_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->old_pid());
    }

    // optional .Message.ArenaPlayer new_player = 2;
    if (has_new_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_player());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChangeOppResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChangeOppResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChangeOppResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChangeOppResponse::MergeFrom(const ArenaChangeOppResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_pid()) {
      set_old_pid(from.old_pid());
    }
    if (from.has_new_player()) {
      mutable_new_player()->::Message::ArenaPlayer::MergeFrom(from.new_player());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChangeOppResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChangeOppResponse::CopyFrom(const ArenaChangeOppResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChangeOppResponse::IsInitialized() const {

  return true;
}

void ArenaChangeOppResponse::Swap(ArenaChangeOppResponse* other) {
  if (other != this) {
    std::swap(old_pid_, other->old_pid_);
    std::swap(new_player_, other->new_player_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChangeOppResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChangeOppResponse_descriptor_;
  metadata.reflection = ArenaChangeOppResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
