// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageArenaChallenge.proto

#ifndef PROTOBUF_MessageArenaChallenge_2eproto__INCLUDED
#define PROTOBUF_MessageArenaChallenge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageArenaChallenge_2eproto();
void protobuf_AssignDesc_MessageArenaChallenge_2eproto();
void protobuf_ShutdownFile_MessageArenaChallenge_2eproto();

class ArenaChallengeRequest;
class ArenaChallengeResponse;
class ArenaAddChallengeRequest;
class ArenaAddChallengeResponse;

// ===================================================================

class ArenaChallengeRequest : public ::google::protobuf::Message {
 public:
  ArenaChallengeRequest();
  virtual ~ArenaChallengeRequest();

  ArenaChallengeRequest(const ArenaChallengeRequest& from);

  inline ArenaChallengeRequest& operator=(const ArenaChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaChallengeRequest& default_instance();

  void Swap(ArenaChallengeRequest* other);

  // implements Message ----------------------------------------------

  ArenaChallengeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaChallengeRequest& from);
  void MergeFrom(const ArenaChallengeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Message.ArenaChallengeRequest)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_AssignDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_ShutdownFile_MessageArenaChallenge_2eproto();

  void InitAsDefaultInstance();
  static ArenaChallengeRequest* default_instance_;
};
// -------------------------------------------------------------------

class ArenaChallengeResponse : public ::google::protobuf::Message {
 public:
  ArenaChallengeResponse();
  virtual ~ArenaChallengeResponse();

  ArenaChallengeResponse(const ArenaChallengeResponse& from);

  inline ArenaChallengeResponse& operator=(const ArenaChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaChallengeResponse& default_instance();

  void Swap(ArenaChallengeResponse* other);

  // implements Message ----------------------------------------------

  ArenaChallengeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaChallengeResponse& from);
  void MergeFrom(const ArenaChallengeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.ArenaChallengeResponse)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_AssignDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_ShutdownFile_MessageArenaChallenge_2eproto();

  void InitAsDefaultInstance();
  static ArenaChallengeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ArenaAddChallengeRequest : public ::google::protobuf::Message {
 public:
  ArenaAddChallengeRequest();
  virtual ~ArenaAddChallengeRequest();

  ArenaAddChallengeRequest(const ArenaAddChallengeRequest& from);

  inline ArenaAddChallengeRequest& operator=(const ArenaAddChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaAddChallengeRequest& default_instance();

  void Swap(ArenaAddChallengeRequest* other);

  // implements Message ----------------------------------------------

  ArenaAddChallengeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaAddChallengeRequest& from);
  void MergeFrom(const ArenaAddChallengeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.ArenaAddChallengeRequest)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_AssignDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_ShutdownFile_MessageArenaChallenge_2eproto();

  void InitAsDefaultInstance();
  static ArenaAddChallengeRequest* default_instance_;
};
// -------------------------------------------------------------------

class ArenaAddChallengeResponse : public ::google::protobuf::Message {
 public:
  ArenaAddChallengeResponse();
  virtual ~ArenaAddChallengeResponse();

  ArenaAddChallengeResponse(const ArenaAddChallengeResponse& from);

  inline ArenaAddChallengeResponse& operator=(const ArenaAddChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaAddChallengeResponse& default_instance();

  void Swap(ArenaAddChallengeResponse* other);

  // implements Message ----------------------------------------------

  ArenaAddChallengeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaAddChallengeResponse& from);
  void MergeFrom(const ArenaAddChallengeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cur_num = 1;
  inline bool has_cur_num() const;
  inline void clear_cur_num();
  static const int kCurNumFieldNumber = 1;
  inline ::google::protobuf::int32 cur_num() const;
  inline void set_cur_num(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.ArenaAddChallengeResponse)
 private:
  inline void set_has_cur_num();
  inline void clear_has_cur_num();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cur_num_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_AssignDesc_MessageArenaChallenge_2eproto();
  friend void protobuf_ShutdownFile_MessageArenaChallenge_2eproto();

  void InitAsDefaultInstance();
  static ArenaAddChallengeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ArenaChallengeRequest

// optional int64 pid = 1;
inline bool ArenaChallengeRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaChallengeRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaChallengeRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaChallengeRequest::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 ArenaChallengeRequest::pid() const {
  return pid_;
}
inline void ArenaChallengeRequest::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// -------------------------------------------------------------------

// ArenaChallengeResponse

// optional int64 pid = 1;
inline bool ArenaChallengeResponse::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaChallengeResponse::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaChallengeResponse::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaChallengeResponse::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 ArenaChallengeResponse::pid() const {
  return pid_;
}
inline void ArenaChallengeResponse::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 state = 2;
inline bool ArenaChallengeResponse::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaChallengeResponse::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaChallengeResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaChallengeResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ArenaChallengeResponse::state() const {
  return state_;
}
inline void ArenaChallengeResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 result = 3;
inline bool ArenaChallengeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaChallengeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaChallengeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaChallengeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaChallengeResponse::result() const {
  return result_;
}
inline void ArenaChallengeResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ArenaAddChallengeRequest

// optional int32 num = 1;
inline bool ArenaAddChallengeRequest::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaAddChallengeRequest::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaAddChallengeRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaAddChallengeRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ArenaAddChallengeRequest::num() const {
  return num_;
}
inline void ArenaAddChallengeRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// ArenaAddChallengeResponse

// optional int32 cur_num = 1;
inline bool ArenaAddChallengeResponse::has_cur_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaAddChallengeResponse::set_has_cur_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaAddChallengeResponse::clear_has_cur_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaAddChallengeResponse::clear_cur_num() {
  cur_num_ = 0;
  clear_has_cur_num();
}
inline ::google::protobuf::int32 ArenaAddChallengeResponse::cur_num() const {
  return cur_num_;
}
inline void ArenaAddChallengeResponse::set_cur_num(::google::protobuf::int32 value) {
  set_has_cur_num();
  cur_num_ = value;
}

// optional int32 result = 2;
inline bool ArenaAddChallengeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaAddChallengeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaAddChallengeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaAddChallengeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaAddChallengeResponse::result() const {
  return result_;
}
inline void ArenaAddChallengeResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageArenaChallenge_2eproto__INCLUDED
