// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* RegistServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncLoadNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncLoadNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetControl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageServer_2eproto() {
  protobuf_AddDesc_MessageServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageServer.proto");
  GOOGLE_CHECK(file != NULL);
  RegistServer_descriptor_ = file->message_type(0);
  static const int RegistServer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, extport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, extip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, world_),
  };
  RegistServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistServer_descriptor_,
      RegistServer::default_instance_,
      RegistServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistServer));
  SyncServer_descriptor_ = file->message_type(1);
  static const int SyncServer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, extport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, extip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, world_),
  };
  SyncServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncServer_descriptor_,
      SyncServer::default_instance_,
      SyncServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncServer));
  SyncLoadNumber_descriptor_ = file->message_type(2);
  static const int SyncLoadNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncLoadNumber, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncLoadNumber, count_),
  };
  SyncLoadNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncLoadNumber_descriptor_,
      SyncLoadNumber::default_instance_,
      SyncLoadNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncLoadNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncLoadNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncLoadNumber));
  WorldDataRequest_descriptor_ = file->message_type(3);
  static const int WorldDataRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataRequest, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataRequest, server_),
  };
  WorldDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldDataRequest_descriptor_,
      WorldDataRequest::default_instance_,
      WorldDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldDataRequest));
  WorldDataResponse_descriptor_ = file->message_type(4);
  static const int WorldDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataResponse, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataResponse, heroid_),
  };
  WorldDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldDataResponse_descriptor_,
      WorldDataResponse::default_instance_,
      WorldDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldDataResponse));
  NetControl_descriptor_ = file->message_type(5);
  static const int NetControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetControl, sock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetControl, error_),
  };
  NetControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetControl_descriptor_,
      NetControl::default_instance_,
      NetControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetControl));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistServer_descriptor_, &RegistServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncServer_descriptor_, &SyncServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncLoadNumber_descriptor_, &SyncLoadNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldDataRequest_descriptor_, &WorldDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldDataResponse_descriptor_, &WorldDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetControl_descriptor_, &NetControl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageServer_2eproto() {
  delete RegistServer::default_instance_;
  delete RegistServer_reflection_;
  delete SyncServer::default_instance_;
  delete SyncServer_reflection_;
  delete SyncLoadNumber::default_instance_;
  delete SyncLoadNumber_reflection_;
  delete WorldDataRequest::default_instance_;
  delete WorldDataRequest_reflection_;
  delete WorldDataResponse::default_instance_;
  delete WorldDataResponse_reflection_;
  delete NetControl::default_instance_;
  delete NetControl_reflection_;
}

void protobuf_AddDesc_MessageServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MessageServer.proto\022\007Message\"q\n\014Regist"
    "Server\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004port"
    "\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t\022\017\n\007extport\030\005 \001(\005\022\r\n\005e"
    "xtip\030\006 \001(\t\022\r\n\005world\030\007 \001(\005\"o\n\nSyncServer\022"
    "\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004port\030\003 \001(\005\022"
    "\n\n\002ip\030\004 \001(\t\022\017\n\007extport\030\005 \001(\005\022\r\n\005extip\030\006 "
    "\001(\t\022\r\n\005world\030\007 \001(\005\"/\n\016SyncLoadNumber\022\016\n\006"
    "server\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"1\n\020WorldData"
    "Request\022\r\n\005world\030\001 \001(\005\022\016\n\006server\030\002 \001(\005\"E"
    "\n\021WorldDataResponse\022\020\n\010playerid\030\001 \001(\003\022\016\n"
    "\006itemid\030\002 \001(\003\022\016\n\006heroid\030\003 \001(\003\")\n\nNetCont"
    "rol\022\014\n\004sock\030\001 \002(\005\022\r\n\005error\030\002 \001(\005", 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageServer.proto", &protobuf_RegisterTypes);
  RegistServer::default_instance_ = new RegistServer();
  SyncServer::default_instance_ = new SyncServer();
  SyncLoadNumber::default_instance_ = new SyncLoadNumber();
  WorldDataRequest::default_instance_ = new WorldDataRequest();
  WorldDataResponse::default_instance_ = new WorldDataResponse();
  NetControl::default_instance_ = new NetControl();
  RegistServer::default_instance_->InitAsDefaultInstance();
  SyncServer::default_instance_->InitAsDefaultInstance();
  SyncLoadNumber::default_instance_->InitAsDefaultInstance();
  WorldDataRequest::default_instance_->InitAsDefaultInstance();
  WorldDataResponse::default_instance_->InitAsDefaultInstance();
  NetControl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageServer_2eproto {
  StaticDescriptorInitializer_MessageServer_2eproto() {
    protobuf_AddDesc_MessageServer_2eproto();
  }
} static_descriptor_initializer_MessageServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RegistServer::kIdFieldNumber;
const int RegistServer::kTypeFieldNumber;
const int RegistServer::kPortFieldNumber;
const int RegistServer::kIpFieldNumber;
const int RegistServer::kExtportFieldNumber;
const int RegistServer::kExtipFieldNumber;
const int RegistServer::kWorldFieldNumber;
#endif  // !_MSC_VER

RegistServer::RegistServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegistServer::InitAsDefaultInstance() {
}

RegistServer::RegistServer(const RegistServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegistServer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  port_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extport_ = 0;
  extip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistServer::~RegistServer() {
  SharedDtor();
}

void RegistServer::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (extip_ != &::google::protobuf::internal::kEmptyString) {
    delete extip_;
  }
  if (this != default_instance_) {
  }
}

void RegistServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistServer_descriptor_;
}

const RegistServer& RegistServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageServer_2eproto();
  return *default_instance_;
}

RegistServer* RegistServer::default_instance_ = NULL;

RegistServer* RegistServer::New() const {
  return new RegistServer;
}

void RegistServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    port_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    extport_ = 0;
    if (has_extip()) {
      if (extip_ != &::google::protobuf::internal::kEmptyString) {
        extip_->clear();
      }
    }
    world_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_extport;
        break;
      }

      // optional int32 extport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extport_)));
          set_has_extport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_extip;
        break;
      }

      // optional string extip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extip().data(), this->extip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_world;
        break;
      }

      // optional int32 world = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_)));
          set_has_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional int32 extport = 5;
  if (has_extport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->extport(), output);
  }

  // optional string extip = 6;
  if (has_extip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extip().data(), this->extip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->extip(), output);
  }

  // optional int32 world = 7;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->world(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegistServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional int32 extport = 5;
  if (has_extport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->extport(), target);
  }

  // optional string extip = 6;
  if (has_extip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extip().data(), this->extip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extip(), target);
  }

  // optional int32 world = 7;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->world(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegistServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 extport = 5;
    if (has_extport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extport());
    }

    // optional string extip = 6;
    if (has_extip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extip());
    }

    // optional int32 world = 7;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistServer::MergeFrom(const RegistServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_extport()) {
      set_extport(from.extport());
    }
    if (from.has_extip()) {
      set_extip(from.extip());
    }
    if (from.has_world()) {
      set_world(from.world());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistServer::CopyFrom(const RegistServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistServer::IsInitialized() const {

  return true;
}

void RegistServer::Swap(RegistServer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(extport_, other->extport_);
    std::swap(extip_, other->extip_);
    std::swap(world_, other->world_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistServer_descriptor_;
  metadata.reflection = RegistServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncServer::kIdFieldNumber;
const int SyncServer::kTypeFieldNumber;
const int SyncServer::kPortFieldNumber;
const int SyncServer::kIpFieldNumber;
const int SyncServer::kExtportFieldNumber;
const int SyncServer::kExtipFieldNumber;
const int SyncServer::kWorldFieldNumber;
#endif  // !_MSC_VER

SyncServer::SyncServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncServer::InitAsDefaultInstance() {
}

SyncServer::SyncServer(const SyncServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncServer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  port_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extport_ = 0;
  extip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncServer::~SyncServer() {
  SharedDtor();
}

void SyncServer::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (extip_ != &::google::protobuf::internal::kEmptyString) {
    delete extip_;
  }
  if (this != default_instance_) {
  }
}

void SyncServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncServer_descriptor_;
}

const SyncServer& SyncServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageServer_2eproto();
  return *default_instance_;
}

SyncServer* SyncServer::default_instance_ = NULL;

SyncServer* SyncServer::New() const {
  return new SyncServer;
}

void SyncServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    port_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    extport_ = 0;
    if (has_extip()) {
      if (extip_ != &::google::protobuf::internal::kEmptyString) {
        extip_->clear();
      }
    }
    world_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_extport;
        break;
      }

      // optional int32 extport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extport_)));
          set_has_extport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_extip;
        break;
      }

      // optional string extip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extip().data(), this->extip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_world;
        break;
      }

      // optional int32 world = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_)));
          set_has_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional int32 extport = 5;
  if (has_extport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->extport(), output);
  }

  // optional string extip = 6;
  if (has_extip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extip().data(), this->extip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->extip(), output);
  }

  // optional int32 world = 7;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->world(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional int32 extport = 5;
  if (has_extport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->extport(), target);
  }

  // optional string extip = 6;
  if (has_extip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extip().data(), this->extip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extip(), target);
  }

  // optional int32 world = 7;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->world(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 extport = 5;
    if (has_extport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extport());
    }

    // optional string extip = 6;
    if (has_extip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extip());
    }

    // optional int32 world = 7;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncServer::MergeFrom(const SyncServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_extport()) {
      set_extport(from.extport());
    }
    if (from.has_extip()) {
      set_extip(from.extip());
    }
    if (from.has_world()) {
      set_world(from.world());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncServer::CopyFrom(const SyncServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncServer::IsInitialized() const {

  return true;
}

void SyncServer::Swap(SyncServer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(extport_, other->extport_);
    std::swap(extip_, other->extip_);
    std::swap(world_, other->world_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncServer_descriptor_;
  metadata.reflection = SyncServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncLoadNumber::kServerFieldNumber;
const int SyncLoadNumber::kCountFieldNumber;
#endif  // !_MSC_VER

SyncLoadNumber::SyncLoadNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncLoadNumber::InitAsDefaultInstance() {
}

SyncLoadNumber::SyncLoadNumber(const SyncLoadNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncLoadNumber::SharedCtor() {
  _cached_size_ = 0;
  server_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncLoadNumber::~SyncLoadNumber() {
  SharedDtor();
}

void SyncLoadNumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncLoadNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncLoadNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncLoadNumber_descriptor_;
}

const SyncLoadNumber& SyncLoadNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageServer_2eproto();
  return *default_instance_;
}

SyncLoadNumber* SyncLoadNumber::default_instance_ = NULL;

SyncLoadNumber* SyncLoadNumber::New() const {
  return new SyncLoadNumber;
}

void SyncLoadNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncLoadNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_)));
          set_has_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncLoadNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncLoadNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncLoadNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncLoadNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncLoadNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncLoadNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncLoadNumber::MergeFrom(const SyncLoadNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncLoadNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncLoadNumber::CopyFrom(const SyncLoadNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncLoadNumber::IsInitialized() const {

  return true;
}

void SyncLoadNumber::Swap(SyncLoadNumber* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncLoadNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncLoadNumber_descriptor_;
  metadata.reflection = SyncLoadNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldDataRequest::kWorldFieldNumber;
const int WorldDataRequest::kServerFieldNumber;
#endif  // !_MSC_VER

WorldDataRequest::WorldDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldDataRequest::InitAsDefaultInstance() {
}

WorldDataRequest::WorldDataRequest(const WorldDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldDataRequest::SharedCtor() {
  _cached_size_ = 0;
  world_ = 0;
  server_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldDataRequest::~WorldDataRequest() {
  SharedDtor();
}

void WorldDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldDataRequest_descriptor_;
}

const WorldDataRequest& WorldDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageServer_2eproto();
  return *default_instance_;
}

WorldDataRequest* WorldDataRequest::default_instance_ = NULL;

WorldDataRequest* WorldDataRequest::New() const {
  return new WorldDataRequest;
}

void WorldDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    world_ = 0;
    server_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 world = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_)));
          set_has_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server;
        break;
      }

      // optional int32 server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_)));
          set_has_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 world = 1;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world(), output);
  }

  // optional int32 server = 2;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 world = 1;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world(), target);
  }

  // optional int32 server = 2;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 world = 1;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world());
    }

    // optional int32 server = 2;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldDataRequest::MergeFrom(const WorldDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world()) {
      set_world(from.world());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldDataRequest::CopyFrom(const WorldDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldDataRequest::IsInitialized() const {

  return true;
}

void WorldDataRequest::Swap(WorldDataRequest* other) {
  if (other != this) {
    std::swap(world_, other->world_);
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldDataRequest_descriptor_;
  metadata.reflection = WorldDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldDataResponse::kPlayeridFieldNumber;
const int WorldDataResponse::kItemidFieldNumber;
const int WorldDataResponse::kHeroidFieldNumber;
#endif  // !_MSC_VER

WorldDataResponse::WorldDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldDataResponse::InitAsDefaultInstance() {
}

WorldDataResponse::WorldDataResponse(const WorldDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldDataResponse::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  heroid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldDataResponse::~WorldDataResponse() {
  SharedDtor();
}

void WorldDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldDataResponse_descriptor_;
}

const WorldDataResponse& WorldDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageServer_2eproto();
  return *default_instance_;
}

WorldDataResponse* WorldDataResponse::default_instance_ = NULL;

WorldDataResponse* WorldDataResponse::New() const {
  return new WorldDataResponse;
}

void WorldDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    itemid_ = GOOGLE_LONGLONG(0);
    heroid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroid;
        break;
      }

      // optional int64 heroid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int64 heroid = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int64 heroid = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int64 heroid = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldDataResponse::MergeFrom(const WorldDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldDataResponse::CopyFrom(const WorldDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldDataResponse::IsInitialized() const {

  return true;
}

void WorldDataResponse::Swap(WorldDataResponse* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(itemid_, other->itemid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldDataResponse_descriptor_;
  metadata.reflection = WorldDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetControl::kSockFieldNumber;
const int NetControl::kErrorFieldNumber;
#endif  // !_MSC_VER

NetControl::NetControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetControl::InitAsDefaultInstance() {
}

NetControl::NetControl(const NetControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetControl::SharedCtor() {
  _cached_size_ = 0;
  sock_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetControl::~NetControl() {
  SharedDtor();
}

void NetControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetControl_descriptor_;
}

const NetControl& NetControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageServer_2eproto();
  return *default_instance_;
}

NetControl* NetControl::default_instance_ = NULL;

NetControl* NetControl::New() const {
  return new NetControl;
}

void NetControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sock_ = 0;
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sock_)));
          set_has_sock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional int32 error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sock = 1;
  if (has_sock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sock(), output);
  }

  // optional int32 error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sock = 1;
  if (has_sock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sock(), target);
  }

  // optional int32 error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sock = 1;
    if (has_sock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sock());
    }

    // optional int32 error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetControl::MergeFrom(const NetControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sock()) {
      set_sock(from.sock());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetControl::CopyFrom(const NetControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetControl::Swap(NetControl* other) {
  if (other != this) {
    std::swap(sock_, other->sock_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetControl_descriptor_;
  metadata.reflection = NetControl_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
