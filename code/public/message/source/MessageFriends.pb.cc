// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageFriends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageFriends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* FriendsAddRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsAddRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsAddResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsAddResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsDelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsDelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsDelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsDelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsAddNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsAddNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsStateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsStateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsRequestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsRequestNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsDelRequestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsDelRequestRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageFriends_2eproto() {
  protobuf_AddDesc_MessageFriends_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageFriends.proto");
  GOOGLE_CHECK(file != NULL);
  FriendsAddRequest_descriptor_ = file->message_type(0);
  static const int FriendsAddRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddRequest, src_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddRequest, dst_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddRequest, dst_name_),
  };
  FriendsAddRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsAddRequest_descriptor_,
      FriendsAddRequest::default_instance_,
      FriendsAddRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsAddRequest));
  FriendsAddResponse_descriptor_ = file->message_type(1);
  static const int FriendsAddResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddResponse, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddResponse, state_),
  };
  FriendsAddResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsAddResponse_descriptor_,
      FriendsAddResponse::default_instance_,
      FriendsAddResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsAddResponse));
  FriendsDelRequest_descriptor_ = file->message_type(2);
  static const int FriendsDelRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelRequest, src_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelRequest, dst_pid_),
  };
  FriendsDelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsDelRequest_descriptor_,
      FriendsDelRequest::default_instance_,
      FriendsDelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsDelRequest));
  FriendsDelResponse_descriptor_ = file->message_type(3);
  static const int FriendsDelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelResponse, dst_pid_),
  };
  FriendsDelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsDelResponse_descriptor_,
      FriendsDelResponse::default_instance_,
      FriendsDelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsDelResponse));
  FriendsAddNotify_descriptor_ = file->message_type(4);
  static const int FriendsAddNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddNotify, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddNotify, state_),
  };
  FriendsAddNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsAddNotify_descriptor_,
      FriendsAddNotify::default_instance_,
      FriendsAddNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsAddNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsAddNotify));
  FriendsStateNotify_descriptor_ = file->message_type(5);
  static const int FriendsStateNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsStateNotify, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsStateNotify, state_),
  };
  FriendsStateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsStateNotify_descriptor_,
      FriendsStateNotify::default_instance_,
      FriendsStateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsStateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsStateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsStateNotify));
  FriendsRequestNotify_descriptor_ = file->message_type(6);
  static const int FriendsRequestNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsRequestNotify, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsRequestNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsRequestNotify, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsRequestNotify, name_),
  };
  FriendsRequestNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsRequestNotify_descriptor_,
      FriendsRequestNotify::default_instance_,
      FriendsRequestNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsRequestNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsRequestNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsRequestNotify));
  FriendsDelRequestRequest_descriptor_ = file->message_type(7);
  static const int FriendsDelRequestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelRequestRequest, pid_),
  };
  FriendsDelRequestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsDelRequestRequest_descriptor_,
      FriendsDelRequestRequest::default_instance_,
      FriendsDelRequestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelRequestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsDelRequestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsDelRequestRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageFriends_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsAddRequest_descriptor_, &FriendsAddRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsAddResponse_descriptor_, &FriendsAddResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsDelRequest_descriptor_, &FriendsDelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsDelResponse_descriptor_, &FriendsDelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsAddNotify_descriptor_, &FriendsAddNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsStateNotify_descriptor_, &FriendsStateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsRequestNotify_descriptor_, &FriendsRequestNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsDelRequestRequest_descriptor_, &FriendsDelRequestRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageFriends_2eproto() {
  delete FriendsAddRequest::default_instance_;
  delete FriendsAddRequest_reflection_;
  delete FriendsAddResponse::default_instance_;
  delete FriendsAddResponse_reflection_;
  delete FriendsDelRequest::default_instance_;
  delete FriendsDelRequest_reflection_;
  delete FriendsDelResponse::default_instance_;
  delete FriendsDelResponse_reflection_;
  delete FriendsAddNotify::default_instance_;
  delete FriendsAddNotify_reflection_;
  delete FriendsStateNotify::default_instance_;
  delete FriendsStateNotify_reflection_;
  delete FriendsRequestNotify::default_instance_;
  delete FriendsRequestNotify_reflection_;
  delete FriendsDelRequestRequest::default_instance_;
  delete FriendsDelRequestRequest_reflection_;
}

void protobuf_AddDesc_MessageFriends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Message::protobuf_AddDesc_MessageFriend_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MessageFriends.proto\022\007Message\032\023Message"
    "Friend.proto\"G\n\021FriendsAddRequest\022\017\n\007src"
    "_pid\030\001 \001(\003\022\017\n\007dst_pid\030\002 \001(\003\022\020\n\010dst_name\030"
    "\003 \001(\t\"T\n\022FriendsAddResponse\022\016\n\006result\030\001 "
    "\001(\005\022\037\n\006friend\030\002 \001(\0132\017.Message.Friend\022\r\n\005"
    "state\030\003 \001(\005\"5\n\021FriendsDelRequest\022\017\n\007src_"
    "pid\030\001 \001(\003\022\017\n\007dst_pid\030\002 \001(\003\"5\n\022FriendsDel"
    "Response\022\016\n\006result\030\001 \001(\005\022\017\n\007dst_pid\030\002 \001("
    "\003\"B\n\020FriendsAddNotify\022\037\n\006friend\030\001 \001(\0132\017."
    "Message.Friend\022\r\n\005state\030\002 \001(\005\"0\n\022Friends"
    "StateNotify\022\013\n\003pid\030\001 \001(\003\022\r\n\005state\030\002 \001(\005\""
    "Q\n\024FriendsRequestNotify\022\013\n\003pid\030\001 \001(\003\022\r\n\005"
    "level\030\002 \001(\005\022\017\n\007fighter\030\003 \001(\005\022\014\n\004name\030\004 \001"
    "(\t\"\'\n\030FriendsDelRequestRequest\022\013\n\003pid\030\001 "
    "\001(\003", 563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageFriends.proto", &protobuf_RegisterTypes);
  FriendsAddRequest::default_instance_ = new FriendsAddRequest();
  FriendsAddResponse::default_instance_ = new FriendsAddResponse();
  FriendsDelRequest::default_instance_ = new FriendsDelRequest();
  FriendsDelResponse::default_instance_ = new FriendsDelResponse();
  FriendsAddNotify::default_instance_ = new FriendsAddNotify();
  FriendsStateNotify::default_instance_ = new FriendsStateNotify();
  FriendsRequestNotify::default_instance_ = new FriendsRequestNotify();
  FriendsDelRequestRequest::default_instance_ = new FriendsDelRequestRequest();
  FriendsAddRequest::default_instance_->InitAsDefaultInstance();
  FriendsAddResponse::default_instance_->InitAsDefaultInstance();
  FriendsDelRequest::default_instance_->InitAsDefaultInstance();
  FriendsDelResponse::default_instance_->InitAsDefaultInstance();
  FriendsAddNotify::default_instance_->InitAsDefaultInstance();
  FriendsStateNotify::default_instance_->InitAsDefaultInstance();
  FriendsRequestNotify::default_instance_->InitAsDefaultInstance();
  FriendsDelRequestRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageFriends_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageFriends_2eproto {
  StaticDescriptorInitializer_MessageFriends_2eproto() {
    protobuf_AddDesc_MessageFriends_2eproto();
  }
} static_descriptor_initializer_MessageFriends_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FriendsAddRequest::kSrcPidFieldNumber;
const int FriendsAddRequest::kDstPidFieldNumber;
const int FriendsAddRequest::kDstNameFieldNumber;
#endif  // !_MSC_VER

FriendsAddRequest::FriendsAddRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsAddRequest::InitAsDefaultInstance() {
}

FriendsAddRequest::FriendsAddRequest(const FriendsAddRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsAddRequest::SharedCtor() {
  _cached_size_ = 0;
  src_pid_ = GOOGLE_LONGLONG(0);
  dst_pid_ = GOOGLE_LONGLONG(0);
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsAddRequest::~FriendsAddRequest() {
  SharedDtor();
}

void FriendsAddRequest::SharedDtor() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
  }
}

void FriendsAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsAddRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsAddRequest_descriptor_;
}

const FriendsAddRequest& FriendsAddRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsAddRequest* FriendsAddRequest::default_instance_ = NULL;

FriendsAddRequest* FriendsAddRequest::New() const {
  return new FriendsAddRequest;
}

void FriendsAddRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_pid_ = GOOGLE_LONGLONG(0);
    dst_pid_ = GOOGLE_LONGLONG(0);
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 src_pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_pid_)));
          set_has_src_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_pid;
        break;
      }

      // optional int64 dst_pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_pid_)));
          set_has_dst_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dst_name;
        break;
      }

      // optional string dst_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst_name().data(), this->dst_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 src_pid = 1;
  if (has_src_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_pid(), output);
  }

  // optional int64 dst_pid = 2;
  if (has_dst_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dst_pid(), output);
  }

  // optional string dst_name = 3;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst_name().data(), this->dst_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dst_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsAddRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 src_pid = 1;
  if (has_src_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_pid(), target);
  }

  // optional int64 dst_pid = 2;
  if (has_dst_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dst_pid(), target);
  }

  // optional string dst_name = 3;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst_name().data(), this->dst_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dst_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsAddRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 src_pid = 1;
    if (has_src_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_pid());
    }

    // optional int64 dst_pid = 2;
    if (has_dst_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_pid());
    }

    // optional string dst_name = 3;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsAddRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsAddRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsAddRequest::MergeFrom(const FriendsAddRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pid()) {
      set_src_pid(from.src_pid());
    }
    if (from.has_dst_pid()) {
      set_dst_pid(from.dst_pid());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsAddRequest::CopyFrom(const FriendsAddRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsAddRequest::IsInitialized() const {

  return true;
}

void FriendsAddRequest::Swap(FriendsAddRequest* other) {
  if (other != this) {
    std::swap(src_pid_, other->src_pid_);
    std::swap(dst_pid_, other->dst_pid_);
    std::swap(dst_name_, other->dst_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsAddRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsAddRequest_descriptor_;
  metadata.reflection = FriendsAddRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsAddResponse::kResultFieldNumber;
const int FriendsAddResponse::kFriendFieldNumber;
const int FriendsAddResponse::kStateFieldNumber;
#endif  // !_MSC_VER

FriendsAddResponse::FriendsAddResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsAddResponse::InitAsDefaultInstance() {
  friend__ = const_cast< ::Message::Friend*>(&::Message::Friend::default_instance());
}

FriendsAddResponse::FriendsAddResponse(const FriendsAddResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsAddResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  friend__ = NULL;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsAddResponse::~FriendsAddResponse() {
  SharedDtor();
}

void FriendsAddResponse::SharedDtor() {
  if (this != default_instance_) {
    delete friend__;
  }
}

void FriendsAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsAddResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsAddResponse_descriptor_;
}

const FriendsAddResponse& FriendsAddResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsAddResponse* FriendsAddResponse::default_instance_ = NULL;

FriendsAddResponse* FriendsAddResponse::New() const {
  return new FriendsAddResponse;
}

void FriendsAddResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_friend_()) {
      if (friend__ != NULL) friend__->::Message::Friend::Clear();
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend;
        break;
      }

      // optional .Message.Friend friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .Message.Friend friend = 2;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsAddResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .Message.Friend friend = 2;
  if (has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsAddResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .Message.Friend friend = 2;
    if (has_friend_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsAddResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsAddResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsAddResponse::MergeFrom(const FriendsAddResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_friend_()) {
      mutable_friend_()->::Message::Friend::MergeFrom(from.friend_());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsAddResponse::CopyFrom(const FriendsAddResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsAddResponse::IsInitialized() const {

  return true;
}

void FriendsAddResponse::Swap(FriendsAddResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(friend__, other->friend__);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsAddResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsAddResponse_descriptor_;
  metadata.reflection = FriendsAddResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsDelRequest::kSrcPidFieldNumber;
const int FriendsDelRequest::kDstPidFieldNumber;
#endif  // !_MSC_VER

FriendsDelRequest::FriendsDelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsDelRequest::InitAsDefaultInstance() {
}

FriendsDelRequest::FriendsDelRequest(const FriendsDelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsDelRequest::SharedCtor() {
  _cached_size_ = 0;
  src_pid_ = GOOGLE_LONGLONG(0);
  dst_pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsDelRequest::~FriendsDelRequest() {
  SharedDtor();
}

void FriendsDelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsDelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsDelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsDelRequest_descriptor_;
}

const FriendsDelRequest& FriendsDelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsDelRequest* FriendsDelRequest::default_instance_ = NULL;

FriendsDelRequest* FriendsDelRequest::New() const {
  return new FriendsDelRequest;
}

void FriendsDelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_pid_ = GOOGLE_LONGLONG(0);
    dst_pid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsDelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 src_pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_pid_)));
          set_has_src_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_pid;
        break;
      }

      // optional int64 dst_pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_pid_)));
          set_has_dst_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsDelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 src_pid = 1;
  if (has_src_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_pid(), output);
  }

  // optional int64 dst_pid = 2;
  if (has_dst_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dst_pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsDelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 src_pid = 1;
  if (has_src_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_pid(), target);
  }

  // optional int64 dst_pid = 2;
  if (has_dst_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dst_pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsDelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 src_pid = 1;
    if (has_src_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_pid());
    }

    // optional int64 dst_pid = 2;
    if (has_dst_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsDelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsDelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsDelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsDelRequest::MergeFrom(const FriendsDelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pid()) {
      set_src_pid(from.src_pid());
    }
    if (from.has_dst_pid()) {
      set_dst_pid(from.dst_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsDelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsDelRequest::CopyFrom(const FriendsDelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsDelRequest::IsInitialized() const {

  return true;
}

void FriendsDelRequest::Swap(FriendsDelRequest* other) {
  if (other != this) {
    std::swap(src_pid_, other->src_pid_);
    std::swap(dst_pid_, other->dst_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsDelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsDelRequest_descriptor_;
  metadata.reflection = FriendsDelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsDelResponse::kResultFieldNumber;
const int FriendsDelResponse::kDstPidFieldNumber;
#endif  // !_MSC_VER

FriendsDelResponse::FriendsDelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsDelResponse::InitAsDefaultInstance() {
}

FriendsDelResponse::FriendsDelResponse(const FriendsDelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsDelResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  dst_pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsDelResponse::~FriendsDelResponse() {
  SharedDtor();
}

void FriendsDelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsDelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsDelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsDelResponse_descriptor_;
}

const FriendsDelResponse& FriendsDelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsDelResponse* FriendsDelResponse::default_instance_ = NULL;

FriendsDelResponse* FriendsDelResponse::New() const {
  return new FriendsDelResponse;
}

void FriendsDelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    dst_pid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsDelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_pid;
        break;
      }

      // optional int64 dst_pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_pid_)));
          set_has_dst_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsDelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 dst_pid = 2;
  if (has_dst_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dst_pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsDelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 dst_pid = 2;
  if (has_dst_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dst_pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsDelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 dst_pid = 2;
    if (has_dst_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsDelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsDelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsDelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsDelResponse::MergeFrom(const FriendsDelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dst_pid()) {
      set_dst_pid(from.dst_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsDelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsDelResponse::CopyFrom(const FriendsDelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsDelResponse::IsInitialized() const {

  return true;
}

void FriendsDelResponse::Swap(FriendsDelResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dst_pid_, other->dst_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsDelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsDelResponse_descriptor_;
  metadata.reflection = FriendsDelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsAddNotify::kFriendFieldNumber;
const int FriendsAddNotify::kStateFieldNumber;
#endif  // !_MSC_VER

FriendsAddNotify::FriendsAddNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsAddNotify::InitAsDefaultInstance() {
  friend__ = const_cast< ::Message::Friend*>(&::Message::Friend::default_instance());
}

FriendsAddNotify::FriendsAddNotify(const FriendsAddNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsAddNotify::SharedCtor() {
  _cached_size_ = 0;
  friend__ = NULL;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsAddNotify::~FriendsAddNotify() {
  SharedDtor();
}

void FriendsAddNotify::SharedDtor() {
  if (this != default_instance_) {
    delete friend__;
  }
}

void FriendsAddNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsAddNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsAddNotify_descriptor_;
}

const FriendsAddNotify& FriendsAddNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsAddNotify* FriendsAddNotify::default_instance_ = NULL;

FriendsAddNotify* FriendsAddNotify::New() const {
  return new FriendsAddNotify;
}

void FriendsAddNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friend_()) {
      if (friend__ != NULL) friend__->::Message::Friend::Clear();
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsAddNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Message.Friend friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsAddNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Message.Friend friend = 1;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsAddNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Message.Friend friend = 1;
  if (has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsAddNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Message.Friend friend = 1;
    if (has_friend_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsAddNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsAddNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsAddNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsAddNotify::MergeFrom(const FriendsAddNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_()) {
      mutable_friend_()->::Message::Friend::MergeFrom(from.friend_());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsAddNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsAddNotify::CopyFrom(const FriendsAddNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsAddNotify::IsInitialized() const {

  return true;
}

void FriendsAddNotify::Swap(FriendsAddNotify* other) {
  if (other != this) {
    std::swap(friend__, other->friend__);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsAddNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsAddNotify_descriptor_;
  metadata.reflection = FriendsAddNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsStateNotify::kPidFieldNumber;
const int FriendsStateNotify::kStateFieldNumber;
#endif  // !_MSC_VER

FriendsStateNotify::FriendsStateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsStateNotify::InitAsDefaultInstance() {
}

FriendsStateNotify::FriendsStateNotify(const FriendsStateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsStateNotify::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsStateNotify::~FriendsStateNotify() {
  SharedDtor();
}

void FriendsStateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsStateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsStateNotify_descriptor_;
}

const FriendsStateNotify& FriendsStateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsStateNotify* FriendsStateNotify::default_instance_ = NULL;

FriendsStateNotify* FriendsStateNotify::New() const {
  return new FriendsStateNotify;
}

void FriendsStateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsStateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsStateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsStateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsStateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsStateNotify::MergeFrom(const FriendsStateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsStateNotify::CopyFrom(const FriendsStateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsStateNotify::IsInitialized() const {

  return true;
}

void FriendsStateNotify::Swap(FriendsStateNotify* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsStateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsStateNotify_descriptor_;
  metadata.reflection = FriendsStateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsRequestNotify::kPidFieldNumber;
const int FriendsRequestNotify::kLevelFieldNumber;
const int FriendsRequestNotify::kFighterFieldNumber;
const int FriendsRequestNotify::kNameFieldNumber;
#endif  // !_MSC_VER

FriendsRequestNotify::FriendsRequestNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsRequestNotify::InitAsDefaultInstance() {
}

FriendsRequestNotify::FriendsRequestNotify(const FriendsRequestNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsRequestNotify::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  fighter_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsRequestNotify::~FriendsRequestNotify() {
  SharedDtor();
}

void FriendsRequestNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FriendsRequestNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsRequestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsRequestNotify_descriptor_;
}

const FriendsRequestNotify& FriendsRequestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsRequestNotify* FriendsRequestNotify::default_instance_ = NULL;

FriendsRequestNotify* FriendsRequestNotify::New() const {
  return new FriendsRequestNotify;
}

void FriendsRequestNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    fighter_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsRequestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fighter;
        break;
      }

      // optional int32 fighter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighter_)));
          set_has_fighter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsRequestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 fighter = 3;
  if (has_fighter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fighter(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsRequestNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 fighter = 3;
  if (has_fighter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fighter(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsRequestNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 fighter = 3;
    if (has_fighter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighter());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsRequestNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsRequestNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsRequestNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsRequestNotify::MergeFrom(const FriendsRequestNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fighter()) {
      set_fighter(from.fighter());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsRequestNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsRequestNotify::CopyFrom(const FriendsRequestNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsRequestNotify::IsInitialized() const {

  return true;
}

void FriendsRequestNotify::Swap(FriendsRequestNotify* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(level_, other->level_);
    std::swap(fighter_, other->fighter_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsRequestNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsRequestNotify_descriptor_;
  metadata.reflection = FriendsRequestNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsDelRequestRequest::kPidFieldNumber;
#endif  // !_MSC_VER

FriendsDelRequestRequest::FriendsDelRequestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsDelRequestRequest::InitAsDefaultInstance() {
}

FriendsDelRequestRequest::FriendsDelRequestRequest(const FriendsDelRequestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsDelRequestRequest::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsDelRequestRequest::~FriendsDelRequestRequest() {
  SharedDtor();
}

void FriendsDelRequestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsDelRequestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsDelRequestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsDelRequestRequest_descriptor_;
}

const FriendsDelRequestRequest& FriendsDelRequestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFriends_2eproto();
  return *default_instance_;
}

FriendsDelRequestRequest* FriendsDelRequestRequest::default_instance_ = NULL;

FriendsDelRequestRequest* FriendsDelRequestRequest::New() const {
  return new FriendsDelRequestRequest;
}

void FriendsDelRequestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsDelRequestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsDelRequestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsDelRequestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsDelRequestRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsDelRequestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsDelRequestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsDelRequestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsDelRequestRequest::MergeFrom(const FriendsDelRequestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsDelRequestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsDelRequestRequest::CopyFrom(const FriendsDelRequestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsDelRequestRequest::IsInitialized() const {

  return true;
}

void FriendsDelRequestRequest::Swap(FriendsDelRequestRequest* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsDelRequestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsDelRequestRequest_descriptor_;
  metadata.reflection = FriendsDelRequestRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
