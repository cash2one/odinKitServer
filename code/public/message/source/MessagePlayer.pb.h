// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePlayer.proto

#ifndef PROTOBUF_MessagePlayer_2eproto__INCLUDED
#define PROTOBUF_MessagePlayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessagePlayer_2eproto();
void protobuf_AssignDesc_MessagePlayer_2eproto();
void protobuf_ShutdownFile_MessagePlayer_2eproto();

class PlayerLogin;
class PlayerLogout;
class CreatePlayer;
class DeletePlayer;
class CheckNameRequest;
class CheckNameResponse;
class PlayerCount;
class PlayerAttrSync;
class PlayerAttrSync_Attr;
class PlayerLoadOver;
class ObservePlayerRequest;

// ===================================================================

class PlayerLogin : public ::google::protobuf::Message {
 public:
  PlayerLogin();
  virtual ~PlayerLogin();

  PlayerLogin(const PlayerLogin& from);

  inline PlayerLogin& operator=(const PlayerLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLogin& default_instance();

  void Swap(PlayerLogin* other);

  // implements Message ----------------------------------------------

  PlayerLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerLogin& from);
  void MergeFrom(const PlayerLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int64 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 templateid = 3;
  inline bool has_templateid() const;
  inline void clear_templateid();
  static const int kTemplateidFieldNumber = 3;
  inline ::google::protobuf::int32 templateid() const;
  inline void set_templateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.PlayerLogin)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_templateid();
  inline void clear_has_templateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 templateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerLogin* default_instance_;
};
// -------------------------------------------------------------------

class PlayerLogout : public ::google::protobuf::Message {
 public:
  PlayerLogout();
  virtual ~PlayerLogout();

  PlayerLogout(const PlayerLogout& from);

  inline PlayerLogout& operator=(const PlayerLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLogout& default_instance();

  void Swap(PlayerLogout* other);

  // implements Message ----------------------------------------------

  PlayerLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerLogout& from);
  void MergeFrom(const PlayerLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Message.PlayerLogout)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerLogout* default_instance_;
};
// -------------------------------------------------------------------

class CreatePlayer : public ::google::protobuf::Message {
 public:
  CreatePlayer();
  virtual ~CreatePlayer();

  CreatePlayer(const CreatePlayer& from);

  inline CreatePlayer& operator=(const CreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePlayer& default_instance();

  void Swap(CreatePlayer* other);

  // implements Message ----------------------------------------------

  CreatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatePlayer& from);
  void MergeFrom(const CreatePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int32 server = 2;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline ::google::protobuf::int32 server() const;
  inline void set_server(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 roletemplate = 4;
  inline bool has_roletemplate() const;
  inline void clear_roletemplate();
  static const int kRoletemplateFieldNumber = 4;
  inline ::google::protobuf::int32 roletemplate() const;
  inline void set_roletemplate(::google::protobuf::int32 value);

  // optional int64 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 stunt = 6;
  inline bool has_stunt() const;
  inline void clear_stunt();
  static const int kStuntFieldNumber = 6;
  inline ::google::protobuf::int32 stunt() const;
  inline void set_stunt(::google::protobuf::int32 value);

  // optional int32 quality = 7;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 7;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.CreatePlayer)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_roletemplate();
  inline void clear_has_roletemplate();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_stunt();
  inline void clear_has_stunt();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* name_;
  ::google::protobuf::int32 server_;
  ::google::protobuf::int32 roletemplate_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 stunt_;
  ::google::protobuf::int32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static CreatePlayer* default_instance_;
};
// -------------------------------------------------------------------

class DeletePlayer : public ::google::protobuf::Message {
 public:
  DeletePlayer();
  virtual ~DeletePlayer();

  DeletePlayer(const DeletePlayer& from);

  inline DeletePlayer& operator=(const DeletePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePlayer& default_instance();

  void Swap(DeletePlayer* other);

  // implements Message ----------------------------------------------

  DeletePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeletePlayer& from);
  void MergeFrom(const DeletePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Message.DeletePlayer)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static DeletePlayer* default_instance_;
};
// -------------------------------------------------------------------

class CheckNameRequest : public ::google::protobuf::Message {
 public:
  CheckNameRequest();
  virtual ~CheckNameRequest();

  CheckNameRequest(const CheckNameRequest& from);

  inline CheckNameRequest& operator=(const CheckNameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckNameRequest& default_instance();

  void Swap(CheckNameRequest* other);

  // implements Message ----------------------------------------------

  CheckNameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckNameRequest& from);
  void MergeFrom(const CheckNameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int64 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Message.CheckNameRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 pid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static CheckNameRequest* default_instance_;
};
// -------------------------------------------------------------------

class CheckNameResponse : public ::google::protobuf::Message {
 public:
  CheckNameResponse();
  virtual ~CheckNameResponse();

  CheckNameResponse(const CheckNameResponse& from);

  inline CheckNameResponse& operator=(const CheckNameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckNameResponse& default_instance();

  void Swap(CheckNameResponse* other);

  // implements Message ----------------------------------------------

  CheckNameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckNameResponse& from);
  void MergeFrom(const CheckNameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int64 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Message.CheckNameResponse)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 pid_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static CheckNameResponse* default_instance_;
};
// -------------------------------------------------------------------

class PlayerCount : public ::google::protobuf::Message {
 public:
  PlayerCount();
  virtual ~PlayerCount();

  PlayerCount(const PlayerCount& from);

  inline PlayerCount& operator=(const PlayerCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCount& default_instance();

  void Swap(PlayerCount* other);

  // implements Message ----------------------------------------------

  PlayerCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerCount& from);
  void MergeFrom(const PlayerCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // repeated int64 player = 2;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline ::google::protobuf::int64 player(int index) const;
  inline void set_player(int index, ::google::protobuf::int64 value);
  inline void add_player(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      player() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_player();

  // @@protoc_insertion_point(class_scope:Message.PlayerCount)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > player_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerCount* default_instance_;
};
// -------------------------------------------------------------------

class PlayerAttrSync_Attr : public ::google::protobuf::Message {
 public:
  PlayerAttrSync_Attr();
  virtual ~PlayerAttrSync_Attr();

  PlayerAttrSync_Attr(const PlayerAttrSync_Attr& from);

  inline PlayerAttrSync_Attr& operator=(const PlayerAttrSync_Attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerAttrSync_Attr& default_instance();

  void Swap(PlayerAttrSync_Attr* other);

  // implements Message ----------------------------------------------

  PlayerAttrSync_Attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerAttrSync_Attr& from);
  void MergeFrom(const PlayerAttrSync_Attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 val32 = 2;
  inline bool has_val32() const;
  inline void clear_val32();
  static const int kVal32FieldNumber = 2;
  inline ::google::protobuf::int32 val32() const;
  inline void set_val32(::google::protobuf::int32 value);

  // optional int64 val64 = 3;
  inline bool has_val64() const;
  inline void clear_val64();
  static const int kVal64FieldNumber = 3;
  inline ::google::protobuf::int64 val64() const;
  inline void set_val64(::google::protobuf::int64 value);

  // optional string valstr = 4;
  inline bool has_valstr() const;
  inline void clear_valstr();
  static const int kValstrFieldNumber = 4;
  inline const ::std::string& valstr() const;
  inline void set_valstr(const ::std::string& value);
  inline void set_valstr(const char* value);
  inline void set_valstr(const char* value, size_t size);
  inline ::std::string* mutable_valstr();
  inline ::std::string* release_valstr();
  inline void set_allocated_valstr(::std::string* valstr);

  // @@protoc_insertion_point(class_scope:Message.PlayerAttrSync.Attr)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_val32();
  inline void clear_has_val32();
  inline void set_has_val64();
  inline void clear_has_val64();
  inline void set_has_valstr();
  inline void clear_has_valstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 val32_;
  ::google::protobuf::int64 val64_;
  ::std::string* valstr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerAttrSync_Attr* default_instance_;
};
// -------------------------------------------------------------------

class PlayerAttrSync : public ::google::protobuf::Message {
 public:
  PlayerAttrSync();
  virtual ~PlayerAttrSync();

  PlayerAttrSync(const PlayerAttrSync& from);

  inline PlayerAttrSync& operator=(const PlayerAttrSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerAttrSync& default_instance();

  void Swap(PlayerAttrSync* other);

  // implements Message ----------------------------------------------

  PlayerAttrSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerAttrSync& from);
  void MergeFrom(const PlayerAttrSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerAttrSync_Attr Attr;

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // repeated .Message.PlayerAttrSync.Attr attr = 2;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline const ::Message::PlayerAttrSync_Attr& attr(int index) const;
  inline ::Message::PlayerAttrSync_Attr* mutable_attr(int index);
  inline ::Message::PlayerAttrSync_Attr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::PlayerAttrSync_Attr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::PlayerAttrSync_Attr >*
      mutable_attr();

  // @@protoc_insertion_point(class_scope:Message.PlayerAttrSync)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;
  ::google::protobuf::RepeatedPtrField< ::Message::PlayerAttrSync_Attr > attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerAttrSync* default_instance_;
};
// -------------------------------------------------------------------

class PlayerLoadOver : public ::google::protobuf::Message {
 public:
  PlayerLoadOver();
  virtual ~PlayerLoadOver();

  PlayerLoadOver(const PlayerLoadOver& from);

  inline PlayerLoadOver& operator=(const PlayerLoadOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoadOver& default_instance();

  void Swap(PlayerLoadOver* other);

  // implements Message ----------------------------------------------

  PlayerLoadOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerLoadOver& from);
  void MergeFrom(const PlayerLoadOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Message.PlayerLoadOver)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerLoadOver* default_instance_;
};
// -------------------------------------------------------------------

class ObservePlayerRequest : public ::google::protobuf::Message {
 public:
  ObservePlayerRequest();
  virtual ~ObservePlayerRequest();

  ObservePlayerRequest(const ObservePlayerRequest& from);

  inline ObservePlayerRequest& operator=(const ObservePlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservePlayerRequest& default_instance();

  void Swap(ObservePlayerRequest* other);

  // implements Message ----------------------------------------------

  ObservePlayerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObservePlayerRequest& from);
  void MergeFrom(const ObservePlayerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:Message.ObservePlayerRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* playername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayer_2eproto();
  friend void protobuf_AssignDesc_MessagePlayer_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayer_2eproto();

  void InitAsDefaultInstance();
  static ObservePlayerRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerLogin

// optional int64 uid = 1;
inline bool PlayerLogin::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLogin::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLogin::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLogin::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 PlayerLogin::uid() const {
  return uid_;
}
inline void PlayerLogin::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 pid = 2;
inline bool PlayerLogin::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerLogin::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerLogin::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerLogin::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 PlayerLogin::pid() const {
  return pid_;
}
inline void PlayerLogin::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 templateid = 3;
inline bool PlayerLogin::has_templateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerLogin::set_has_templateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerLogin::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerLogin::clear_templateid() {
  templateid_ = 0;
  clear_has_templateid();
}
inline ::google::protobuf::int32 PlayerLogin::templateid() const {
  return templateid_;
}
inline void PlayerLogin::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
}

// -------------------------------------------------------------------

// PlayerLogout

// optional int64 pid = 1;
inline bool PlayerLogout::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLogout::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLogout::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLogout::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 PlayerLogout::pid() const {
  return pid_;
}
inline void PlayerLogout::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// -------------------------------------------------------------------

// CreatePlayer

// optional int64 uid = 1;
inline bool CreatePlayer::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePlayer::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatePlayer::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatePlayer::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 CreatePlayer::uid() const {
  return uid_;
}
inline void CreatePlayer::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 server = 2;
inline bool CreatePlayer::has_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePlayer::set_has_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatePlayer::clear_has_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatePlayer::clear_server() {
  server_ = 0;
  clear_has_server();
}
inline ::google::protobuf::int32 CreatePlayer::server() const {
  return server_;
}
inline void CreatePlayer::set_server(::google::protobuf::int32 value) {
  set_has_server();
  server_ = value;
}

// optional string name = 3;
inline bool CreatePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatePlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreatePlayer::name() const {
  return *name_;
}
inline void CreatePlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreatePlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreatePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatePlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreatePlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatePlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 roletemplate = 4;
inline bool CreatePlayer::has_roletemplate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatePlayer::set_has_roletemplate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreatePlayer::clear_has_roletemplate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreatePlayer::clear_roletemplate() {
  roletemplate_ = 0;
  clear_has_roletemplate();
}
inline ::google::protobuf::int32 CreatePlayer::roletemplate() const {
  return roletemplate_;
}
inline void CreatePlayer::set_roletemplate(::google::protobuf::int32 value) {
  set_has_roletemplate();
  roletemplate_ = value;
}

// optional int64 pid = 5;
inline bool CreatePlayer::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatePlayer::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreatePlayer::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreatePlayer::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 CreatePlayer::pid() const {
  return pid_;
}
inline void CreatePlayer::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 stunt = 6;
inline bool CreatePlayer::has_stunt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreatePlayer::set_has_stunt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreatePlayer::clear_has_stunt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreatePlayer::clear_stunt() {
  stunt_ = 0;
  clear_has_stunt();
}
inline ::google::protobuf::int32 CreatePlayer::stunt() const {
  return stunt_;
}
inline void CreatePlayer::set_stunt(::google::protobuf::int32 value) {
  set_has_stunt();
  stunt_ = value;
}

// optional int32 quality = 7;
inline bool CreatePlayer::has_quality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreatePlayer::set_has_quality() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreatePlayer::clear_has_quality() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreatePlayer::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 CreatePlayer::quality() const {
  return quality_;
}
inline void CreatePlayer::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// DeletePlayer

// optional int64 pid = 1;
inline bool DeletePlayer::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeletePlayer::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeletePlayer::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeletePlayer::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 DeletePlayer::pid() const {
  return pid_;
}
inline void DeletePlayer::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// -------------------------------------------------------------------

// CheckNameRequest

// optional int64 uid = 1;
inline bool CheckNameRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckNameRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckNameRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckNameRequest::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 CheckNameRequest::uid() const {
  return uid_;
}
inline void CheckNameRequest::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 pid = 2;
inline bool CheckNameRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckNameRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckNameRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckNameRequest::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 CheckNameRequest::pid() const {
  return pid_;
}
inline void CheckNameRequest::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional string name = 3;
inline bool CheckNameRequest::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckNameRequest::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckNameRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckNameRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CheckNameRequest::name() const {
  return *name_;
}
inline void CheckNameRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CheckNameRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CheckNameRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CheckNameRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CheckNameRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CheckNameRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CheckNameResponse

// optional int64 uid = 1;
inline bool CheckNameResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckNameResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckNameResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckNameResponse::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 CheckNameResponse::uid() const {
  return uid_;
}
inline void CheckNameResponse::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 pid = 2;
inline bool CheckNameResponse::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckNameResponse::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckNameResponse::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckNameResponse::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 CheckNameResponse::pid() const {
  return pid_;
}
inline void CheckNameResponse::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional bool result = 3;
inline bool CheckNameResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckNameResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckNameResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckNameResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool CheckNameResponse::result() const {
  return result_;
}
inline void CheckNameResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PlayerCount

// optional int64 uid = 1;
inline bool PlayerCount::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerCount::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerCount::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerCount::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 PlayerCount::uid() const {
  return uid_;
}
inline void PlayerCount::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// repeated int64 player = 2;
inline int PlayerCount::player_size() const {
  return player_.size();
}
inline void PlayerCount::clear_player() {
  player_.Clear();
}
inline ::google::protobuf::int64 PlayerCount::player(int index) const {
  return player_.Get(index);
}
inline void PlayerCount::set_player(int index, ::google::protobuf::int64 value) {
  player_.Set(index, value);
}
inline void PlayerCount::add_player(::google::protobuf::int64 value) {
  player_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PlayerCount::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PlayerCount::mutable_player() {
  return &player_;
}

// -------------------------------------------------------------------

// PlayerAttrSync_Attr

// optional int32 type = 1;
inline bool PlayerAttrSync_Attr::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerAttrSync_Attr::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerAttrSync_Attr::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerAttrSync_Attr::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PlayerAttrSync_Attr::type() const {
  return type_;
}
inline void PlayerAttrSync_Attr::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 val32 = 2;
inline bool PlayerAttrSync_Attr::has_val32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerAttrSync_Attr::set_has_val32() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerAttrSync_Attr::clear_has_val32() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerAttrSync_Attr::clear_val32() {
  val32_ = 0;
  clear_has_val32();
}
inline ::google::protobuf::int32 PlayerAttrSync_Attr::val32() const {
  return val32_;
}
inline void PlayerAttrSync_Attr::set_val32(::google::protobuf::int32 value) {
  set_has_val32();
  val32_ = value;
}

// optional int64 val64 = 3;
inline bool PlayerAttrSync_Attr::has_val64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerAttrSync_Attr::set_has_val64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerAttrSync_Attr::clear_has_val64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerAttrSync_Attr::clear_val64() {
  val64_ = GOOGLE_LONGLONG(0);
  clear_has_val64();
}
inline ::google::protobuf::int64 PlayerAttrSync_Attr::val64() const {
  return val64_;
}
inline void PlayerAttrSync_Attr::set_val64(::google::protobuf::int64 value) {
  set_has_val64();
  val64_ = value;
}

// optional string valstr = 4;
inline bool PlayerAttrSync_Attr::has_valstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerAttrSync_Attr::set_has_valstr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerAttrSync_Attr::clear_has_valstr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerAttrSync_Attr::clear_valstr() {
  if (valstr_ != &::google::protobuf::internal::kEmptyString) {
    valstr_->clear();
  }
  clear_has_valstr();
}
inline const ::std::string& PlayerAttrSync_Attr::valstr() const {
  return *valstr_;
}
inline void PlayerAttrSync_Attr::set_valstr(const ::std::string& value) {
  set_has_valstr();
  if (valstr_ == &::google::protobuf::internal::kEmptyString) {
    valstr_ = new ::std::string;
  }
  valstr_->assign(value);
}
inline void PlayerAttrSync_Attr::set_valstr(const char* value) {
  set_has_valstr();
  if (valstr_ == &::google::protobuf::internal::kEmptyString) {
    valstr_ = new ::std::string;
  }
  valstr_->assign(value);
}
inline void PlayerAttrSync_Attr::set_valstr(const char* value, size_t size) {
  set_has_valstr();
  if (valstr_ == &::google::protobuf::internal::kEmptyString) {
    valstr_ = new ::std::string;
  }
  valstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerAttrSync_Attr::mutable_valstr() {
  set_has_valstr();
  if (valstr_ == &::google::protobuf::internal::kEmptyString) {
    valstr_ = new ::std::string;
  }
  return valstr_;
}
inline ::std::string* PlayerAttrSync_Attr::release_valstr() {
  clear_has_valstr();
  if (valstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = valstr_;
    valstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerAttrSync_Attr::set_allocated_valstr(::std::string* valstr) {
  if (valstr_ != &::google::protobuf::internal::kEmptyString) {
    delete valstr_;
  }
  if (valstr) {
    set_has_valstr();
    valstr_ = valstr;
  } else {
    clear_has_valstr();
    valstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PlayerAttrSync

// optional int64 pid = 1;
inline bool PlayerAttrSync::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerAttrSync::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerAttrSync::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerAttrSync::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 PlayerAttrSync::pid() const {
  return pid_;
}
inline void PlayerAttrSync::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// repeated .Message.PlayerAttrSync.Attr attr = 2;
inline int PlayerAttrSync::attr_size() const {
  return attr_.size();
}
inline void PlayerAttrSync::clear_attr() {
  attr_.Clear();
}
inline const ::Message::PlayerAttrSync_Attr& PlayerAttrSync::attr(int index) const {
  return attr_.Get(index);
}
inline ::Message::PlayerAttrSync_Attr* PlayerAttrSync::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::Message::PlayerAttrSync_Attr* PlayerAttrSync::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::PlayerAttrSync_Attr >&
PlayerAttrSync::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::PlayerAttrSync_Attr >*
PlayerAttrSync::mutable_attr() {
  return &attr_;
}

// -------------------------------------------------------------------

// PlayerLoadOver

// optional int64 pid = 1;
inline bool PlayerLoadOver::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLoadOver::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLoadOver::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLoadOver::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 PlayerLoadOver::pid() const {
  return pid_;
}
inline void PlayerLoadOver::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// -------------------------------------------------------------------

// ObservePlayerRequest

// optional int64 playerid = 1;
inline bool ObservePlayerRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObservePlayerRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObservePlayerRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObservePlayerRequest::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ObservePlayerRequest::playerid() const {
  return playerid_;
}
inline void ObservePlayerRequest::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string playername = 2;
inline bool ObservePlayerRequest::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObservePlayerRequest::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObservePlayerRequest::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObservePlayerRequest::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& ObservePlayerRequest::playername() const {
  return *playername_;
}
inline void ObservePlayerRequest::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ObservePlayerRequest::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ObservePlayerRequest::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObservePlayerRequest::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* ObservePlayerRequest::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObservePlayerRequest::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessagePlayer_2eproto__INCLUDED
