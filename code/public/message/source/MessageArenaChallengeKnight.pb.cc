// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageArenaChallengeKnight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageArenaChallengeKnight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* ArenaChallengeKnightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChallengeKnightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaChallengeKnightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChallengeKnightResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageArenaChallengeKnight_2eproto() {
  protobuf_AddDesc_MessageArenaChallengeKnight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageArenaChallengeKnight.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaChallengeKnightRequest_descriptor_ = file->message_type(0);
  static const int ArenaChallengeKnightRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeKnightRequest, template__),
  };
  ArenaChallengeKnightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChallengeKnightRequest_descriptor_,
      ArenaChallengeKnightRequest::default_instance_,
      ArenaChallengeKnightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeKnightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeKnightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChallengeKnightRequest));
  ArenaChallengeKnightResponse_descriptor_ = file->message_type(1);
  static const int ArenaChallengeKnightResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeKnightResponse, template__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeKnightResponse, result_),
  };
  ArenaChallengeKnightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChallengeKnightResponse_descriptor_,
      ArenaChallengeKnightResponse::default_instance_,
      ArenaChallengeKnightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeKnightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeKnightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChallengeKnightResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageArenaChallengeKnight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChallengeKnightRequest_descriptor_, &ArenaChallengeKnightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChallengeKnightResponse_descriptor_, &ArenaChallengeKnightResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageArenaChallengeKnight_2eproto() {
  delete ArenaChallengeKnightRequest::default_instance_;
  delete ArenaChallengeKnightRequest_reflection_;
  delete ArenaChallengeKnightResponse::default_instance_;
  delete ArenaChallengeKnightResponse_reflection_;
}

void protobuf_AddDesc_MessageArenaChallengeKnight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!MessageArenaChallengeKnight.proto\022\007Mes"
    "sage\"/\n\033ArenaChallengeKnightRequest\022\020\n\010t"
    "emplate\030\001 \001(\005\"@\n\034ArenaChallengeKnightRes"
    "ponse\022\020\n\010template\030\001 \001(\005\022\016\n\006result\030\002 \001(\005", 159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageArenaChallengeKnight.proto", &protobuf_RegisterTypes);
  ArenaChallengeKnightRequest::default_instance_ = new ArenaChallengeKnightRequest();
  ArenaChallengeKnightResponse::default_instance_ = new ArenaChallengeKnightResponse();
  ArenaChallengeKnightRequest::default_instance_->InitAsDefaultInstance();
  ArenaChallengeKnightResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageArenaChallengeKnight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageArenaChallengeKnight_2eproto {
  StaticDescriptorInitializer_MessageArenaChallengeKnight_2eproto() {
    protobuf_AddDesc_MessageArenaChallengeKnight_2eproto();
  }
} static_descriptor_initializer_MessageArenaChallengeKnight_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaChallengeKnightRequest::kTemplateFieldNumber;
#endif  // !_MSC_VER

ArenaChallengeKnightRequest::ArenaChallengeKnightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChallengeKnightRequest::InitAsDefaultInstance() {
}

ArenaChallengeKnightRequest::ArenaChallengeKnightRequest(const ArenaChallengeKnightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChallengeKnightRequest::SharedCtor() {
  _cached_size_ = 0;
  template__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChallengeKnightRequest::~ArenaChallengeKnightRequest() {
  SharedDtor();
}

void ArenaChallengeKnightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaChallengeKnightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChallengeKnightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallengeKnightRequest_descriptor_;
}

const ArenaChallengeKnightRequest& ArenaChallengeKnightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaChallengeKnight_2eproto();
  return *default_instance_;
}

ArenaChallengeKnightRequest* ArenaChallengeKnightRequest::default_instance_ = NULL;

ArenaChallengeKnightRequest* ArenaChallengeKnightRequest::New() const {
  return new ArenaChallengeKnightRequest;
}

void ArenaChallengeKnightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChallengeKnightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template__)));
          set_has_template_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChallengeKnightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template = 1;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChallengeKnightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template = 1;
  if (has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChallengeKnightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template = 1;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChallengeKnightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChallengeKnightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChallengeKnightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChallengeKnightRequest::MergeFrom(const ArenaChallengeKnightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_()) {
      set_template_(from.template_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChallengeKnightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChallengeKnightRequest::CopyFrom(const ArenaChallengeKnightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChallengeKnightRequest::IsInitialized() const {

  return true;
}

void ArenaChallengeKnightRequest::Swap(ArenaChallengeKnightRequest* other) {
  if (other != this) {
    std::swap(template__, other->template__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChallengeKnightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChallengeKnightRequest_descriptor_;
  metadata.reflection = ArenaChallengeKnightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaChallengeKnightResponse::kTemplateFieldNumber;
const int ArenaChallengeKnightResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ArenaChallengeKnightResponse::ArenaChallengeKnightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChallengeKnightResponse::InitAsDefaultInstance() {
}

ArenaChallengeKnightResponse::ArenaChallengeKnightResponse(const ArenaChallengeKnightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChallengeKnightResponse::SharedCtor() {
  _cached_size_ = 0;
  template__ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChallengeKnightResponse::~ArenaChallengeKnightResponse() {
  SharedDtor();
}

void ArenaChallengeKnightResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaChallengeKnightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChallengeKnightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallengeKnightResponse_descriptor_;
}

const ArenaChallengeKnightResponse& ArenaChallengeKnightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageArenaChallengeKnight_2eproto();
  return *default_instance_;
}

ArenaChallengeKnightResponse* ArenaChallengeKnightResponse::default_instance_ = NULL;

ArenaChallengeKnightResponse* ArenaChallengeKnightResponse::New() const {
  return new ArenaChallengeKnightResponse;
}

void ArenaChallengeKnightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template__ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChallengeKnightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template__)));
          set_has_template_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChallengeKnightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template = 1;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChallengeKnightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template = 1;
  if (has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChallengeKnightResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template = 1;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChallengeKnightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChallengeKnightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChallengeKnightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChallengeKnightResponse::MergeFrom(const ArenaChallengeKnightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_()) {
      set_template_(from.template_());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChallengeKnightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChallengeKnightResponse::CopyFrom(const ArenaChallengeKnightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChallengeKnightResponse::IsInitialized() const {

  return true;
}

void ArenaChallengeKnightResponse::Swap(ArenaChallengeKnightResponse* other) {
  if (other != this) {
    std::swap(template__, other->template__);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChallengeKnightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChallengeKnightResponse_descriptor_;
  metadata.reflection = ArenaChallengeKnightResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
