// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePlayerAttrib.proto

#ifndef PROTOBUF_MessagePlayerAttrib_2eproto__INCLUDED
#define PROTOBUF_MessagePlayerAttrib_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessagePlayerAttrib_2eproto();
void protobuf_AssignDesc_MessagePlayerAttrib_2eproto();
void protobuf_ShutdownFile_MessagePlayerAttrib_2eproto();

class PlayerAttrib;

// ===================================================================

class PlayerAttrib : public ::google::protobuf::Message {
 public:
  PlayerAttrib();
  virtual ~PlayerAttrib();

  PlayerAttrib(const PlayerAttrib& from);

  inline PlayerAttrib& operator=(const PlayerAttrib& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerAttrib& default_instance();

  void Swap(PlayerAttrib* other);

  // implements Message ----------------------------------------------

  PlayerAttrib* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerAttrib& from);
  void MergeFrom(const PlayerAttrib& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 templateid = 4;
  inline bool has_templateid() const;
  inline void clear_templateid();
  static const int kTemplateidFieldNumber = 4;
  inline ::google::protobuf::int32 templateid() const;
  inline void set_templateid(::google::protobuf::int32 value);

  // optional int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int64 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int32 gold = 7;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 silver = 8;
  inline bool has_silver() const;
  inline void clear_silver();
  static const int kSilverFieldNumber = 8;
  inline ::google::protobuf::int32 silver() const;
  inline void set_silver(::google::protobuf::int32 value);

  // optional int32 merit = 9;
  inline bool has_merit() const;
  inline void clear_merit();
  static const int kMeritFieldNumber = 9;
  inline ::google::protobuf::int32 merit() const;
  inline void set_merit(::google::protobuf::int32 value);

  // optional int32 fighting = 10;
  inline bool has_fighting() const;
  inline void clear_fighting();
  static const int kFightingFieldNumber = 10;
  inline ::google::protobuf::int32 fighting() const;
  inline void set_fighting(::google::protobuf::int32 value);

  // optional int32 stamina = 11;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 11;
  inline ::google::protobuf::int32 stamina() const;
  inline void set_stamina(::google::protobuf::int32 value);

  // optional int32 strength = 12;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 12;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // optional int32 intellect = 13;
  inline bool has_intellect() const;
  inline void clear_intellect();
  static const int kIntellectFieldNumber = 13;
  inline ::google::protobuf::int32 intellect() const;
  inline void set_intellect(::google::protobuf::int32 value);

  // optional int32 technique = 14;
  inline bool has_technique() const;
  inline void clear_technique();
  static const int kTechniqueFieldNumber = 14;
  inline ::google::protobuf::int32 technique() const;
  inline void set_technique(::google::protobuf::int32 value);

  // optional int32 agility = 15;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 15;
  inline ::google::protobuf::int32 agility() const;
  inline void set_agility(::google::protobuf::int32 value);

  // optional int32 hit = 16;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 16;
  inline ::google::protobuf::int32 hit() const;
  inline void set_hit(::google::protobuf::int32 value);

  // optional int32 jouk = 17;
  inline bool has_jouk() const;
  inline void clear_jouk();
  static const int kJoukFieldNumber = 17;
  inline ::google::protobuf::int32 jouk() const;
  inline void set_jouk(::google::protobuf::int32 value);

  // optional int32 crit = 18;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 18;
  inline ::google::protobuf::int32 crit() const;
  inline void set_crit(::google::protobuf::int32 value);

  // optional int32 tenacity = 19;
  inline bool has_tenacity() const;
  inline void clear_tenacity();
  static const int kTenacityFieldNumber = 19;
  inline ::google::protobuf::int32 tenacity() const;
  inline void set_tenacity(::google::protobuf::int32 value);

  // optional int32 parry = 20;
  inline bool has_parry() const;
  inline void clear_parry();
  static const int kParryFieldNumber = 20;
  inline ::google::protobuf::int32 parry() const;
  inline void set_parry(::google::protobuf::int32 value);

  // optional int32 treat = 21;
  inline bool has_treat() const;
  inline void clear_treat();
  static const int kTreatFieldNumber = 21;
  inline ::google::protobuf::int32 treat() const;
  inline void set_treat(::google::protobuf::int32 value);

  // optional int32 physidamage = 22;
  inline bool has_physidamage() const;
  inline void clear_physidamage();
  static const int kPhysidamageFieldNumber = 22;
  inline ::google::protobuf::int32 physidamage() const;
  inline void set_physidamage(::google::protobuf::int32 value);

  // optional int32 physidefense = 23;
  inline bool has_physidefense() const;
  inline void clear_physidefense();
  static const int kPhysidefenseFieldNumber = 23;
  inline ::google::protobuf::int32 physidefense() const;
  inline void set_physidefense(::google::protobuf::int32 value);

  // optional int32 magicdamage = 24;
  inline bool has_magicdamage() const;
  inline void clear_magicdamage();
  static const int kMagicdamageFieldNumber = 24;
  inline ::google::protobuf::int32 magicdamage() const;
  inline void set_magicdamage(::google::protobuf::int32 value);

  // optional int32 magicdefense = 26;
  inline bool has_magicdefense() const;
  inline void clear_magicdefense();
  static const int kMagicdefenseFieldNumber = 26;
  inline ::google::protobuf::int32 magicdefense() const;
  inline void set_magicdefense(::google::protobuf::int32 value);

  // optional int32 stuntdamage = 27;
  inline bool has_stuntdamage() const;
  inline void clear_stuntdamage();
  static const int kStuntdamageFieldNumber = 27;
  inline ::google::protobuf::int32 stuntdamage() const;
  inline void set_stuntdamage(::google::protobuf::int32 value);

  // optional int32 stuntdefense = 28;
  inline bool has_stuntdefense() const;
  inline void clear_stuntdefense();
  static const int kStuntdefenseFieldNumber = 28;
  inline ::google::protobuf::int32 stuntdefense() const;
  inline void set_stuntdefense(::google::protobuf::int32 value);

  // optional int32 staminamax = 29;
  inline bool has_staminamax() const;
  inline void clear_staminamax();
  static const int kStaminamaxFieldNumber = 29;
  inline ::google::protobuf::int32 staminamax() const;
  inline void set_staminamax(::google::protobuf::int32 value);

  // optional int32 basestrength = 30;
  inline bool has_basestrength() const;
  inline void clear_basestrength();
  static const int kBasestrengthFieldNumber = 30;
  inline ::google::protobuf::int32 basestrength() const;
  inline void set_basestrength(::google::protobuf::int32 value);

  // optional int32 baseintellect = 31;
  inline bool has_baseintellect() const;
  inline void clear_baseintellect();
  static const int kBaseintellectFieldNumber = 31;
  inline ::google::protobuf::int32 baseintellect() const;
  inline void set_baseintellect(::google::protobuf::int32 value);

  // optional int32 basetechnique = 32;
  inline bool has_basetechnique() const;
  inline void clear_basetechnique();
  static const int kBasetechniqueFieldNumber = 32;
  inline ::google::protobuf::int32 basetechnique() const;
  inline void set_basetechnique(::google::protobuf::int32 value);

  // optional int32 baseagility = 33;
  inline bool has_baseagility() const;
  inline void clear_baseagility();
  static const int kBaseagilityFieldNumber = 33;
  inline ::google::protobuf::int32 baseagility() const;
  inline void set_baseagility(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.PlayerAttrib)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_templateid();
  inline void clear_has_templateid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_silver();
  inline void clear_has_silver();
  inline void set_has_merit();
  inline void clear_has_merit();
  inline void set_has_fighting();
  inline void clear_has_fighting();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_intellect();
  inline void clear_has_intellect();
  inline void set_has_technique();
  inline void clear_has_technique();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_jouk();
  inline void clear_has_jouk();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_tenacity();
  inline void clear_has_tenacity();
  inline void set_has_parry();
  inline void clear_has_parry();
  inline void set_has_treat();
  inline void clear_has_treat();
  inline void set_has_physidamage();
  inline void clear_has_physidamage();
  inline void set_has_physidefense();
  inline void clear_has_physidefense();
  inline void set_has_magicdamage();
  inline void clear_has_magicdamage();
  inline void set_has_magicdefense();
  inline void clear_has_magicdefense();
  inline void set_has_stuntdamage();
  inline void clear_has_stuntdamage();
  inline void set_has_stuntdefense();
  inline void clear_has_stuntdefense();
  inline void set_has_staminamax();
  inline void clear_has_staminamax();
  inline void set_has_basestrength();
  inline void clear_has_basestrength();
  inline void set_has_baseintellect();
  inline void clear_has_baseintellect();
  inline void set_has_basetechnique();
  inline void clear_has_basetechnique();
  inline void set_has_baseagility();
  inline void clear_has_baseagility();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 pid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 templateid_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 silver_;
  ::google::protobuf::int32 merit_;
  ::google::protobuf::int32 fighting_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 intellect_;
  ::google::protobuf::int32 technique_;
  ::google::protobuf::int32 agility_;
  ::google::protobuf::int32 hit_;
  ::google::protobuf::int32 jouk_;
  ::google::protobuf::int32 crit_;
  ::google::protobuf::int32 tenacity_;
  ::google::protobuf::int32 parry_;
  ::google::protobuf::int32 treat_;
  ::google::protobuf::int32 physidamage_;
  ::google::protobuf::int32 physidefense_;
  ::google::protobuf::int32 magicdamage_;
  ::google::protobuf::int32 magicdefense_;
  ::google::protobuf::int32 stuntdamage_;
  ::google::protobuf::int32 stuntdefense_;
  ::google::protobuf::int32 staminamax_;
  ::google::protobuf::int32 basestrength_;
  ::google::protobuf::int32 baseintellect_;
  ::google::protobuf::int32 basetechnique_;
  ::google::protobuf::int32 baseagility_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_MessagePlayerAttrib_2eproto();
  friend void protobuf_AssignDesc_MessagePlayerAttrib_2eproto();
  friend void protobuf_ShutdownFile_MessagePlayerAttrib_2eproto();

  void InitAsDefaultInstance();
  static PlayerAttrib* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerAttrib

// optional int64 pid = 1;
inline bool PlayerAttrib::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerAttrib::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerAttrib::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerAttrib::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 PlayerAttrib::pid() const {
  return pid_;
}
inline void PlayerAttrib::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// optional string name = 2;
inline bool PlayerAttrib::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerAttrib::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerAttrib::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerAttrib::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerAttrib::name() const {
  return *name_;
}
inline void PlayerAttrib::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerAttrib::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerAttrib::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerAttrib::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerAttrib::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerAttrib::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool PlayerAttrib::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerAttrib::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerAttrib::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerAttrib::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerAttrib::level() const {
  return level_;
}
inline void PlayerAttrib::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 templateid = 4;
inline bool PlayerAttrib::has_templateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerAttrib::set_has_templateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerAttrib::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerAttrib::clear_templateid() {
  templateid_ = 0;
  clear_has_templateid();
}
inline ::google::protobuf::int32 PlayerAttrib::templateid() const {
  return templateid_;
}
inline void PlayerAttrib::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
}

// optional int32 hp = 5;
inline bool PlayerAttrib::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerAttrib::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerAttrib::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerAttrib::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PlayerAttrib::hp() const {
  return hp_;
}
inline void PlayerAttrib::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int64 exp = 6;
inline bool PlayerAttrib::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerAttrib::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerAttrib::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerAttrib::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 PlayerAttrib::exp() const {
  return exp_;
}
inline void PlayerAttrib::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 gold = 7;
inline bool PlayerAttrib::has_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerAttrib::set_has_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerAttrib::clear_has_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerAttrib::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 PlayerAttrib::gold() const {
  return gold_;
}
inline void PlayerAttrib::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 silver = 8;
inline bool PlayerAttrib::has_silver() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerAttrib::set_has_silver() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerAttrib::clear_has_silver() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerAttrib::clear_silver() {
  silver_ = 0;
  clear_has_silver();
}
inline ::google::protobuf::int32 PlayerAttrib::silver() const {
  return silver_;
}
inline void PlayerAttrib::set_silver(::google::protobuf::int32 value) {
  set_has_silver();
  silver_ = value;
}

// optional int32 merit = 9;
inline bool PlayerAttrib::has_merit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerAttrib::set_has_merit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerAttrib::clear_has_merit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerAttrib::clear_merit() {
  merit_ = 0;
  clear_has_merit();
}
inline ::google::protobuf::int32 PlayerAttrib::merit() const {
  return merit_;
}
inline void PlayerAttrib::set_merit(::google::protobuf::int32 value) {
  set_has_merit();
  merit_ = value;
}

// optional int32 fighting = 10;
inline bool PlayerAttrib::has_fighting() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerAttrib::set_has_fighting() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerAttrib::clear_has_fighting() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerAttrib::clear_fighting() {
  fighting_ = 0;
  clear_has_fighting();
}
inline ::google::protobuf::int32 PlayerAttrib::fighting() const {
  return fighting_;
}
inline void PlayerAttrib::set_fighting(::google::protobuf::int32 value) {
  set_has_fighting();
  fighting_ = value;
}

// optional int32 stamina = 11;
inline bool PlayerAttrib::has_stamina() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerAttrib::set_has_stamina() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerAttrib::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerAttrib::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline ::google::protobuf::int32 PlayerAttrib::stamina() const {
  return stamina_;
}
inline void PlayerAttrib::set_stamina(::google::protobuf::int32 value) {
  set_has_stamina();
  stamina_ = value;
}

// optional int32 strength = 12;
inline bool PlayerAttrib::has_strength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerAttrib::set_has_strength() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerAttrib::clear_has_strength() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerAttrib::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 PlayerAttrib::strength() const {
  return strength_;
}
inline void PlayerAttrib::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// optional int32 intellect = 13;
inline bool PlayerAttrib::has_intellect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerAttrib::set_has_intellect() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerAttrib::clear_has_intellect() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerAttrib::clear_intellect() {
  intellect_ = 0;
  clear_has_intellect();
}
inline ::google::protobuf::int32 PlayerAttrib::intellect() const {
  return intellect_;
}
inline void PlayerAttrib::set_intellect(::google::protobuf::int32 value) {
  set_has_intellect();
  intellect_ = value;
}

// optional int32 technique = 14;
inline bool PlayerAttrib::has_technique() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerAttrib::set_has_technique() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerAttrib::clear_has_technique() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerAttrib::clear_technique() {
  technique_ = 0;
  clear_has_technique();
}
inline ::google::protobuf::int32 PlayerAttrib::technique() const {
  return technique_;
}
inline void PlayerAttrib::set_technique(::google::protobuf::int32 value) {
  set_has_technique();
  technique_ = value;
}

// optional int32 agility = 15;
inline bool PlayerAttrib::has_agility() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerAttrib::set_has_agility() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerAttrib::clear_has_agility() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerAttrib::clear_agility() {
  agility_ = 0;
  clear_has_agility();
}
inline ::google::protobuf::int32 PlayerAttrib::agility() const {
  return agility_;
}
inline void PlayerAttrib::set_agility(::google::protobuf::int32 value) {
  set_has_agility();
  agility_ = value;
}

// optional int32 hit = 16;
inline bool PlayerAttrib::has_hit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerAttrib::set_has_hit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerAttrib::clear_has_hit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerAttrib::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 PlayerAttrib::hit() const {
  return hit_;
}
inline void PlayerAttrib::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
}

// optional int32 jouk = 17;
inline bool PlayerAttrib::has_jouk() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerAttrib::set_has_jouk() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerAttrib::clear_has_jouk() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerAttrib::clear_jouk() {
  jouk_ = 0;
  clear_has_jouk();
}
inline ::google::protobuf::int32 PlayerAttrib::jouk() const {
  return jouk_;
}
inline void PlayerAttrib::set_jouk(::google::protobuf::int32 value) {
  set_has_jouk();
  jouk_ = value;
}

// optional int32 crit = 18;
inline bool PlayerAttrib::has_crit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerAttrib::set_has_crit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerAttrib::clear_has_crit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerAttrib::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline ::google::protobuf::int32 PlayerAttrib::crit() const {
  return crit_;
}
inline void PlayerAttrib::set_crit(::google::protobuf::int32 value) {
  set_has_crit();
  crit_ = value;
}

// optional int32 tenacity = 19;
inline bool PlayerAttrib::has_tenacity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerAttrib::set_has_tenacity() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerAttrib::clear_has_tenacity() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerAttrib::clear_tenacity() {
  tenacity_ = 0;
  clear_has_tenacity();
}
inline ::google::protobuf::int32 PlayerAttrib::tenacity() const {
  return tenacity_;
}
inline void PlayerAttrib::set_tenacity(::google::protobuf::int32 value) {
  set_has_tenacity();
  tenacity_ = value;
}

// optional int32 parry = 20;
inline bool PlayerAttrib::has_parry() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerAttrib::set_has_parry() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerAttrib::clear_has_parry() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerAttrib::clear_parry() {
  parry_ = 0;
  clear_has_parry();
}
inline ::google::protobuf::int32 PlayerAttrib::parry() const {
  return parry_;
}
inline void PlayerAttrib::set_parry(::google::protobuf::int32 value) {
  set_has_parry();
  parry_ = value;
}

// optional int32 treat = 21;
inline bool PlayerAttrib::has_treat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerAttrib::set_has_treat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerAttrib::clear_has_treat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerAttrib::clear_treat() {
  treat_ = 0;
  clear_has_treat();
}
inline ::google::protobuf::int32 PlayerAttrib::treat() const {
  return treat_;
}
inline void PlayerAttrib::set_treat(::google::protobuf::int32 value) {
  set_has_treat();
  treat_ = value;
}

// optional int32 physidamage = 22;
inline bool PlayerAttrib::has_physidamage() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlayerAttrib::set_has_physidamage() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlayerAttrib::clear_has_physidamage() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlayerAttrib::clear_physidamage() {
  physidamage_ = 0;
  clear_has_physidamage();
}
inline ::google::protobuf::int32 PlayerAttrib::physidamage() const {
  return physidamage_;
}
inline void PlayerAttrib::set_physidamage(::google::protobuf::int32 value) {
  set_has_physidamage();
  physidamage_ = value;
}

// optional int32 physidefense = 23;
inline bool PlayerAttrib::has_physidefense() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PlayerAttrib::set_has_physidefense() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PlayerAttrib::clear_has_physidefense() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PlayerAttrib::clear_physidefense() {
  physidefense_ = 0;
  clear_has_physidefense();
}
inline ::google::protobuf::int32 PlayerAttrib::physidefense() const {
  return physidefense_;
}
inline void PlayerAttrib::set_physidefense(::google::protobuf::int32 value) {
  set_has_physidefense();
  physidefense_ = value;
}

// optional int32 magicdamage = 24;
inline bool PlayerAttrib::has_magicdamage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PlayerAttrib::set_has_magicdamage() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PlayerAttrib::clear_has_magicdamage() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PlayerAttrib::clear_magicdamage() {
  magicdamage_ = 0;
  clear_has_magicdamage();
}
inline ::google::protobuf::int32 PlayerAttrib::magicdamage() const {
  return magicdamage_;
}
inline void PlayerAttrib::set_magicdamage(::google::protobuf::int32 value) {
  set_has_magicdamage();
  magicdamage_ = value;
}

// optional int32 magicdefense = 26;
inline bool PlayerAttrib::has_magicdefense() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PlayerAttrib::set_has_magicdefense() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PlayerAttrib::clear_has_magicdefense() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PlayerAttrib::clear_magicdefense() {
  magicdefense_ = 0;
  clear_has_magicdefense();
}
inline ::google::protobuf::int32 PlayerAttrib::magicdefense() const {
  return magicdefense_;
}
inline void PlayerAttrib::set_magicdefense(::google::protobuf::int32 value) {
  set_has_magicdefense();
  magicdefense_ = value;
}

// optional int32 stuntdamage = 27;
inline bool PlayerAttrib::has_stuntdamage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PlayerAttrib::set_has_stuntdamage() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PlayerAttrib::clear_has_stuntdamage() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PlayerAttrib::clear_stuntdamage() {
  stuntdamage_ = 0;
  clear_has_stuntdamage();
}
inline ::google::protobuf::int32 PlayerAttrib::stuntdamage() const {
  return stuntdamage_;
}
inline void PlayerAttrib::set_stuntdamage(::google::protobuf::int32 value) {
  set_has_stuntdamage();
  stuntdamage_ = value;
}

// optional int32 stuntdefense = 28;
inline bool PlayerAttrib::has_stuntdefense() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PlayerAttrib::set_has_stuntdefense() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PlayerAttrib::clear_has_stuntdefense() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PlayerAttrib::clear_stuntdefense() {
  stuntdefense_ = 0;
  clear_has_stuntdefense();
}
inline ::google::protobuf::int32 PlayerAttrib::stuntdefense() const {
  return stuntdefense_;
}
inline void PlayerAttrib::set_stuntdefense(::google::protobuf::int32 value) {
  set_has_stuntdefense();
  stuntdefense_ = value;
}

// optional int32 staminamax = 29;
inline bool PlayerAttrib::has_staminamax() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PlayerAttrib::set_has_staminamax() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PlayerAttrib::clear_has_staminamax() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PlayerAttrib::clear_staminamax() {
  staminamax_ = 0;
  clear_has_staminamax();
}
inline ::google::protobuf::int32 PlayerAttrib::staminamax() const {
  return staminamax_;
}
inline void PlayerAttrib::set_staminamax(::google::protobuf::int32 value) {
  set_has_staminamax();
  staminamax_ = value;
}

// optional int32 basestrength = 30;
inline bool PlayerAttrib::has_basestrength() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PlayerAttrib::set_has_basestrength() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PlayerAttrib::clear_has_basestrength() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PlayerAttrib::clear_basestrength() {
  basestrength_ = 0;
  clear_has_basestrength();
}
inline ::google::protobuf::int32 PlayerAttrib::basestrength() const {
  return basestrength_;
}
inline void PlayerAttrib::set_basestrength(::google::protobuf::int32 value) {
  set_has_basestrength();
  basestrength_ = value;
}

// optional int32 baseintellect = 31;
inline bool PlayerAttrib::has_baseintellect() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PlayerAttrib::set_has_baseintellect() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PlayerAttrib::clear_has_baseintellect() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PlayerAttrib::clear_baseintellect() {
  baseintellect_ = 0;
  clear_has_baseintellect();
}
inline ::google::protobuf::int32 PlayerAttrib::baseintellect() const {
  return baseintellect_;
}
inline void PlayerAttrib::set_baseintellect(::google::protobuf::int32 value) {
  set_has_baseintellect();
  baseintellect_ = value;
}

// optional int32 basetechnique = 32;
inline bool PlayerAttrib::has_basetechnique() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PlayerAttrib::set_has_basetechnique() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PlayerAttrib::clear_has_basetechnique() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PlayerAttrib::clear_basetechnique() {
  basetechnique_ = 0;
  clear_has_basetechnique();
}
inline ::google::protobuf::int32 PlayerAttrib::basetechnique() const {
  return basetechnique_;
}
inline void PlayerAttrib::set_basetechnique(::google::protobuf::int32 value) {
  set_has_basetechnique();
  basetechnique_ = value;
}

// optional int32 baseagility = 33;
inline bool PlayerAttrib::has_baseagility() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PlayerAttrib::set_has_baseagility() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PlayerAttrib::clear_has_baseagility() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PlayerAttrib::clear_baseagility() {
  baseagility_ = 0;
  clear_has_baseagility();
}
inline ::google::protobuf::int32 PlayerAttrib::baseagility() const {
  return baseagility_;
}
inline void PlayerAttrib::set_baseagility(::google::protobuf::int32 value) {
  set_has_baseagility();
  baseagility_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessagePlayerAttrib_2eproto__INCLUDED
